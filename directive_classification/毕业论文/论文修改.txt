****2.2下面小结标题更改  1.文档内容分析及应用   2.文档与代码关联关系挖掘   3.知识抽取
****3.1  4.1改为概览   3.2.1 概要类别定义   3.2.2 详细类别定义  
****摘要 引言 和 总结  API知识指的是处理后的知识，未处理前叫API约束语句语句
****github和Stack Overflow的逻辑关系   即使程序不犯错也会在SO上提问，因为不知道怎么用   对应着我们的两个应用
****约束知识比例极小  改为约束混杂在大量的语句中   不要提语料



20190313
****1.语句表述要通顺   标题修改   摘要中用约束 不要语句   
****2.API使用不正确代码很多  但是文档中都有  SO也有很多类似问题    知识在那也会造成错误，所以要抽取这些知识  帮助开发人员
****3.突出知识图谱的重要性
****4.框架图重新画，不要写fasttext 直接写分类模型
****5.将背景知识放在前面，细微的知识放到工作后面介绍
****4. 第三章 API约束知识抽取   第四章  约束知识应用   第一节概述  API约束知识问答   基于API约束知识的代码缺陷检测
****实验 分3节  数据准备（API全集的数据集，训练数据来源）  API约束知识抽取   设计  结果  分析三小节   两个应用分别做实验
****分类编程概要类别和详细类别
****表格和图片的位置调整





20190306
1.论文章节排版不正确，包括指导老师，第二章应该主要是相关文献
2.第三章文章工作单薄，标题也起得不好

思考：
1.基础知识介绍缩减，可以穿插在用到的地方简单介绍。然后将相关工作放到第二章，进行扩展并分类介绍
2.可以简述研究的冬季，框架的设计思路，
3.考虑将应用作为方法的一部分，进行详细描述
4.将不同的研究问题，实验方案，实验结果分析放到一起
5.尾注中的网址列为参考文献

意见：
1.第二章背景和相关工作   不相关的背景知识需要压缩   相关工作7-8/50   引言5-6    方法20多页   实验 10页左右
2.技术章节标题不明确，需要修改
3.举例说明我们跟他分类不同的合理性，我们主要用于后续自动分类，目的不同，可能模板相似
4.调用 和 扩展

加的工作内容：
1.针对每个细分小类，规定一套通用的描述模板，能够清晰地显示出约束的主要成分，并将约束性语句转换成这种描述
2.利用这种通用描述，我们可以检测给定代码使用api时是否满足约束
3.针对这两个内容都进行实验，第一个将转换后的描述人工判定正确性；第二个根据api在SO上找一些代码片段，看检测结果是否正确，甚至可以提供修正方案
4.将每个directive做成一个点，然后每个点连接方法、参数等等，形成一个图

