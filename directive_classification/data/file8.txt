 @param map the map to decorate, must not be null	__label__NotNullDirective
 For instance, for types Http, and Socks, a SocketAddress must be provided.	__label__NotNullDirective
 @throws IllegalArgumentException if map or factory is null	__label__NotNullDirective
 @param bag the bag to decorate, must not be null	__label__NotNullDirective
 @param bag the bag to decorate, must not be null	__label__NotNullDirective
 @throws IllegalArgumentException if the collection is null	__label__NotNullDirective
 @throws IllegalArgumentException if the buffer is null	__label__NotNullDirective
 @throws IllegalArgumentException if list is null	__label__NotNullDirective
 @param list the list to decorate, must not be null	__label__NotNullDirective
 throws IllegalArgumentException if list is null	__label__NotNullDirective
 @throws IllegalArgumentException if list is null	__label__NotNullDirective
 @param iterator the iterator to decorate, must not be null	__label__NotNullDirective
 @param entry the Map.Entry to decorate, must not be null	__label__NotNullDirective
 @param map the map to decorate, must not be null	__label__NotNullDirective
 @throws IllegalArgumentException if bag or transformer is null	__label__NotNullDirective
 @throws IllegalArgumentException if the key array is null	__label__NotNullDirective
 @param keys the array of keys, not null	__label__NotNullDirective
 @param bag the bag to decorate, must not be null	__label__NotNullDirective
 @param buffer the buffer to decorate, must not be null	__label__NotNullDirective
 @param list the list to decorate, must not be null	__label__NotNullDirective
 @param list the list to decorate, must not be null	__label__NotNullDirective
 @param transformer the transformer to use for conversion, must not be null	__label__NotNullDirective
 @param set the set to decorate, must not be null	__label__NotNullDirective
 @param predicate the predicate to use for validation, must not be null	__label__NotNullDirective
 @param coll1 the first collection, must not be null	__label__NotNullDirective
 @param predicate the predicate to use for validation, must not be null	__label__NotNullDirective
 @param collection the collection to decorate, must not be null	__label__NotNullDirective
 @param transformer the transformer to use for conversion, must not be null	__label__NotNullDirective
 @param list the list to decorate, must not be null	__label__NotNullDirective
 @param predicate the predicate to use for validation, must not be null	__label__NotNullDirective
 @param map the map to decorate, must not be null	__label__NotNullDirective
 @param transformer the transformer to use for conversion, must not be null	__label__NotNullDirective
 or if this map does not permit null keys or values, and the specified map contains null keys or values.	__label__NotNullDirective
 @throws IllegalArgumentException if the Map is null	__label__NotNullDirective
 @throws NullPointerException if map is null	__label__NotNullDirective
 This implementation uses the equals method and assumes neither value is null.	__label__NotNullDirective
 @throws IllegalArgumentException if the Map or Transformer is null	__label__NotNullDirective
 @param buffer the buffer to synchronize, must not be null	__label__NotNullDirective
 @param transformer the transformer for the bag, must not be null	__label__NotNullDirective
 @param transformer the transformer for the set, must not be null	__label__NotNullDirective
 @param predicate the predicate for the sorted set, must not be null	__label__NotNullDirective
 @param transformer the transformer for the set, must not be null	__label__NotNullDirective
 @param coll the collection to decorate, must not be null	__label__NotNullDirective
 @param map the sorted map to make unmodifiable, must not be null	__label__NotNullDirective
 @param map the map to make lazy, must not be null	__label__NotNullDirective
 @param buffer the buffer to decorate, must not be null	__label__NotNullDirective
 @param b the second collection, must not be null	__label__NotNullDirective
 The map must be empty and non-null.	__label__NotNullDirective
 @throws NullPointerException if either node is null	__label__NotNullDirective
 @throws NullPointerException if array is null	__label__NotNullDirective
 @throws IllegalArgumentException if the Map is null	__label__NotNullDirective
 @throws IllegalArgumentException if the Set or Predicate is null	__label__NotNullDirective
 @param predicate the predicate to run each time in the transformer, not null	__label__NotNullDirective
 @param factory the factory to run each time in the transformer, not null	__label__NotNullDirective
 @throws IllegalArgumentException if the buffer is null	__label__NotNullDirective
 @throws NullPointerException if the stream is null	__label__NotNullDirective
 @throws IllegalArgumentException if set is null	__label__NotNullDirective
 null means catalog name should not be used to narrow down the search.	__label__NullSemanticsDirective
 @param bindings The new array of bindings; may be null.	__label__NullSemanticsDirective
 null means drop schema name from the selection criteria	__label__NullSemanticsDirective
 Specify null to return all CRLs (if supported).	__label__NullSemanticsDirective
 null means that the schema name should not be used to narrow the search	__label__NullSemanticsDirective
 @param envp array of strings, each element of which has environment variable settings in the format name=value, or null if the subprocess should inherit the environment of the current process.	__label__NullSemanticsDirective
 @param envp array of strings, each element of which has environment variable settings in the format name=value, or null if the subprocess should inherit the environment of the current process.	__label__NullSemanticsDirective
 @param array an array to populate from, null ignored	__label__NullSemanticsDirective
 @param valuePredicate the predicate to validate to values, null means no check	__label__NullSemanticsDirective
 @param valueTransformer the transformer to use for value conversion, null means no transformation	__label__NullSemanticsDirective
 @param keyPred the predicate for keys, null means no check	__label__NullSemanticsDirective
 @param keyTransformer the transformer to use for key conversion, null means no conversion	__label__NullSemanticsDirective
 @param defaultTransformer the transformer to use if no match, null means return null	__label__NullSemanticsDirective
 A null input object is accepted and will return true the first time, and false subsequently as well.	__label__NullSemanticsDirective
 @param cause the underlying reason for this SQLException (which is saved for later retrieval bythe getCause() method); may be null indicating the cause is non-existent or unknown.	__label__NullSemanticsDirective
 @param params parameters for the Policy, which may be null.	__label__NullSemanticsDirective
 @param input the {@link Iterable} to get the input from, may be null	__label__NullSemanticsDirective
 Constructs an UnboundedFifoBuffer with the specified number of elements. The integer must be a positive integer.	__label__NumberRangeDirective
 @param size must be non-negative, and the sum position + size must be non-negative	__label__NumberRangeDirective
 The unit increment must be greater than zero.	__label__NumberRangeDirective
 The index must be a value greater than or equal to { 0} and less than the current size of the vector.	__label__NumberRangeDirective
 @param threshold the new threshold value in bytes. Must be non-negative.	__label__NumberRangeDirective
 The initial index of the range (from) must lie between zero and original.length, inclusive.	__label__NumberRangeDirective
 @param v 0 if the cookie should comply with the original Netscape specification; 1 if the cookie should comply with RFC 2965/2109	__label__NumberRangeDirective
 A negative value for the ttl will result in an IllegalArgumentException being thrown.	__label__NumberRangeDirective
 @param id the thread ID of the thread. Must be positive.	__label__NumberRangeDirective
 @param keyType the type of reference to use for keys; must be {@link #HARD}, {@link #SOFT}, {@link #WEAK}	__label__NumberRangeDirective
 Must be in [0, numberOfLines] â€“ note the inclusive end; there may be a hunk with line == numberOfLines to describe deleted lines at then end of the document.	__label__NumberRangeDirective
 The characters in the string must all be digits of the specified radix (as determined by whether {@link java.lang.Character#digit(char, int)} returns a nonnegative value), except that the first character may be an ASCII minus sign '-' ('\u002D') to indicate a negative value	__label__StringFormatDirective
 If the authority contains a literal IPv6 address then the address must be enclosed in square brackets ('[' and ']').	__label__StringFormatDirective
 If a scheme is given then the path, if also given, must either be empty or begin with a slash character ('/').	__label__StringFormatDirective
 The filename argument must be a complete path name.	__label__StringFormatDirective
 The name must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)	__label__StringFormatDirective
 The baseName argument should be a fully qualified class name.	__label__StringFormatDirective
 Note: The World Wide Web Consortium Recommendation states that UTF-8 should be used. Not doing so may introduce incompatibilites.	__label__StringFormatDirective
 @param mxbeanName the name of a platform MXBean within connection to forward to. mxbeanName must be in the format of {@link ObjectName ObjectName}.	__label__StringFormatDirective
 In the case of a certificate factory for X.509 certificates, the certificate provided in inStream must be DER-encoded and may be supplied in binary or printable (Base64) encoding. If the certificate is provided in Base64 encoding, it must be bounded at the beginning by -----BEGIN CERTIFICATE-----, and must be bounded at the end by -----END CERTIFICATE-----.	__label__StringFormatDirective
 To be portable, applications must give the SQL type code and the fully-qualified SQL type name when specifying a NULL user-defined or REF parameter.	__label__StringFormatDirective
 @param ID the ID for a TimeZone, either an abbreviation such as "PST", a full name such as "America/Los_Angeles", or a custom ID such as "GMT-8:00". Note that the support of abbreviations is for JDK 1.1.x compatibility only and full names should be used.	__label__StringFormatDirective
 This class also accepts dangling brackets but is strict about dangling metacharacters like +, ? and *, and will throw a {@link PatternSyntaxException} if it encounters them.	__label__StringFormatDirective
 @param contentAssistant the content assistant which implements {@link IContentAssistantExtension2} and {@link IContentAssistantExtension4}	__label__MethodParameterTypeDirective
 The key must implement Comparable.	__label__MethodParameterTypeDirective
 The createGroup method has two requirements on the group to be created: 1) the group must be a concrete subclass of ActivationGroup, and 2) the group must have a constructor that takes two arguments:      the group's ActivationGroupID, and     the group's initialization data (in a java.rmi.MarshalledObject)	__label__MethodParameterTypeDirective
 The second parameter must be of type Object; therefore, the java.lang equivalent objects should be used for built-in types.	__label__MethodParameterTypeDirective
 If the object is of a class implementing the interface SQLData, the JDBC driver should call the method SQLData.writeSQL to write it to the SQL data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, RowId, SQLXML or Array, the driver should pass it to the database as a value of the corresponding SQL type.	__label__MethodParameterTypeDirective
 @throws ClassCastException if the key or value is of an invalid type	__label__MethodParameterTypeDirective
 If the system property java.util.jar.Pack200.Unpacker is defined, then the value is taken to be the fully-qualified name of a concrete implementation class, which must implement Unpacker.	__label__MethodParameterTypeDirective
 @throws ClassCastException if the key is of an invalid type	__label__MethodParameterTypeDirective
 @throws ArrayStoreException if the runtime type of the specified array is not a supertype of the runtime type of every element in this list	__label__MethodParameterTypeDirective
 @throws ArrayStoreException if the runtime type of a is not a supertype of the runtime type of every element in this Vector	__label__MethodParameterTypeDirective
 The final index of the range (to), which must be greater than or equal to from, may be greater than original.length, in which case null is placed in all elements of the copy whose index is greater than or equal to original.length - from.	__label__MethodParameterCorrelationDirective
 If the underlying keystore implementation is of type jks, key must be encoded as an EncryptedPrivateKeyInfo as defined in the PKCS #8 standard.	__label__MethodParameterCorrelationDirective
 All elements in the array must be mutually comparable by the specified comparator (that is, c.compare(e1, e2) must not throw a ClassCastException for any elements e1 and e2 in the array)	__label__MethodParameterCorrelationDirective
 The final index of the range (to), which must be greater than or equal to from, may be greater than original.length, in which case 0f is placed in all elements of the copy whose index is greater than or equal to original.length - from.	__label__MethodParameterCorrelationDirective
 @throws IllegalArgumentException if end index is before the start	__label__MethodParameterCorrelationDirective
 If name is not null, it must be equal to the binary name of the class specified by the byte array "b", otherwise a {@link NoClassDefFoundError} will be thrown.	__label__MethodParameterCorrelationDirective
 @throws IllegalArgumentException if end index is before the start	__label__MethodParameterCorrelationDirective
 The reader must contain the number of characters specified by length otherwise a SQLException will be generated when the CallableStatement is executed.	__label__MethodParameterCorrelationDirective
 This value should not be cached, as it may be changed by a call to setPolicy.	__label__Post-CallDirective
 The returned parameter object must be initialized via a call to init, using an appropriate parameter specification or parameter encoding.	__label__Post-CallDirective
 @return the dialog, after being closed by the user, which the client can only call getReturnCode() or getToggleState()	__label__Post-CallDirective
 Any color allocated in this manner must be disposed by calling {@link #destroyColor(RGB)}, or by an eventual call to {@link #dispose()}. {@link Color#dispose()} must never been called directly on the returned color.	__label__Post-CallDirective
 Return a list of controls which should never have their foreground color reset.	__label__Post-CallDirective
 Because the actual set of threads may change dynamically while constructing this result, the returned collection is only a best-effort estimate.	__label__ReturnValueDirective
 @return A map of triggers (TriggerSequence) to bindings (Binding). This map may be empty, but it is never null.	__label__ReturnValueDirective
 @return {@link String} or null if the tool tip text was never set.	__label__ReturnValueDirective
 @return An array of the command options which will be passed to the new child command by rmid. Note that rmid may add other options before or after these options, or both. Never returns null.	__label__ReturnValueDirective
 Returns the viewer represented by this target, never null.	__label__ReturnValueDirective
 @return an integer array of 3 elements. The first element must be greater than 0. The second element must be must be greater than 0. The third element must be either 3 or 4.	__label__ReturnValueDirective
 The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.	__label__ReturnValueDirective
 Returns an array of all locales for which the getInstance methods of this class can return localized instances. It must contain at least a Locale instance equal to {@link java.util.Locale#US Locale.US}	__label__ReturnValueDirective
 If this set makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order.	__label__ReturnValueDirective
 The returned control's layout data must be an instance of GridData.	__label__ReturnValueDirective
 The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.	__label__ReturnValueDirective
 The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.	__label__ReturnValueDirective
 How many digits must be printed for the fractional part of m or a? There must be at least one digit to represent the fractional part, and beyond that as many, but only as many, more digits as are needed to uniquely distinguish the argument value from adjacent values of type double. That is, suppose that x is the exact mathematical value represented by the decimal representation produced by this method for a finite nonzero argument d. Then d must be the double value nearest to x; or if two double values are equally close to x, then d must be one of them and the least significant bit of the significand of d must be 0.	__label__ReturnValueDirective
 *  The computed result must be within 2.5 ulps of the exact result. The result of tanh for any finite input must have an absolute value less than or equal to 1. Note that once the exact result of tanh is within 1/2 of an ulp of the limit value of Â±1, correctly signed Â±1.0 should be returned.	__label__ReturnValueDirective
 If a superinterface is a parameterized type, the Type object returned for it must accurately reflect the actual type parameters used in the source code.	__label__ReturnValueDirective
 It must be unique for each certificate issued by a given CA (i.e., the issuer name and serial number identify a unique certificate).	__label__ReturnValueDirective
 The key must have been associated with the alias by a call to setKeyEntry, or by a call to setEntry with a PrivateKeyEntry or SecretKeyEntry.	__label__ReturnValueDirective
 Subclasses should always return actions in what they consider to be their canonical form.	__label__ReturnValueDirective
 If this collection makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order.	__label__ReturnValueDirective
 The first element of each pair is the key, which must be a String, and the second element is the value associated with that key.	__label__ReturnValueDirective
 Note that once the exact result of ex - 1 is within 1/2 ulp of the limit value -1, -1.0 should be returned.	__label__ReturnValueDirective
 The returned information control creator must create information controls that implement {@link IInformationControlExtension3} and {@link IInformationControlExtension2}, and whose {@link IInformationControlExtension2#setInput(Object)} accepts all inputs that are also supported by this information control.	__label__ReturnValueDirective
 It is the responsibility of the implementor to fully format the message before returning it.	__label__ReturnValueDirective
 The list returned by this method must have at least one String.	__label__ReturnValueDirective
 If this set makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order.	__label__ReturnValueDirective
 A return value of 0 indicates that needsInput() should be called in order to determine if more input data is required.	__label__ReturnValueDirective
 @return the array this iterator iterates over, or null if the no-arg constructor was used and {@link #setArray(Object)} has never been called with a valid array.	__label__ReturnValueDirective
 In other words, this method must allocate a new array	__label__ReturnValueDirective
 @return true if this call changed the collection	__label__ReturnValueDirective
 Even under these circumstances it is generally better to simply ignore the invocation and return, rather than throwing an exception.	__label__ReturnValueDirective
 Returns the greatest key strictly less than the given key, or { null} if there is no such key.	__label__ReturnValueDirective
 This field should not be referenced by subclasses.	__label__MethodCallVisibilityDirective
 Applications are discouraged from calling this method since this operation may not be supported by all policy implementations.	__label__MethodCallVisibilityDirective
 Denigrated, use {@linkplain #getSubject()} or {@linkplain #getSubjectAsBytes()} instead. This method should not be relied on as it can fail to match some certificates because of a loss of encoding information in the RFC 2253 String form of some distinguished names.	__label__MethodCallVisibilityDirective
 Constructor only used in deserialization, do not use otherwise.	__label__MethodCallVisibilityDirective
 Constructor only used in deserialization, do not use otherwise.	__label__MethodCallVisibilityDirective
 This method is internal to the framework; subclassers should not call this method.	__label__MethodCallVisibilityDirective
 As of 3.4, you should only call this method if you want to override the {@link JFacePreferences#CONTENT_ASSIST_FOREGROUND_COLOR}.	__label__MethodCallVisibilityDirective
 Users of SWT.VIRTUAL should also avoid using getItems() from the Table within the TreeViewer as this does not necessarily generate a callback for the TreeViewer to populate the items. It also has the side effect of creating all of the items thereby eliminating the performance improvements of SWT.VIRTUAL.	__label__MethodCallVisibilityDirective
 Note, the keeper must not call releaseWidgetToken(IWidgetTokenKeeper) explicitly.	__label__MethodCallVisibilityDirective
 It should never be accessed by application code.	__label__MethodCallVisibilityDirective
 @noinstantiate This class is not intended to be instantiated by clients.	__label__MethodCallVisibilityDirective
 This class is for Preferences implementers only. Normal users of the Preferences facility should have no need to consult this documentation.	__label__MethodCallVisibilityDirective
 For sequential access data (such as a linked list), {@link AbstractSequentialList} should be used in preference to this class.	__label__MethodCallVisibilityDirective
 Therefore, it would be wrong to write a program that depended on this exception for its correctness: the fail-fast behavior of iterators should be used only to detect bugs.	__label__MethodCallVisibilityDirective
 This class may be instantiated;	__label__MethodCallVisibilityDirective
 {@link CoolBarManager}, which clients may instantiate or subclass.	__label__MethodCallVisibilityDirective
 This class may be instantiated;	__label__MethodCallVisibilityDirective
 This concrete dialog class can be instantiated as is	__label__MethodCallVisibilityDirective
 This class may be instantiated;	__label__MethodCallVisibilityDirective
 This class may be instantiated;	__label__MethodCallVisibilityDirective
 Clients may call this framework method	__label__MethodCallVisibilityDirective
 @exception ZipException if a ZIP format error has occurred	__label__ExceptionRaisingDirective
 @throws ConcurrentModificationException If the list's modification count isn't the value that was expected.	__label__ExceptionRaisingDirective
 @throws SecurityException If a security manager exists and its checkPermission method doesn't allow access to the system class loader. @throws IllegalStateException If invoked recursively during the construction of the class loader specified by the "java.system.class.loader" property. @throws Error If the system property "java.system.class.loader" is defined but the named class could not be loaded, the provider class does not define the required constructor, or an exception is thrown by that constructor when it is invoked. The underlying cause of the error can be retrieved via the {@link Throwable#getCause()} method.	__label__ExceptionRaisingDirective
 @throws SecurityException If a required system property value cannot be accessed. @see java.io.File#isAbsolute()	__label__ExceptionRaisingDirective
 @throws IOException if I/O errors occur while writing to the underlying stream	__label__ExceptionRaisingDirective
 @throws IllegalFormatException If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification. @throws FormatterClosedException If this formatter has been closed by invoking its {@link #close()} method	__label__ExceptionRaisingDirective
 @exception IOException If the stream has not been marked, or if the mark has been invalidated, or if the stream does not support reset(), or if some other I/O error occurs	__label__ExceptionRaisingDirective
 @exception SecurityException If a security manager, s, is present and any of the following conditions is met:      invocation of {@link SecurityManager#checkMemberAccess s.checkMemberAccess(this, Member.PUBLIC)} denies access to the fields within this class     the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the package of this class	__label__ExceptionRaisingDirective
 This constructor also must throw an IllegalArgumentException if it does not understand the Policy.Parameters input.	__label__ExceptionRaisingDirective
 @throws IllegalMonitorStateException if acquiring would place this synchronizer in an illegal state. This exception must be thrown in a consistent fashion for synchronization to work correctly.	__label__ExceptionRaisingDirective
 @throws org.eclipse.swt.SWTException in these cases:      * {@link org.eclipse.swt.SWT#ERROR_WIDGET_DISPOSED} - if the receiver has been disposed     * {@link org.eclipse.swt.SWT#ERROR_THREAD_INVALID_ACCESS} - if not called from the thread that created the receiver	__label__ExceptionRaisingDirective
 Any attempts to modify the children of this node through the Iterator's remove method must throw an UnsupportedOperationException.	__label__ExceptionRaisingDirective
 This iterator does not support modification of its backing collection, and so will always throw an {@link UnsupportedOperationException} when this method is invoked.	__label__ExceptionRaisingDirective
 @throws IllegalStateException if the element cannot be added at this time due to capacity restrictions @throws ClassCastException if the class of the specified element prevents it from being added to this queue @throws NullPointerException if the specified element is null @throws IllegalArgumentException if some property of the specified element prevents it from being added to this queue	__label__ExceptionRaisingDirective
 A URL must be absolute, that is, it must always specify a scheme	__label__MiscellaneousMethodCallDirective
 The list must be sorted into ascending order according to the {@linkplain Comparable natural ordering} of its elements (as by the {@link #sort(List)} method) prior to making this call.	__label__MiscellaneousMethodCallDirective
 Gets a Transformer that invokes a method on the input object. The method must have no parameters.	__label__MiscellaneousMethodCallDirective
 @param p the proxy through which the connection will be made. If direct connection is desired, Proxy.NO_PROXY should be specified	__label__MiscellaneousMethodCallDirective
 The map must not be null and should be empty or only contain valid keys.	__label__MiscellaneousMethodCallDirective
 The map must be empty and non-null.	__label__MiscellaneousMethodCallDirective
 @param info a list of arbitrary string tag/value pairs as connection arguments; normally at least a "user" and "password" property should be included	__label__MiscellaneousMethodCallDirective
 To instantiate a PKIXBuilderParameters object, an application must specify one or more most-trusted CAs as defined by the PKIX certification path validation algorithm.	__label__MiscellaneousMethodCallDirective
 @param table a table name; must match the table name as it is stored in the database	__label__MiscellaneousMethodCallDirective
 @param table a table name; must match the table name as it is stored in the database	__label__MiscellaneousMethodCallDirective
 @param caller the principal invoking this method. It must be an owner of this ACL.	__label__MiscellaneousMethodCallDirective
 Fixed-delay execution is appropriate for recurring activities that require "smoothness." In other words, it is appropriate for activities where it is more important to keep the frequency accurate in the short run than in the lon	__label__MiscellaneousMethodCallDirective
 @param originalDevice must be the same Device that was passed into the font's constructor when it was first created.	__label__MiscellaneousMethodCallDirective
 Clients must not implement this interface and must not extend.	__label__ExtensibleClassIdentificationDirective
 it is not intended to be subclassed outside the framework.	__label__ExtensibleClassIdentificationDirective
 @noextend This class is not intended to be subclassed by clients.	__label__ExtensibleClassIdentificationDirective
 Clients may instantiate and extend this class.	__label__ExtensibleClassIdentificationDirective
 This class provides some overridable methods to allow clients to manually control the popup.	__label__ExtensibleClassIdentificationDirective
 There are two ways to create a new thread of execution. One is to declare a class to be a subclass of Thread. This subclass should override the run method of class Thread.	__label__ExtensibleClassIdentificationDirective
 The interface can be implemented by clients.	__label__ExtensibleClassIdentificationDirective
 This interface must be implemented by clients.	__label__ExtensibleClassIdentificationDirective
 Clients may implement this interface.	__label__ExtensibleClassIdentificationDirective
 This interface can be implemented by clients.	__label__ExtensibleClassIdentificationDirective
 Clients usually implement this interface and its extension interfaces.	__label__ExtensibleClassIdentificationDirective
 Clients may implement this interface.	__label__ExtensibleClassIdentificationDirective
 An abstract implementation of a hash-based map which provides numerous points for subclasses to override.	__label__ExtensibleClassIdentificationDirective
 Subclasses may extend.	__label__MethodOverridingDirective
 Subclasses may extend.	__label__MethodOverridingDirective
 Subclasses may extend this method	__label__MethodOverridingDirective
 Subclasses may reimplement or extend.	__label__MethodOverridingDirective
 Subclasses must implement the createContents framework method to supply the page's main control.	__label__MethodOverridingDirective
 getShellListener- extend or reimplement to receive shell events	__label__MethodOverridingDirective
 Subclasses may replace or extend.	__label__MethodOverridingDirective
 extend addPages	__label__MethodOverridingDirective
 Subclasses may reimplement.	__label__MethodOverridingDirective
 Subclasses may reimplement this method.	__label__MethodOverridingDirective
 Subclasses should reimplement.	__label__MethodOverridingDirective
 Subclasses may reimplement this method to provide non-trivial categorization.	__label__MethodOverridingDirective
 the iterator returned by entrySet().iterator() must additionally implement its remove method.	__label__MethodOverridingDirective
 Subclasses should override this method if they need information from the triggering event, or override run() if not.	__label__MethodOverridingDirective
 Subclasses may override.	__label__MethodOverridingDirective
 Subclasses may override.	__label__MethodOverridingDirective
 Subclasses may override this method.	__label__MethodOverridingDirective
 Subclasses should override this method when they wish to persist the bounds of the dialog.	__label__MethodOverridingDirective
 Subclasses should override this method to specific state checks.	__label__MethodOverridingDirective
 Subclasses may override but must call super.doFillIntoGrid.	__label__MethodOverridingDirective
 Subclasses must implement this method to provide a corresponding new string for the text field.	__label__MethodOverridingDirective
 Subclasses must implement this method to adjust the horizontal span of controls so they appear correct in the given number of columns.	__label__MethodOverridingDirective
 Subclasses must implement this method to properly initialize the field editor.	__label__MethodOverridingDirective
 Subclasses must implement the getSize and fill methods.	__label__MethodOverridingDirective
 May be extended by subclasses.	__label__MethodOverridingDirective
 May be extended by subclasses.	__label__MethodOverridingDirective
 An implementation of this interface should implement {@link Object#equals} to return true when passed an instance that represents the same (functionally equivalent) server socket factory, and false otherwise (and it should also implement {@link Object#hashCode} consistently with its Object.equals implementation).	__label__MethodOverridingDirective
 This method should be overridden by subclasses.	__label__MethodOverridingDirective
 Subclasses may override this method to customize the tool bar manager.	__label__MethodOverridingDirective
 Subclasses may override to clean up requested system resources	__label__MethodOverridingDirective
 This framework method must be implemented by concrete subclasses.	__label__MethodOverridingDirective
 Implementators of {@link ColumnViewer} should overwrite this method if their widget supports reordered columns	__label__MethodOverridingDirective
 An important method that must be implemented by each subclass is the implies method to compare Permissions.	__label__MethodOverridingDirective
 Subclasses which handle different rounding modes should override this method.	__label__MethodOverridingDirective
 This method should be overridden if a refresh operation is supported by the policy implementation.	__label__MethodOverridingDirective
 Subclasses should override this method with a correct implementation.	__label__MethodOverridingDirective
 Subclasses should override this method with a correct implementation.	__label__MethodOverridingDirective
 Subclasses must implement this method to provide drop behavior.	__label__MethodOverridingDirective
 To be implemented by subclasses.	__label__MethodOverridingDirective
 Subclasses should override.	__label__MethodOverridingDirective
 Subclasses may override	__label__MethodOverridingDirective
 Subclasses must implement this method.	__label__MethodOverridingDirective
 Subclasses may override.	__label__MethodOverridingDirective
 Class loader implementations should override this method to specify where to find resources.	__label__MethodOverridingDirective
 lass loader implementations should override this method to specify where to load resources from.	__label__MethodOverridingDirective
 This method merely returns its input argument, and should be overridden if a different behavior is desired.	__label__MethodOverridingDirective
 To implement a modifiable list, the programmer must additionally override the {@link #set(int, Object) set(int, E)} method (which otherwise throws an { UnsupportedOperationException}).	__label__MethodOverridingDirective
 Subclasses may override if they have a specific field that must be present on read before this implementation will work.	__label__MethodOverridingDirective
 Subclasses may override if the subclass has a specific field that must be present before put() or calculateThreshold() will work correctly.	__label__MethodOverridingDirective
 Subclasses can override this to return iterators with different properties.	__label__MethodOverridingDirective
 This method can be overridden to perform your own processing instead of using the factory.	__label__MethodOverridingDirective
 Subclassers should call setShellStyle to change this value, rather than overriding this method.	__label__MethodOverridingDirective
 @nooverride This method is not intended to be re-implemented or extended by clients.	__label__MethodOverridingDirective
 Clients should not override it.	__label__MethodOverridingDirective
 Subclasses must call super.itemRemoved	__label__MethodExtensionDirective
 Subclasses should call the super implementation	__label__MethodExtensionDirective
 Applications that override this method need not call super.paint(g)	__label__MethodExtensionDirective
 super.updateSelection must be invoked.	__label__MethodExtensionDirective
 isPageComplete - may be extended	__label__MethodExtensionDirective
 If you override this method, then you should make a call to super.checkConnect at the point the overridden method would normally throw an exception.	__label__MethodExtensionDirective
 Subclasses may extend but must call the super implementation.	__label__MethodExtensionDirective
 Subclasses may call super as in the following example:	__label__MethodExtensionDirective
 All subclasses must call this method when their control is first established.	__label__CallContractSubclassingDirective
 Subclasses may call the following methods to configure the wizard:      * addPage     * setHelpAvailable     * setDefaultPageImageDescriptor     * setDialogSettings     * setNeedsProgressMonitor     * setTitleBarColor     * setWindowTitle	__label__CallContractSubclassingDirective
 Subclasses that support fields should override this and create an AttributedCharacterIterator with meaningful attributes.	__label__CallContractSubclassingDirective
 Subclasses MUST use try ...finally as follows to ensure that the busy flag is reset to its original value:   boolean oldBusy = isBusy();  setBusy(true);  try {   // do work  } finally {   setBusy(oldBusy);  }	__label__CallContractSubclassingDirective
 This method should be called by implementers of ILazyTreeContentProvider to populate this viewer.	__label__CallContractSubclassingDirective
 If the ThreadGroup object has no special requirements for dealing with the exception, it can forward the invocation to the {@linkplain #getDefaultUncaughtExceptionHandler default uncaught exception handler}.	__label__CallContractSubclassingDirective
 When processing logging output, if a Handler encounters problems then rather than throwing an Exception back to the issuer of the logging call (who is unlikely to be interested) the Handler should call its associated ErrorManager.	__label__CallContractSubclassingDirective
 If the scale is reduced by the operation, the unscaled value must be divided (rather than multiplied), and the value may be changed; in this case, the specified rounding mode is applied to the division.	__label__MethodImplementationDirective
 In other words, this method must allocate a new array	__label__MethodImplementationDirective
 The general contract for the Object.equals method states that equals must be symmetric (in other words, a.equals(b) if and only if b.equals(a)).	__label__MethodImplementationDirective
 BasicPermission objects must be stored in a manner that allows them to be inserted in any order,	__label__MethodImplementationDirective
 Creating a type variable must not cause the creation of its bounds. Repeated creation of a type variable has no effect.	__label__MethodImplementationDirective
 When a subclass is replacing objects it must insure that either a complementary substitution must be made during deserialization or that the substituted object is compatible with every field where the reference will be stored.	__label__MethodImplementationDirective
 A Key should use KeyRep as its serialized representation.	__label__MethodImplementationDirective
 The hashCode method of the returned set returns the sum of the identity hashcodes of the elements in the set, rather than the sum of their hashcodes. This is mandated by the change in the semantics of the equals method, in order to enforce the general contract of the Object.hashCode method among sets returned by this method.	__label__MethodImplementationDirective
 This method simply informs the group's monitor that the object is inactive. It is up to the concrete subclass of ActivationGroup to fulfill the additional requirement of unexporting the object.	__label__MethodImplementationDirective
 The byte array will be in big-endian byte-order: the most significant byte is in the zeroth element. The array will contain the minimum number of bytes required to represent this BigInteger, including at least one sign bit, which is { (ceil((this.bitLength() + 1)/8))}.	__label__MethodImplementationDirective
 Implementations may, but are not required to, throw this exception if fromElement or toElement cannot be compared to elements currently in the set	__label__MethodImplementationDirective
 Implementations may, but are not required to, throw this exception if { toKey} cannot be compared to keys currently in the map.	__label__MethodImplementationDirective
 If the protocol of this URL is "jar", then the permission granted is based on the permission that is required by the URL of the Jar file.	__label__MethodImplementationDirective
 If no such object exists, the map should be "wrapped" using the {@link Collections#synchronizedMap Collections.synchronizedMap} method.	__label__MethodImplementationDirective
 This test must be fast and optimistic i.e. it is OK to return true even though there might be no quick fix.	__label__MethodImplementationDirective
 If the security property is not set, the provider is assumed to have alternative means for obtaining authentication information.	__label__MethodImplementationDirective
 If you reimplement this method, you should also reimplement updateContents.	__label__Non-localConsistencySubclassingDirective
 An implementation of this interface should implement {@link Object#equals} to return true when passed an instance that represents the same (functionally equivalent) server socket factory, and false otherwise (and it should also implement {@link Object#hashCode} consistently with its Object.equals implementation).	__label__Non-localConsistencySubclassingDirective
 The general contract for write(b) is that it should have exactly the same effect as the call write(b, 0, b.length).	__label__Non-localConsistencySubclassingDirective
 The natural ordering for a class C is said to be consistent with equals if and only if e1.compareTo(e2) == 0 has the same boolean value as e1.equals(e2) for every e1 and e2 of class C.	__label__Non-localConsistencySubclassingDirective
 The visibility of the details button is controlled by {@link #shouldShowDetailsButton()}, which should also be overridden together with this method.	__label__Non-localConsistencySubclassingDirective
 Implementors of {@link ColumnViewer} have to provide a concrete implementation for the underlying widget	__label__Non-localConsistencySubclassingDirective
 An implementation of this interface must define a compareTo method that provides an ordering consistent with its getDelay method	__label__Non-localConsistencySubclassingDirective
 Note that the ordering maintained by a sorted map (whether or not an explicit comparator is provided) must be consistent with equals if this sorted map is to correctly implement the Map interface.	__label__Non-localConsistencySubclassingDirective
 This API is only valid if the information control implements {@link org.eclipse.jface.text.IInformationControlExtension3}. Not following this restriction will later result in an {@link UnsupportedOperationException}	__label__Non-localConsistencySubclassingDirective
 A character may start a Unicode identifier if and only if one of the following conditions is true:      {@link #isLetter(int) isLetter(codePoint)} returns true     {@link #getType(int) getType(codePoint)} returns LETTER_NUMBER.	__label__Non-localConsistencySubclassingDirective
 If you reimplement this method, you should also reimplement createContents.	__label__MiscellaneousSubclassingDirective
 The resolveClass method in the corresponding subclass of ObjectInputStream must read and use any data or objects written by annotateClass	__label__MiscellaneousSubclassingDirective
 When a subclass is replacing objects it must insure that either a complementary substitution must be made during deserialization or that the substituted object is compatible with every field where the reference will be stored.	__label__MiscellaneousSubclassingDirective
 ObjectInputStream subclasses which override this method can only be constructed in security contexts possessing the "enableSubclassImplementation" SerializablePermission; any attempt to instantiate such a subclass without this permission will cause a SecurityException to be thrown.	__label__MiscellaneousSubclassingDirective
 It must be {@linkplain java.io.PipedWriter#connect( java.io.PipedReader) connected} to a PipedWriter before being used.	__label__MethodCallSequenceDirective
 You must add at least one Comparator before calling the compare(Object,Object) method	__label__MethodCallSequenceDirective
 The client must also make a dirty call to renew leases on remote references before such leases expire	__label__MethodCallSequenceDirective
 A failed dirty call must schedule a strong clean call so that the call's sequence number can be retained in order to detect future calls received out of order by the distributed garbage collector	__label__MethodCallSequenceDirective
 This should be called whenever needsInput() returns true indicating that more input data is required.	__label__MethodCallSequenceDirective
 At a minimum, the recovery operation must include closing the current connection and getting a new connection.	__label__MethodCallSequenceDirective
 This method will only work when it is invoked after the control of the dialog has been set	__label__MethodCallSequenceDirective
 The option must be enabled prior to entering the blocking operation to have effect.	__label__MethodCallSequenceDirective
 applet should avoid calling methods in java.applet.Applet in the constructor.	__label__MethodCallSequenceDirective
 This method may only be called after initializeDialogUnits has been called.	__label__MethodCallSequenceDirective
 HTTP protocol implementers should make sure that this method is called after all request headers related to choosing cookies are added, and before the request is sent.	__label__MethodCallSequenceDirective
 All OUT parameters must be registered before a stored procedure is executed.	__label__MethodCallSequenceDirective
 This method must be called before any of the dialog unit based conversion methods are called.	__label__MethodCallSequenceDirective
 This method can be called once per call to next().	__label__MethodCallSequenceDirective
 Note: {@link ListIterator} implementations that support add() and remove() only allow set() to be called once per call to next() or previous (see the {@link ListIterator} javadoc for more details).	__label__MethodCallSequenceDirective
 You will normally use {@link #addIterator(Iterator)} to add some more iterators after using this constructor.	__label__MethodCallSequenceDirective
 If an activatable object requires restart services, use one of the ActivationDesc constructors that takes a boolean parameter, restart.	__label__MethodCallSequenceDirective
 As the ILazyContentProvider does not have API for determining the total item count any changes to the number of items for this object while require a call to #setItemCount on the viewer that uses it.	__label__MethodCallSequenceDirective
 Note that the dialog will have no visual representation (no widgets) until it is told to open.	__label__MethodCallSequenceDirective
 Prior to 3.0 this method can only be called once. Since 3.0 this method can be called again after a call to {@link ISourceViewerExtension2#unconfigure()}.	__label__MethodCallSequenceDirective
 Note that all preference nodes must be dispose their resources. The node must dispose the page managed by this node, and any SWT resources allocated by this node (Images, Fonts, etc). However the node itself may be reused.	__label__MethodCallSequenceDirective
 If the resource is intended to live for entire lifetime of the resource manager, a subsequent call to {@link #destroy(DeviceResourceDescriptor)} may be omitted and the resource will be cleaned up when the resource manager is disposed. This pattern is useful for short-lived {@link LocalResourceManager}s, but should never be used with the global resource manager since doing so effectively leaks the resource.	__label__MethodCallSequenceDirective
 If fork is set to false, the runnable will run in the UI thread and it is the runnable's responsibility to call Display.readAndDispatch() to ensure UI responsiveness.	__label__MethodCallSequenceDirective
 In other words, if this method were to be called twice in succession, the second call would return false (unless the current thread were interrupted again, after the first call had cleared its interrupted status and before the second call had examined it).	__label__MethodCallSequenceDirective
 This method can only be called once the connection has been completely verified by reading from the input stream until the end of the stream has been reached.	__label__MethodCallSequenceDirective
 Once the client is done with a wizard node, its disposemethod must be called to free up the wizard; once disposes, the node should no longer be used.	__label__MethodCallSequenceDirective
 It is important not to use the original set after invoking this method, as it is a backdoor for adding untransformed objects.	__label__MethodCallSequenceDirective
 It is important not to use the original bag after invoking this method, as it is a backdoor for adding invalid objects.	__label__MethodCallSequenceDirective
 Must be called before start. May again be called between start and stop.	__label__MethodCallSequenceDirective
 This method must be called before this window's shell is created.	__label__MethodCallSequenceDirective
 Note that multiple calls to formatterStarts can be issued to a strategy before launching the formatting process with format.	__label__MethodCallSequenceDirective
 Calling this method has no effect after createPartControl is called.	__label__MethodCallSequenceDirective
 In this case, these tasks will only terminate upon shutdownNow, or after setting the policy to false when already shutdown.	__label__MethodCallSequenceDirective
 The keys should be immutable If they are not then they must not be changed	__label__NonCall-basedStateDirective
 @param caller the principal invoking this method. It must be an owner of this ACL.	__label__NonCall-basedStateDirective
 @param caller the principal invoking this method. It must be an owner of this ACL.	__label__NonCall-basedStateDirective
 @throws UnsupportedOperationException if the comparator is locked	__label__NonCall-basedStateDirective
 @throws UnsupportedOperationException if no MapMutator has been specified	__label__NonCall-basedStateDirective
 After invoking this method the file or directory is guaranteed not to change until it is either deleted or marked to allow write access.	__label__NonCall-basedStateDirective
 Subclasses should override this method when an alternate default location is desired, rather than overriding {@link #getInitialLocation(Point)}	__label__AlternativeDirective
 Instead, an application should register an activation descriptor and export a remote object separately, so that exceptions can be handled properly.	__label__AlternativeDirective
 Note: this method should not be used for file-locking, as the resulting protocol cannot be made to work reliably. The {@link java.nio.channels.FileLock FileLock} facility should be used instead.	__label__AlternativeDirective
 Inheritable thread-local variables are used in preference to ordinary thread-local variables when the per-thread-attribute being maintained in the variable (e.g., User ID, Transaction ID) must be automatically transmitted to any child threads that are created.	__label__AlternativeDirective
 This interface is used only for computations that throw checked exceptions; computations that do not throw checked exceptions should use PrivilegedAction instead.	__label__AlternativeDirective
 No standard string format is defined for otherNames, X.400 names, EDI party names, IPv6 address names, or any other type of names. They should be specified using the {@link #addPathToName(int type, byte [] name) addPathToName(int type, byte [] name)} method.	__label__AlternativeDirective
 The getLogWriter and setLogWriter methods should be used instead of the get/setlogStream methods, which are deprecated.	__label__AlternativeDirective
 The {@link java.nio.charset.CharsetEncoder} class should be used when more control over the encoding process is required.	__label__AlternativeDirective
 The {@link java.nio.charset.CharsetDecoder} class should be used when more control over the decoding process is required.	__label__AlternativeDirective
 An application might use the activeGroupCount method to get an estimate of how big the array should be, however if the array is too short to hold all the thread groups, the extra thread groups are silently ignored.	__label__AlternativeDirective
 . The modifiers consist of the Java Virtual Machine's constants for public, protected, private, final, static, abstract and interface; they should be decoded using the methods of class Modifier.	__label__AlternativeDirective
 Sometimes a security check that should be made within a given context will actually need to be done from within a different context (for example, from within a worker thread). The {@link SecurityManager#getSecurityContext getSecurityContext} method and the {@link SecurityManager#checkPermission(java.security.Permission, java.lang.Object) checkPermission} method that includes a context argument are provided for this situation.	__label__AlternativeDirective
 Please use {@link org.eclipse.core.runtime.ListenerList} instead.	__label__AlternativeDirective
 Also note that the equivalent of {@link #ListenerList()} is actually {@link org.eclipse.core.runtime.ListenerList#ListenerList(int)} with {@link org.eclipse.core.runtime.ListenerList#IDENTITY} as the argument.	__label__AlternativeDirective
 Label providers for table viewers must implement either the ITableLabelProvider or the ILabelProvider interface (see TableViewer.setLabelProvider for more details).	__label__AlternativeDirective
 Label providers for table tree viewers must implement either the ITableLabelProvider or the ILabelProvider interface (see TableTreeViewer.setLabelProvider for more details).	__label__AlternativeDirective
 Note that LRUMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. The simplest approach is to wrap this map using {@link java.util.Collections#synchronizedMap(Map)}.	__label__AlternativeDirective
 slow	__label__AlternativeDirective
 WARNING: This method is binary incompatible with Commons Collections 2.1 and 2.1.1. Use new ArrayIterator(array) for compatability.	__label__AlternativeDirective
 WARNING: This constant is binary incompatible with Commons Collections 2.1 and 2.1.1. Use EmptyIterator.INSTANCE for compatability with Commons Collections 2.1.1.	__label__AlternativeDirective
 In addition, this implementation allows the type of collection used for the values to be controlled. By default, an ArrayList is used, however a Class to instantiate may be specified, or a factory that returns a Collection instance.	__label__AlternativeDirective
 The following extension interfaces exist:      {@link org.eclipse.jface.text.IUndoManagerExtension} since version 3.1 introducing access to the undo context.	__label__AlternativeDirective
 The following extension interfaces exist:      {@link org.eclipse.jface.text.source.ISourceViewerExtension} since version 2.1 introducing the concept of an annotation overview.     {@link org.eclipse.jface.text.source.ISourceViewerExtension2} since version 3.0 allowing source viewers to roll back a previously performed configuration and allows access to the viewer's visual annotation model.     {@link org.eclipse.jface.text.source.ISourceViewerExtension3} since version 3.2 introducing the concept of a quick assist assistant and providing access to the quick assist invocation context as well as the current annotation hover.     {@link org.eclipse.jface.text.source.ISourceViewerExtension4} since version 3.4 introducing API to access a minimal set of content assistant APIs.	__label__AlternativeDirective
 This method has been replaced by {@link ITextViewerExtension2#setTextHover(ITextHover, String, int)}.	__label__AlternativeDirective
 In order to load templates contributed using the org.eclipse.ui.editors.templates extension point, use a ContributionTemplateStore.	__label__AlternativeDirective
 Standard implementations of common closures are provided by {@link ClosureUtils}. These include method invokation and for/while loops.	__label__AlternativeDirective
 Images allocated in this manner must be disposed by {@link #destroyImage(ImageDescriptor)}, and never by calling {@link Image#dispose()}.	__label__AlternativeDirective
 When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream.	__label__AlternativeDirective
 Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setBinaryStream which takes a length parameter.	__label__AlternativeDirective
 Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setNCharacterStream which takes a length parameter.	__label__AlternativeDirective
 Consult your JDBC driver documentation to determine if it might be more efficient to use a version of updateBinaryStream which takes a length parameter.	__label__AlternativeDirective
 @deprecated Use {@link #allPredicate(Predicate<? super T>...)} instead	__label__AlternativeDirective
 Clients are encouraged to use the value returned from this method instead of constructing a new instance to reduce allocation and garbage collection overhead when multiple BooleanComparators may be used in the same virtual machine.	__label__AlternativeDirective
 The three forms of { park} each also support a { blocker} object parameter. This object is recorded while the thread is blocked to permit monitoring and diagnostic tools to identify the reasons that threads are blocked. (Such tools may access blockers using method {@link #getBlocker}.) The use of these forms rather than the original forms without this parameter is strongly encouraged. The normal argument to supply as a { blocker} within a lock implementation is { this}.	__label__AlternativeDirective
 {@link org.eclipse.jface.text.reconciler.IReconcilerExtension} since version 3.0 introducing the ability to be aware of documents with multiple partitionings.	__label__AlternativeDirective
 Note that this method does not clean up references between this tool bar manager and its associated contribution items. Use removeAll for that purpose.	__label__AlternativeDirective
 Note that this method does not clean up references between this menu manager and its associated contribution items. Use removeAll for that purpose.	__label__AlternativeDirective
 These methods are designed to be used as tools for creating higher-level synchronization utilities, and are not in themselves useful for most concurrency control applications.	__label__AlternativeDirective
 This method should only be called from the UI thread. If you are not on the UI thread then wrap the call with a PlatformUI.getWorkbench().getDisplay().synchExec() in order to guarantee the correct result.	__label__AlternativeDirective
 implementations must synchronized on the hierarchy lock	__label__SynchronizationDirective
 Note that this implementation is not synchronized.	__label__SynchronizationDirective
 The cursor enables iteration and list changes to occur in any order without invalidating the iterator (from one thread).	__label__SynchronizationDirective
 Iterators must be manually synchronized.   synchronized (coll) {    Iterator it = coll.iterator();    // do stuff with iterator  }    @return an iterator that must be manually synchronized on the collection	__label__SynchronizationDirective
 It is imperative that the user manually synchronize on the returned sorted set when iterating over it or any of its subSet, headSet, or tailSet views.    SortedSet s = Collections.synchronizedSortedSet(new TreeSet());       ...   synchronized(s) {       Iterator i = s.iterator(); // Must be in the synchronized block       while (i.hasNext())           foo(i.next());   }	__label__SynchronizationDirective
 All PolicyQualifierInfo objects must be immutable and thread-safe.	__label__SynchronizationDirective
 If the Collection will be modified by one thread while another thread is calling a method of a Collection CertStore that has been initialized with this Collection, the Collection must have fail-fast iterators.	__label__SynchronizationDirective
 Concurrent modifications are not directly supported, and for most collection implementations will throw a ConcurrentModificationException.	__label__SynchronizationDirective
 Note that TransformedSortedMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization.	__label__SynchronizationDirective
 If multiple threads access a linked hash set concurrently, and at least one of the threads modifies the set, it must be synchronized externally.	__label__SynchronizationDirective
 Note that this implementation is not synchronized.	__label__SynchronizationDirective
 If multiple threads access an enum set concurrently, and at least one of the threads modifies the set, it should be synchronized externally.	__label__SynchronizationDirective
 If multiple threads access an enum map concurrently, and at least one of the threads modifies the map, it should be synchronized externally.	__label__SynchronizationDirective
 All TrustAnchor objects must be immutable and thread-safe.	__label__SynchronizationDirective
 The thread stack size necessary to perform a given computation will likely vary from one JRE implementation to another. In light of this variation, careful tuning of the stack size parameter may be required, and the tuning may need to be repeated for each JRE implementation on which an application is to run.	__label__SynchronizationDirective
 The absence of block-structured locking removes the automatic release of locks that occurs with { synchronized} methods and statements. In most cases, the following idiom should be used:	__label__SynchronizationDirective
 Thread-safe implementation. Can be called from any thread.	__label__SynchronizationDirective
 If your application needs to set a different security manager, you must ensure that the policy file specified by the group's ActivationGroupDesc grants the group the necessary permissions to set a new security manager	__label__MiscellaneousDirective
 If your application requires specific properties to be set when objects are activated in the group, the application should create a special Properties object containing these properties, then create an ActivationGroupDesc with the Properties object, and use ActivationGroup.createGroup before creating any ActivationDescs (before the default ActivationGroupDesc is created).	__label__MiscellaneousDirective
 An Error is a subclass of Throwable that indicates serious problems that a reasonable application should not try to catch.	__label__MiscellaneousDirective
 The Appendable interface must be implemented by any class whose instances are intended to receive formatted output from a {@link java.util.Formatter}.	__label__MiscellaneousDirective
 To create a custom mapping, a programmer must do two things:      * create a class that implements the {@link SQLData} interface for the UDT to be custom mapped.     * make an entry in a type map that contains           o the fully-qualified SQL type name of the UDT           o the Class object for the class implementing SQLData	__label__MiscellaneousDirective
 Each class that implements PrivilegedExceptionAction should document what (if anything) this value represents.	__label__MiscellaneousDirective
 As in the one argument version, interrupts and spurious wakeups are possible, and this method should always be used in a loop:       synchronized (obj) {          while (<condition does not hold>)              obj.wait();          ... // Perform action appropriate to condition      }	__label__MiscellaneousDirective
 An implementation should document when this is the case.	__label__MiscellaneousDirective
 For some memory pools, for example, when objects are not packed contiguously, this method may be an expensive operation that requires some computation to determine the current memory usage. An implementation should document when this is the case.	__label__MiscellaneousDirective
 Environment variables should be used when a global effect is desired, or when an external system interface requires an environment variable (such as PATH).	__label__MiscellaneousDirective
 When a client application is designed to remotely access MXBeans for a running virtual machine whose version is different than the version on which the application is running, it should prepare to catch {@link java.io.InvalidObjectException InvalidObjectException} which is thrown when an MXBean proxy receives a name of an enum constant which is missing in the enum class loaded in the client application.	__label__MiscellaneousDirective
 If they are not then they must not be changed after adding to the MultiKey.	__label__MiscellaneousDirective
 Implementation note: This method requires a lot of time and a ton of stack space. Essentially a recursive algorithm is used to enter each bucket's monitor. If you have twenty thousand buckets in your map, then the recursive method will be invoked twenty thousand times. You have been warned.	__label__MiscellaneousDirective
 From a performance standpoint, these methods should be used with caution. In many implementations they will perform costly linear searches.	__label__MiscellaneousDirective
 The add methods are affected by this class. Thus objects must be removed or searched for using their transformed form. For example, if the transformation converts Strings to Integers, you must use the Integer form to remove objects.	__label__MiscellaneousDirective
 Code generators are encouraged to use platform-specific native libraries or microprocessor instructions, where available, to provide higher-performance implementations of Math methods. Such higher-performance implementations still must conform to the specification for Math.	__label__MiscellaneousDirective
invoked mouse exit component	__label__nonDir
inputmap parent searched binding defined inputmap	__label__nonDir
get descriptive name unit	__label__nonDir
package contains algorithm parameter specification parameter used diffie-hellman de triple de pbe rc2 rc5 algorithm	__label__nonDir
agent provides implementation interface order transform class file	__label__nonDir
class encapsulate symbolic color representing color native gui object system	__label__nonDir
constant identifying percent field	__label__nonDir
construct rowsetevent object initialized given rowset object	__label__nonDir
constant sinhala unicode character block	__label__nonDir
zlib compressed data format specification version pdf rfc deflate compressed data format specification version pdf rfc gzip file format specification version pdf rfc crc-32 checksum described rfc adler-32 checksum described rfc	__label__nonDir
implicitactivationpolicyvalue ha following semantics	__label__nonDir
package java image i/o api dealing low-level i/o file stream	__label__nonDir
provides class htmleditorkit supporting class creating html text editor	__label__nonDir
request information accessible server-side request interceptor	__label__nonDir
package specification precise list supported section official specification java tm platform standard edition orb complies see official specification corba support java se	__label__nonDir
constant f23 function key	__label__nonDir
implementation visit intersectiontype calling defaultaction	__label__nonDir
return size separator	__label__nonDir
package contains three main group class interface class iteration text class formatting parsing class string collation	__label__nonDir
null cause.tostring	__label__nonDir
cdata section used escape block text containing character would otherwise regarded markup	__label__nonDir
return stream producing given streamsize number pseudorandom long value	__label__nonDir
return list package element	__label__nonDir
provides class interface key specification algorithm parameter specification	__label__nonDir
represents relational constraint similar database query clause	__label__nonDir
helper unknownuserexception	__label__nonDir
visitor type style visitor design pattern	__label__nonDir
get scroll offset pixel	__label__nonDir
get name component	__label__nonDir
mediatype instance iso/din c3 x mm	__label__nonDir
abstract class image superclass class represent graphical image	__label__nonDir
return default locale used initialize jcomponent locale property upon creation	__label__nonDir
interface member whose purpose serve marker indicating implementing class java value type idl ha corresponding helper class	__label__nonDir
class defines service provider interface spi keystore class	__label__nonDir
allows developer provide support undo/redo application text editor	__label__nonDir
indicates right_outer_join supported joinrowset implementation	__label__nonDir
cause current thread wait signalled	__label__nonDir
server-side request interceptor	__label__nonDir
iiobytebuffer used imageinputstream supply sequence byte caller possibly fewer copy using conventional read method take user-supplied byte array	__label__nonDir
set property combobox match specified action	__label__nonDir
acquires read lock write lock held another thread within given waiting time current thread ha interrupted	__label__nonDir
drag drop direct manipulation gesture found many graphical user interface system provides mechanism transfer information two entity logically associated presentation element gui	__label__nonDir
writer attempt propagate change made cachedrowset object back data source	__label__nonDir
creates opaque srgb color specified red green blue value range	__label__nonDir
add specified mouse wheel listener receive mouse wheel event component	__label__nonDir
set designated parameter given java int value	__label__nonDir
applies given attribute character content	__label__nonDir
get instance colormodel used display component output device	__label__nonDir
please see use focus subsystem section java tutorial focus specification information	__label__nonDir
implement characteriterator.getindex string	__label__nonDir
return contextual shaper provided unicode range	__label__nonDir
store single day-of-week isolation tuesday	__label__nonDir
get property specified key default	__label__nonDir
return current orientation tool bar	__label__nonDir
holder policy	__label__nonDir
method public implementation side effect	__label__nonDir
iterates given element call scan element p one	__label__nonDir
class represents storage facility cryptographic key certificate	__label__nonDir
alias iso_c4	__label__nonDir
information helper file see generated file helper file	__label__nonDir
note case second field typecode object typecode object	__label__nonDir
prepares image rendering	__label__nonDir
holder class float used store inout parameter idl method	__label__nonDir
retrieves type map associated connection object rowset object	__label__nonDir
signal error occurred attempting bind socket local address port	__label__nonDir
return owner window	__label__nonDir
represents union type	__label__nonDir
creates componentui implementation passed component	__label__nonDir
return maximum size jfilechooser	__label__nonDir
constant f10 function key	__label__nonDir
constructor activationid take single argument activator specifies remote reference activator responsible activating object associated identifier	__label__nonDir
apis provide standard interface generated stub tie rmi-iiop runtime	__label__nonDir
class foo xmljavatypeadapter qtopadapter.class xmlelements xmlelement name type=px.class xmlelement name b type=py.class q bar xmltype abstract class p xmltype name px class px extends p xmltype name py class py extends p xml schema fragment x complextype name foo x sequence x element name bar x complextype x choice minoccurs maxoccurs unbounded x element name type px x element name b type py x choice x complextype x element x sequence x complextype	__label__nonDir
bear mind use time-zone europe/paris add considerable complexity calculation	__label__nonDir
information holder file see generated file holder file	__label__nonDir
information helper file see generated file helper file	__label__nonDir
refer awt threading issue detail awt threading model	__label__nonDir
return copy duration specified duration subtracted	__label__nonDir
management interface compilation system java virtual machine	__label__nonDir
constant tagbanwa unicode character block	__label__nonDir
package java image i/o api dealing reading writing metadata	__label__nonDir
description copied interface icon	__label__nonDir
input method software component let user enter text way simple typing keyboard	__label__nonDir
construct linebreakmeasurer specified text	__label__nonDir
class represents meta data modelmbeans	__label__nonDir
name basicpermission name given permission example exit setfactory print.queuejob etc	__label__nonDir
information holder file see generated file holder file	__label__nonDir
enumeration parameter mode parameter	__label__nonDir
detail see thread swing section java tutorial	__label__nonDir
set designated parameter reader object	__label__nonDir
get accessiblecontext associated jcombobox	__label__nonDir
information holder file see generated file holder file	__label__nonDir
constant latin extended additional unicode character block	__label__nonDir
visit intersectiontype manner defined subclass	__label__nonDir
helper unionmember	__label__nonDir
return false metallookandfeel native look feel	__label__nonDir
renderer used actual cell drawing	__label__nonDir
kerning	__label__nonDir
compare equality two collation object	__label__nonDir
also provides clipboard mechanism object temporarily hold transferable object transferred within application	__label__nonDir
constant f4 function key	__label__nonDir
constant used registerkeyboardaction mean command invoked receiving component window ha focus focused component	__label__nonDir
listener receiving preference change event	__label__nonDir
invocationhandler forward method mbean management interface mbean server mbean	__label__nonDir
holder class int used store inout parameter idl method	__label__nonDir
detail see thread swing section java tutorial	__label__nonDir
retrieves maximum number second driver wait query execute	__label__nonDir
set cell editor	__label__nonDir
skeletal visitor annotation value default behavior appropriate release_8 source version	__label__nonDir
property name contained namedvalue object name field value associated name contained object wa assigned namedvalue object value field	__label__nonDir
return set method element	__label__nonDir
org/omg/portableinterceptor/inactive.java	__label__nonDir
constant forward slash key	__label__nonDir
add one rowset object contained given array rowset object joinrowset object set match column rowset object match column given array column index	__label__nonDir
five implementation java.util.concurrent support extended blockingqueue interface defines blocking version put take linkedblockingqueue arrayblockingqueue synchronousqueue priorityblockingqueue delayqueue	__label__nonDir
return window title inactive foreground color current theme	__label__nonDir
clear selection	__label__nonDir
class used reporting locate forward exception object forward giop message back orb	__label__nonDir
exception may thrown method activity context accessed indicates attempted invocation activity context associated attempted invocation incompatible activity current state	__label__nonDir
set designated parameter reader object	__label__nonDir
return component visible rect rectangle intersection visible rectangle component ancestor	__label__nonDir
simple key-value pair used handler logging object configure	__label__nonDir
mouse exited event	__label__nonDir
return type rowset object	__label__nonDir
package containing public class used built-in bmp plug-in	__label__nonDir
example might window identifier user preference information	__label__nonDir
defines charsets decoder encoders translating byte unicode character	__label__nonDir
hgroup.addgroup layout.createparallelgroup	__label__nonDir
created stub satisfy interface	__label__nonDir
information holder file see generated file holder file	__label__nonDir
jsse wa added j2se version package wa added backward-compatibility reason	__label__nonDir
constant used registerkeyboardaction mean command invoked receiving component ancestor focused component focused component	__label__nonDir
default srgb space	__label__nonDir
subclass throwable represent error exception	__label__nonDir
package specification javatm cryptography architecture jca reference guide rfc internet x.509 public key infrastructure certificate certificate revocation list crl profile javatm cryptography architecture standard algorithm name documentation related documentation information x.509 certificate crls please see http www.ietf.org/rfc/rfc3280.txt javatm pki programmer guide x.509 certificate certificate revocation list crls	__label__nonDir
description copied class componentui	__label__nonDir
constant unified canadian aboriginal syllabics extended unicode character block	__label__nonDir
return copy anchor rectangle position size textured image	__label__nonDir
construct new component	__label__nonDir
card layout store string key-value pair used random access particular card	__label__nonDir
int constant make possible use switch statement	__label__nonDir
buffer size sufficient new char buffer allocated assigned chararraybuffer.data parameter columnindex int zero-based index target column	__label__nonDir
creates listener responsible getting property change event selection model	__label__nonDir
creates initially unselected toggle button without setting text image	__label__nonDir
description copied class basicarrowbutton	__label__nonDir
construct new roundrectangle2d initialized location size corner arc radius	__label__nonDir
provides class interface producing rendering-independent image	__label__nonDir
get character used echoing	__label__nonDir
en_us locale case mapping rule used provide case-insensitive string comparison block name validation	__label__nonDir
default editor border inset	__label__nonDir
bound property name expands selected path property	__label__nonDir
restores cachedrowset object original value value last set change	__label__nonDir
messaged visibletreenode ha collapsed	__label__nonDir
provides implementation rmiclientsocketfactory rmiserversocketfactory secure socket layer ssl transport layer security tl protocol	__label__nonDir
org/omg/cosnaming/namingcontextextpackage/invalidaddresshelper.java	__label__nonDir
invoked window ha opened	__label__nonDir
set whether window become focused window meet requirement outlined isfocusablewindow	__label__nonDir
return annotatedtype object represents use type specify superclass entity represented class object	__label__nonDir
creates new tool bar specified orientation	__label__nonDir
visit exception_parameter variable element calling defaultaction	__label__nonDir
creates return new componenthandler	__label__nonDir
contains minor code give detailed information caused exception completion status	__label__nonDir
abstract class representing collection permission object	__label__nonDir
return image get pixel data specified file whose format either gif jpeg png	__label__nonDir
return properly configured propertychangelistener update control change action occur null default property change listener control desired	__label__nonDir
construct deque initially containing element given collection added traversal order collection iterator	__label__nonDir
moreover framework allows application discard storage used image regenerate time	__label__nonDir
render graphicattribute specified location	__label__nonDir
constant shavian unicode character block	__label__nonDir
information holder file see generated file holder file	__label__nonDir
return set package element	__label__nonDir
return array hierarchy bound listener registered component	__label__nonDir
filter used provide fine grain control logged beyond control provided log level	__label__nonDir
information holder file see generated file holder file	__label__nonDir
set data model jcombobox us obtain list item	__label__nonDir
return string representation drop location	__label__nonDir
contains class interface used jcolorchooser component	__label__nonDir
class encapsulating single jpeg huffman table	__label__nonDir
applet first created applet stub attached using applet setstub method	__label__nonDir
super class menu related container	__label__nonDir
construct graphicattribute	__label__nonDir
information helper file see generated file helper file	__label__nonDir
construct simpledateformat using given pattern date format symbol	__label__nonDir
paint drop line	__label__nonDir
add specified component card layout internal table name	__label__nonDir
embedded bitmap scaling	__label__nonDir
constant katakana phonetic extension unicode character block	__label__nonDir
window deiconified event type	__label__nonDir
cancel current editing session	__label__nonDir
class providing apis corba object request broker feature	__label__nonDir
set selected state button	__label__nonDir
mediatype instance iso/din c4 x mm	__label__nonDir
list event listener component	__label__nonDir
functional interface provide target type lambda expression method reference	__label__nonDir
invoked mouse wheel rotated	__label__nonDir
set value designated parameter given object value	__label__nonDir
visit notype instance dispatching visit method specific kind pseudo-type void package none	__label__nonDir
creates new empty map initial table size accommodating specified number element without need dynamically resize	__label__nonDir
get bound component form rectangle object	__label__nonDir
package containing public class used built-in bmp plug-in	__label__nonDir
