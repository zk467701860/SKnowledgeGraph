 @param set the set to decorate, must not be null	__label__NotNullDirective
 May not be null.	__label__NotNullDirective
 @param list the list to decorate, must be empty and not null	__label__NotNullDirective
 @param lock the lock object to use, must not be null	__label__NotNullDirective
 @param list the list to decorate, must not be null	__label__NotNullDirective
 @param factory the factory to use, must not be null	__label__NotNullDirective
 @param factory the factory to use, must not be null	__label__NotNullDirective
 @throws IllegalArgumentException if list is null	__label__NotNullDirective
 @throws IllegalArgumentException if the collection is null	__label__NotNullDirective
 @throws IllegalArgumentException if set is null	__label__NotNullDirective
 @param map the map to decorate, must not be null	__label__NotNullDirective
 @throws IllegalArgumentException if map is null	__label__NotNullDirective
 @throws NullPointerException if the entry is null	__label__NotNullDirective
 @throws NullPointerException if the entry is null	__label__NotNullDirective
 @param set the set to decorate, must not be null	__label__NotNullDirective
 @throws IllegalArgumentException if set is null	__label__NotNullDirective
 @throws IllegalArgumentException if the collection is null	__label__NotNullDirective
 @param bag the bag to decorate, must not be null	__label__NotNullDirective
 @param predicate the predicate to use for validation, must not be null	__label__NotNullDirective
 @param coll the collection to iterate over, not null	__label__NotNullDirective
 @param map the map to add to, may not be null	__label__NotNullDirective
 @param coll the collection to decorate, must not be null	__label__NotNullDirective
 @param transformer the transformer to use for conversion, must not be null	__label__NotNullDirective
 @param factory the factory to use, must not be null	__label__NotNullDirective
 @param collection the collection to add to, must not be null	__label__NotNullDirective
 @param buffer the buffer to decorate, must not be null	__label__NotNullDirective
 @param transformer the transformer to use for conversion, must not be null	__label__NotNullDirective
 @param bag the bag to decorate, must not be null	__label__NotNullDirective
 @param transformer the transformer to use for conversion, must not be null	__label__NotNullDirective
 @param b the second (super?) collection, must not be null	__label__NotNullDirective
 @param buffer the buffer to predicate, must not be null	__label__NotNullDirective
 @param predicate the predicate used to evaluate new elements, must not be null	__label__NotNullDirective
 @param closure the closure the execute, not null	__label__NotNullDirective
 @throws IllegalArgumentException if either argument is null	__label__NotNullDirective
 @throws NullPointerException if the key is null	__label__NotNullDirective
 @throws IllegalArgumentException if the list is null	__label__NotNullDirective
 @throws IllegalArgumentException if the Buffer is null	__label__NotNullDirective
 @throws IllegalArgumentException if the collection is null	__label__NotNullDirective
 @param predicate the predicate for the set, must not be null	__label__NotNullDirective
 @param entry the entry to query, must not be null	__label__NotNullDirective
 @param entry the entry to query, must not be null	__label__NotNullDirective
 @param map the map to decorate, must not be null	__label__NotNullDirective
 @param map the map to decorate, must not be null	__label__NotNullDirective
 @throws NullPointerException if array is null	__label__NotNullDirective
 @throws IllegalArgumentException if the transformer or the predicate is null	__label__NotNullDirective
 @throws IllegalArgumentException if the Set or Predicate is null	__label__NotNullDirective
 @throws IllegalArgumentException if the SortedBag or Predicate is null	__label__NotNullDirective
 @throws IllegalArgumentException if the Collection is null	__label__NotNullDirective
 @throws IllegalArgumentException if the prototype is null	__label__NotNullDirective
 @throws NullPointerException if the value is null and this map does not not permit null values (optional).	__label__NotNullDirective
 @param loggerName The name of the Logger to be set. Must be non-null.	__label__NotNullDirective
 @throws NullPointerException if iterator parameter is null	__label__NotNullDirective
 Unless otherwise noted, passing a null argument to a constructor or method in this class will cause a {@link NullPointerException} to be thrown.	__label__NotNullDirective
 @throws NullPointerException if the specified element is null	__label__NotNullDirective
 @param readMethod May be null if the property is write-only	__label__NullSemanticsDirective
 null returns all types	__label__NullSemanticsDirective
 @param envp array of strings, each element of which has environment variable settings in the format name=value, or null if the subprocess should inherit the environment of the current process.	__label__NullSemanticsDirective
 @param inputIterator the iterator to get the input from, may be null	__label__NullSemanticsDirective
 @param root the root object to start iterating from, null results in an empty iterator	__label__NullSemanticsDirective
 @param keyTransformer the transformer to use for key conversion, null means no transformation	__label__NullSemanticsDirective
 may be null, in which case the suffix ".tmp" will be used	__label__NullSemanticsDirective
 @param q the queue with which the reference is to be registered, or null if registration is not required	__label__NullSemanticsDirective
 @param l event listener (can be null)	__label__NullSemanticsDirective
 @param text the text for the action; may be null.	__label__NullSemanticsDirective
 @param position must be non-negative	__label__NumberRangeDirective
 The tc must be in the range 0 <= tc <= 255 or an IllegalArgumentException will be thrown.	__label__NumberRangeDirective
 maximumIntegerDigits must be >= minimumIntegerDigits.	__label__NumberRangeDirective
 The index must be a value greater than or equal to { 0} and less than the current size of the vector.	__label__NumberRangeDirective
 @param threhsold the new collection usage threshold value in bytes. Must be non-negative.	__label__NumberRangeDirective
 This value may be negative, in which case releases must occur before any acquires will be granted.	__label__NumberRangeDirective
 This value should always be nonnegative and not larger than the length of buf.	__label__NumberRangeDirective
 If the argument is any value in the range 0x7f800001 through 0x7fffffff or in the range 0xff800001 through 0xffffffff, the result is a NaN. all NaN bit patterns, quiet or signaling, must be in the NaN range identified above.	__label__NumberRangeDirective
 The initial index of the range (from) must lie between zero and original.length, inclusive.	__label__NumberRangeDirective
 @param capacity the initial capacity for the buffer, greater than zero	__label__NumberRangeDirective
 @param keyType the type of reference to use for keys; must be {@link #HARD}, {@link #SOFT}, {@link #WEAK}	__label__NumberRangeDirective
 @param keyType the type of reference to use for keys; must be {@link #HARD}, {@link #SOFT}, {@link #WEAK}	__label__NumberRangeDirective
 @param length the number of consecutive characters to be copied; the value for length must be 0 or greater	__label__NumberRangeDirective
 @param name Permission name. Must be "control".	__label__StringFormatDirective
 The format is locale independent and digits must be taken from the Basic Latin block of the Unicode standard.	__label__StringFormatDirective
 A cookie's path must include the servlet that set the cookie, for example, /catalog, which makes the cookie visible to all directories on the server under /catalog.	__label__StringFormatDirective
 An UnquotedPattern can contain arbitrary characters except single quotes, but curly braces within it must be balanced	__label__StringFormatDirective
 Either the text-argument must already be present in the sequence, or some initial substring of the text-argument must be present. (e.g. "a < b & ae < e" is valid since "a" is present in the sequence before "ae" is reset). In this latter case, "ae" is not entered and treated as a single character; instead, "e" is sorted as if it were expanded to two characters: "a" followed by an "e". This difference appears in natural languages: in traditional Spanish "ch" is treated as though it contracts to a single character (expressed as "c < ch < d"), while in traditional German a-umlaut is treated as though it expanded to two characters (expressed as "a,A < b,B ... &ae;\u00e3&AE;\u00c3"). [\u00e3 and \u00c3 are, of course, the escape sequences for a-umlaut.] Ignorable Characters For ignorable characters, the first rule must start with a relation	__label__StringFormatDirective
 The selection criterion must be specified in one of the following two formats:	__label__StringFormatDirective
 The specified provider must be registered in the security provider list.	__label__StringFormatDirective
 @param name A name for the logger. This should be a dot-separated name and should normally be based on the package name or class name of the subsystem, such as java.net or javax.swing	__label__StringFormatDirective
 The rest of s should constitute a FloatValue as described by the lexical syntax rules: FloatValue: Signopt NaN Signopt Infinity Signopt FloatingPointLiteral Signopt HexFloatingPointLiteral SignedInteger HexFloatingPointLiteral: HexSignificand BinaryExponent FloatTypeSuffixopt HexSignificand: HexNumeral HexNumeral . 0x HexDigitsopt . HexDigits 0X HexDigitsopt . HexDigits BinaryExponent: BinaryExponentIndicator SignedInteger BinaryExponentIndicator: p P where Sign, FloatingPointLiteral, HexNumeral, HexDigits, SignedInteger and FloatTypeSuffix are as defined in the lexical structure sections of the of the Java Language Specification.	__label__StringFormatDirective
 Note that it is not sufficient to only examine the character preceding a line terminator sequence to decide if the line terminator is escaped; there must be an odd number of contiguous backslashes for the line terminator to be escaped.	__label__StringFormatDirective
 This byte array should contain the DER encoded name, as it would appear in the GeneralName structure defined in RFC 2459 and X.509. The encoded byte array should only contain the encoded value of the name, and should not include the tag associated with the name in the GeneralName structure. The ASN.1 definition of this structure appears below.	__label__StringFormatDirective
 The name is provided in string format. RFC 822, DNS, and URI names use the well-established string formats for those types (subject to the restrictions included in RFC 2459). IPv4 address names are supplied using dotted quad notation. OID address names are represented as a series of nonnegative integers separated by periods. And directory names (distinguished names) are supplied in RFC 2253 format. No standard string format is defined for otherNames, X.400 names, EDI party names, IPv6 address names, or any other type of names. They should be specified using the {@link #addPathToName(int type, byte [] name) addPathToName(int type, byte [] name)} method.	__label__StringFormatDirective
 If issuerDN is not null, it should contain a distinguished name, in RFC 2253 format.	__label__StringFormatDirective
 Any URL that ends with a '/' is assumed to refer to a directory. Otherwise, the URL is assumed to refer to a JAR file which will be downloaded and opened as needed.	__label__StringFormatDirective
 All elements inserted into the set must implement the {@link Comparable} interface.	__label__MethodParameterTypeDirective
 Furthermore, all elements in the array must be mutually comparable (that is, e1.compareTo(e2) must not throw a ClassCastException for any elements e1 and e2 in the array).	__label__MethodParameterTypeDirective
 All keys inserted into the map must be mutually comparable by the given comparator: comparator.compare(k1, k2) must not throw a ClassCastException for any keys k1 and k2 in the map	__label__MethodParameterTypeDirective
 A regular expression, specified as a string, must first be compiled into an instance of this class.	__label__MethodParameterTypeDirective
 The key must implement Comparable.	__label__MethodParameterTypeDirective
 The group's class must be a concrete subclass of ActivationGroup.	__label__MethodParameterTypeDirective
 @param the output type of the transformer - this extends O.	__label__MethodParameterTypeDirective
 The property must implement java.lang#Boolean.	__label__MethodParameterTypeDirective
 For an option that has a notion of on and off, and requires a non-boolean parameter, setting its value to anything other than Boolean(false) implicitly enables it.	__label__MethodParameterTypeDirective
 All elements in the collection must implement the Comparable interface.	__label__MethodParameterTypeDirective
 @throws ArrayStoreException if the runtime type of the specified array is not a supertype of the runtime type of every element in this queue	__label__MethodParameterTypeDirective
 The length argument must be less than or equal to buf.length	__label__MethodParameterCorrelationDirective
 The initial index of the range (from) must lie between zero and original.length, inclusive.	__label__MethodParameterCorrelationDirective
 You should always pass in the binary name of the class you are defining as well as the bytes.	__label__MethodParameterCorrelationDirective
 If subjectKeyID is not null, it should contain a single DER encoded value corresponding to the contents of the extension value (not including the object identifier, criticality setting, and encapsulating OCTET STRING) for a SubjectKeyIdentifier extension.	__label__MethodParameterCorrelationDirective
 The reader must contain the number of characters specified by length otherwise a SQLException will be generated when the PreparedStatement is executed.	__label__MethodParameterCorrelationDirective
 The inputstream must contain the number of characters specified by length otherwise a SQLException will be generated when the PreparedStatement is executed.	__label__MethodParameterCorrelationDirective
 @throws ArithmeticException if the result is inexact but the rounding mode is { UNNECESSARY}, or { mc.precision} {@literal >} 0 and the result of { this.divideToIntgralValue(divisor)} would require a precision of more than { mc.precision} digits.	__label__MethodParameterCorrelationDirective
 @exception IndexOutOfBoundsException If off is negative, len is negative, or len is greater than b.length - off	__label__MethodParameterCorrelationDirective
 The returned parameter object must be initialized via a call to init, using an appropriate parameter specification or parameter encoding.	__label__Post-CallDirective
 The keys should be immutable If they are not then they must not be changed after adding to the MultiKey.	__label__Post-CallDirective
 If uppercase letters are desired, the {@link java.lang.String#toUpperCase()} method may be called on the result:       Integer.toString(n, 16).toUpperCase()	__label__Post-CallDirective
 t is never correct to use the return value of this method to allocate a buffer intended to hold all data in this stream.	__label__Post-CallDirective
 @return All of the active bindings (Binding), not sorted in any fashion. This collection may be empty, but it is never null.	__label__ReturnValueDirective
 Clients should always assume that running the action succeeded in the absence of notification to the contrary.	__label__ReturnValueDirective
 @return the font descriptor (never null)	__label__ReturnValueDirective
 The value returned is between 0 and 61.	__label__ReturnValueDirective
 The returned control's layout data must be an instance of GridData.	__label__ReturnValueDirective
 This version string must be a sequence of positive decimal integers separated by "."'s and may have leading zeros.	__label__ReturnValueDirective
 If the Type is a parameterized type, the Type object returned must accurately reflect the actual type parameters used in the source code.	__label__ReturnValueDirective
 The certificate chain must have been associated with the alias by a call to setKeyEntry, or by a call to setEntry with a PrivateKeyEntry.	__label__ReturnValueDirective
 All X.509 certificate extensions that a PKIXCertPathChecker might possibly be able to process should be included in the set.	__label__ReturnValueDirective
 @return the predicate as the only element in an array	__label__ReturnValueDirective
 @return the predicate as the only element in an array	__label__ReturnValueDirective
 @return a new looping iterator	__label__ReturnValueDirective
 @return a new list containing the results	__label__ReturnValueDirective
 If this set makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order.	__label__ReturnValueDirective
 Note that a new OutputStream object must be returned each time this method is called	__label__ReturnValueDirective
 In dialogs implemented by JFace, this will be an IDialogPage.	__label__ReturnValueDirective
 In dialogs implemented by JFace, this will be an IDialogPage.	__label__ReturnValueDirective
 If the implementing method determines that no transformations are needed, it should return null. Otherwise, it should create a new byte[] array, copy the input classfileBuffer into it, along with all desired transformations, and return the new array.	__label__ReturnValueDirective
 The backtrace for a throwable with an initialized, non-null cause should generally include the backtrace for the cause.	__label__ReturnValueDirective
 The value 0 indicates that a bundle must be validated each time it is retrieved from the cache.	__label__ReturnValueDirective
 @return the array this iterator iterates over, or null if the no-arg constructor was used and {@link #setArray} has never been called with a valid array.	__label__ReturnValueDirective
 The array may be the internal data structure of the predicate and thus should not be altered.	__label__ReturnValueDirective
 Implementations must return a SortedBidiMap instance, usually by forwarding to inverseSortedBidiMap().	__label__ReturnValueDirective
 The method must return either a boolean or a non-null Boolean, and have no parameters.	__label__ReturnValueDirective
 In other words, this method must allocate a new array even if this list is backed by an array	__label__ReturnValueDirective
 Evaluates the rule by examining the characters available from the provided character scanner. The token returned by this rule returns true when calling isUndefined, if the text that the rule investigated does not match the rule's requirements. Otherwise, this method returns this rule's success token.	__label__ReturnValueDirective
 It is required that unequal key sequences return unequal strings.	__label__ReturnValueDirective
 @param returnValue The command's result, may be null.	__label__ReturnValueDirective
 @param toolBarManager the manager or null if toolbar is not desired	__label__ReturnValueDirective
 The returned value is of nanoseconds precision but not necessarily nanoseconds accuracy.	__label__ReturnValueDirective
 It should not be called from application code.	__label__MethodCallVisibilityDirective
 Denigrated, use {@linkplain #getIssuer()} or {@linkplain #getIssuerAsBytes()} instead. This method should not be relied on as it can fail to match some certificates because of a loss of encoding information in the RFC 2253 String form of some distinguished names.	__label__MethodCallVisibilityDirective
 Denigrated, replaced by {@linkplain #getIssuerX500Principal()}. This method returns the issuer as an implementation specific Principal object, which should not be relied upon by portable code.	__label__MethodCallVisibilityDirective
 Constructor only used in deserialization, do not use otherwise.	__label__MethodCallVisibilityDirective
 Constructor only used in deserialization, do not use otherwise.	__label__MethodCallVisibilityDirective
 Note that this class is abstract and extends from SignatureSpi for historical reasons. Application developers should only take notice of the methods defined in this Signature class; all the methods in the superclass are intended for cryptographic service providers who wish to supply their own implementations of digital signature algorithms.	__label__MethodCallVisibilityDirective
 This method is deprecated and should not be used because SQL Date values do not have a time component.	__label__MethodCallVisibilityDirective
 This method is internal to the framework; subclassers should not call this method.	__label__MethodCallVisibilityDirective
 Not intended for interactive use outside of subclasses.	__label__MethodCallVisibilityDirective
 This method is intended to be used only for debugging purposes, and the format of the returned string may vary between implementations.	__label__MethodCallVisibilityDirective
 @noinstantiate This class is not intended to be instantiated by clients.	__label__MethodCallVisibilityDirective
 @noinstantiate This class is not intended to be instantiated by clients.	__label__MethodCallVisibilityDirective
 Therefore an RMI application should use the SecurityManager class or another application-specific SecurityManager implementation instead of this class.	__label__MethodCallVisibilityDirective
 NOTE: This class is obsolete. New implementations should implement the Map interface, rather than extending this class.	__label__MethodCallVisibilityDirective
 This class is intended to be instantiated and used by clients.	__label__MethodCallVisibilityDirective
 This class may be instantiated;	__label__MethodCallVisibilityDirective
 This class may be instantiated;	__label__MethodCallVisibilityDirective
 Clients may call this framework method	__label__MethodCallVisibilityDirective
 Call this internal framework method to superimpose another image atop this composite image.	__label__MethodCallVisibilityDirective
 @exception IOException if an I/O error occurs.	__label__ExceptionRaisingDirective
 @throws EOFException If end of file is reached. @throws IOException If other I/O error has occurred.	__label__ExceptionRaisingDirective
 @throws IllegalStateException if not all the elements can be added at this time due to insertion restrictions	__label__ExceptionRaisingDirective
 @throws SecurityException If a security manager exists and its {@link java.lang.SecurityManager#checkWrite(java.lang.String)} method denies write access to the file	__label__ExceptionRaisingDirective
 The view's iterator is a "weakly consistent" iterator that will never throw {@link ConcurrentModificationException}, and guarantees to traverse elements as they existed upon construction of the iterator, and may (but is not guaranteed to) reflect any modifications subsequent to construction.	__label__ExceptionRaisingDirective
 @throws IllegalFormatException If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification.	__label__ExceptionRaisingDirective
 @throws IOException if a file error occurs	__label__ExceptionRaisingDirective
 @exception IOException if I/O errors occur @exception ClassNotFoundException If the class for an object being restored cannot be found.	__label__ExceptionRaisingDirective
 @exception IOException If an I/O error occurs	__label__ExceptionRaisingDirective
 @exception EOFException if this input stream reaches the end before reading all the bytes. @exception IOException the stream has been closed and the contained input stream does not support reading after close, or another I/O error occurs.	__label__ExceptionRaisingDirective
 @throws org.eclipse.swt.SWTException in these cases:      * {@link org.eclipse.swt.SWT#ERROR_WIDGET_DISPOSED} - if the receiver has been disposed     * {@link org.eclipse.swt.SWT#ERROR_THREAD_INVALID_ACCESS} - if not called from the thread that created the receiver	__label__ExceptionRaisingDirective
 The driver should throw an SQLException if it is the right driver to connect to the given URL but has trouble connecting to the database.	__label__ExceptionRaisingDirective
 If a collection refuses to add a particular element for any reason other than that it already contains the element, it must throw an exception (rather than returning false).	__label__ExceptionRaisingDirective
 @throws InvalidPropertiesFormatException Data on input stream does not constitute a valid XML document with the mandated document type.	__label__ExceptionRaisingDirective
 @throws IllegalArgumentException if this map itself has a restricted range, and { toKey} lies outside the bounds of the range	__label__ExceptionRaisingDirective
 Even under these circumstances it is generally better to simply ignore the invocation and return, rather than throwing an exception	__label__ExceptionRaisingDirective
 @throws NullPointerException if { fromElement} or { toElement} is null and this set does not permit null elements @throws IllegalArgumentException if { fromElement} is greater than { toElement}; or if this set itself has a restricted range, and { fromElement} or { toElement} lies outside the bounds of the range.	__label__ExceptionRaisingDirective
 Furthermore, the document must satisfy the properties DTD described above	__label__MiscellaneousMethodCallDirective
 @param schema a schema name; must match the schema name as it is stored in the database; "" retrieves those without a schema;	__label__MiscellaneousMethodCallDirective
 @param newWeekdays the new weekday strings. The array should be indexed by Calendar.SUNDAY, Calendar.MONDAY, etc.	__label__MiscellaneousMethodCallDirective
 @param newShortWeekdays the new short weekday strings. The array should be indexed by Calendar.SUNDAY, Calendar.MONDAY, etc.	__label__MiscellaneousMethodCallDirective
 The file must be encoded in UTF-8.	__label__MiscellaneousMethodCallDirective
 **** deprecated tag (Value Directive - Parameter: too vague): Which commands are valid is system-dependent, but at the very least the command must be a non-empty list of non-null strings.	__label__MiscellaneousMethodCallDirective
 The java.util.Properties argument can be used to pass arbitrary string tag/value pairs as connection arguments. Normally at least "user" and "password" properties should be included in the Properties object.	__label__MiscellaneousMethodCallDirective
 The range must be sorted (as by the {@link #sort(double[], int, int)} method) prior to making this call.	__label__MiscellaneousMethodCallDirective
 @param map the map to add, must be size 0 or 1, and the key must match	__label__MiscellaneousMethodCallDirective
 @param parentCatalog a catalog name; must match the catalog name as it is stored in the database;	__label__MiscellaneousMethodCallDirective
 The formatting should include localization.	__label__MiscellaneousMethodCallDirective
 The array must be sorted (as by the {@link #sort(byte[])} method) prior to making this call	__label__MiscellaneousMethodCallDirective
 @param tableNamePattern a table name pattern; must match the table name as it is stored in the database	__label__MiscellaneousMethodCallDirective
 @param attributeNamePattern an attribute name pattern; must match the attribute name as it is declared in the database	__label__MiscellaneousMethodCallDirective
 The value objects in a WeakHashMap are held by ordinary strong references. Thus care should be taken to ensure that value objects do not strongly refer to their own keys, either directly or indirectly, since that will prevent the keys from being discarded.	__label__MiscellaneousMethodCallDirective
 Note that this method assumes GridData for the layout data of the rightControl	__label__MiscellaneousMethodCallDirective
 Be aware of the fact that you should at least position the tool tip 1px right to your mouse cursor else click events may not get propagated properly.	__label__MiscellaneousMethodCallDirective
 The annotation hover provides the information to be displayed in a hover popup window if requested over the annotation presentation area. The annotation hover is assumed to be line oriented.	__label__MiscellaneousMethodCallDirective
 The annotation hover is assumed to be line oriented.	__label__MiscellaneousMethodCallDirective
 Clients are not permitted to extend this class.	__label__ExtensibleClassIdentificationDirective
 Clients may implement, but must not extend.	__label__ExtensibleClassIdentificationDirective
 @noextend This class is not intended to be subclassed by clients.	__label__ExtensibleClassIdentificationDirective
 @noextend This class is not intended to be subclassed by clients.	__label__ExtensibleClassIdentificationDirective
 This class is not intended to be subclassed.	__label__ExtensibleClassIdentificationDirective
 @noextend This class is not intended to be subclassed by clients.	__label__ExtensibleClassIdentificationDirective
 @noextend This class is not intended to be subclassed by clients.	__label__ExtensibleClassIdentificationDirective
 @noextend This class is not intended to be subclassed by clients.	__label__ExtensibleClassIdentificationDirective
 @noextend This class is not intended to be subclassed by clients.	__label__ExtensibleClassIdentificationDirective
 @noextend This interface is not intended to be extended by clients.	__label__ExtensibleClassIdentificationDirective
 This interface is internal to the framework; it should not be implemented outside the framework.	__label__ExtensibleClassIdentificationDirective
 A remote object implementation should implement the Unreferenced interface to receive notification when there are no more clients that reference that remote object.	__label__ExtensibleClassIdentificationDirective
 Subclasses must implement this IWizard method to perform any special finish processing for their wizard.	__label__ExtensibleClassIdentificationDirective
 Clients may implement this interface and its extension interfaces	__label__ExtensibleClassIdentificationDirective
 This interface must be implemented by clients. Implementers should be registered with a content formatter in order get involved in the formatting process.	__label__ExtensibleClassIdentificationDirective
 Clients may implement this interface.	__label__ExtensibleClassIdentificationDirective
 This interface must be implemented by clients that want to use one of their models as a reconcile step's input model.	__label__ExtensibleClassIdentificationDirective
 The interface can be implemented by clients.	__label__ExtensibleClassIdentificationDirective
 Subclasses may extend.	__label__MethodOverridingDirective
 Subclasses may extend or reimplement.	__label__MethodOverridingDirective
 Subclasses may extend or reimplement.	__label__MethodOverridingDirective
 Subclasses may extend or reimplement.	__label__MethodOverridingDirective
 Subclasses may extend or reimplement.	__label__MethodOverridingDirective
 Subclasses may extend or reimplement.	__label__MethodOverridingDirective
 Subclasses should override this method	__label__MethodOverridingDirective
 Subclasses may override.	__label__MethodOverridingDirective
 Subclasses may override.	__label__MethodOverridingDirective
 Clients may extend this method.	__label__MethodOverridingDirective
 Subclasses can override or extend.	__label__MethodOverridingDirective
 createContents- extend or reimplement to create controls before window opens	__label__MethodOverridingDirective
 Subclasses may also extend or reimplement.	__label__MethodOverridingDirective
 Applications use this class by overriding {@link #getPasswordAuthentication()} in a sub-class.	__label__MethodOverridingDirective
 canFlipToNextPage - may be extended or reimplemented	__label__MethodOverridingDirective
 dispose - may be extended to dispose additional allocated SWT resources	__label__MethodOverridingDirective
 Subclasses may override.	__label__MethodOverridingDirective
 Subclasses may override.	__label__MethodOverridingDirective
 Subclasses may override.	__label__MethodOverridingDirective
 Subclasses may override.	__label__MethodOverridingDirective
 Subclasses may override if a different control is desired for representing the title text, or if something different than the title should be displayed in location where the title text typically is shown.	__label__MethodOverridingDirective
 Subclasses may override this method.	__label__MethodOverridingDirective
 It provides framework hooks that allow subclasses to set the focus and tab order	__label__MethodOverridingDirective
 Subclasses may override if desired.	__label__MethodOverridingDirective
 Subclasses must implement the createFieldEditors method and should override createLayout if a special layout of the field editors is needed.	__label__MethodOverridingDirective
 Subclasses must implement this framework method.	__label__MethodOverridingDirective
 May be replaced or extended by subclasses.	__label__MethodOverridingDirective
 May be replaced or extended by subclasses.	__label__MethodOverridingDirective
 Subclasses may override this method.	__label__MethodOverridingDirective
 Subclasses may override this method if they need extra space on the line number ruler.	__label__MethodOverridingDirective
 Hook method to formats the given messages.  Subclasses can change this to create a different format like HTML.	__label__MethodOverridingDirective
 Subclasses may override.	__label__MethodOverridingDirective
 Subclasses must either override {@link IInformationControl#setInformation(String)} or implement {@link IInformationControlExtension2}.	__label__MethodOverridingDirective
 This method should be overridden by a subclass.	__label__MethodOverridingDirective
 Applications that want a stricter policy should override this method.	__label__MethodOverridingDirective
 . This should be overridden by a specific security manager to return the appropriate thread group.	__label__MethodOverridingDirective
 A stateful implementation must override the {@link #clone clone} method if necessary in order to allow a PKIX CertPathBuilder to efficiently backtrack and try other paths.	__label__MethodOverridingDirective
 Subclasses may override it to implement a different strategy for picking a new selection when the old selection becomes invalid.	__label__MethodOverridingDirective
 Subclasses may override.	__label__MethodOverridingDirective
 This framework method may be extended (super.close must be called).	__label__MethodOverridingDirective
 Subclasses could override to fully control adds to the map.	__label__MethodOverridingDirective
 Subclasses could override to handle changes to the map.	__label__MethodOverridingDirective
 This method must be overridden if a subclass must be setup before put() is used.	__label__MethodOverridingDirective
 however subclasses may override this.	__label__MethodOverridingDirective
 Subclasses can override this to return iterators with different properties.	__label__MethodOverridingDirective
 Subclasses should, if possible, override this with a more efficient implementation - in many cases, they can simply return getMinimum().	__label__MethodOverridingDirective
 Clients may call this framework method, but should not override it.	__label__MethodOverridingDirective
 Subclasses are not expected to override this method.	__label__MethodOverridingDirective
 This method is not intended to be overridden by subclasses.	__label__MethodOverridingDirective
 Clients should not override it.	__label__MethodOverridingDirective
 Subclasses should always call super.getBackgroundColorExclusions to aggregate the list.	__label__MethodExtensionDirective
 Subclasses must call the super implementation.	__label__MethodExtensionDirective
 If you override this, be sure to call super.	__label__MethodExtensionDirective
 Any subclass of RequiredModelMBean overloading or overriding this method should call super.postDeregister()	__label__MethodExtensionDirective
 Subclasses should extend the doComputeSize framework method to compute the size of the page's control.	__label__MethodExtensionDirective
 Subclasses should extend if extra pages need to be added before the wizard opens.	__label__MethodExtensionDirective
 if overriding in a subclass, super.getContentProvider must be invoked.	__label__MethodExtensionDirective
 setTitle - may be extended	__label__MethodExtensionDirective
 If you override this method, then you should make a call to super.checkTopLevelWindow at the point the overridden method would normally return false, and the value of super.checkTopLevelWindow should be returned.	__label__MethodExtensionDirective
 Note: To properly nest multiple overridings, subclasses should generally invoke super.beforeExecute at the end of this method.	__label__MethodExtensionDirective
 New pages should be added by calling addPage.	__label__CallContractSubclassingDirective
 Subclasses must implement this framework method to paint images within the given bounds using one or more calls to the drawImage framework method.	__label__CallContractSubclassingDirective
 Subclasses should call this method on construction.	__label__CallContractSubclassingDirective
 If you override this method, then you should make a call to super.checkLink at the point the overridden method would normally throw an exception.	__label__CallContractSubclassingDirective
 Whenever a permission is added to a heterogeneous PermissionCollection such as Permissions, and the PermissionCollection doesn't yet contain a PermissionCollection of the specified permission's type, the PermissionCollection should call the newPermissionCollection method on the permission's class to see if it requires a special PermissionCollection.	__label__CallContractSubclassingDirective
 Calls to the getAttribute and setAttribute methods must map to the get and put methods of the Bindings for the specified scope.	__label__CallContractSubclassingDirective
 Subclasses may call the noDefaultAndApplyButton framework method before the page's control has been created to suppress the standard Apply and Defaults buttons.	__label__CallContractSubclassingDirective
 FilePermission objects must be stored in a manner that allows them to be inserted into the collection in any order	__label__MethodImplementationDirective
 In other words, this method must allocate a new array	__label__MethodImplementationDirective
 In either case the implementation must ensure that the signal is redirected to another waiting thread, if there is one.	__label__MethodImplementationDirective
 SocketPermission objects must be stored in a manner that allows them to be inserted into the collection in any orde	__label__MethodImplementationDirective
 A serializable class can declare its own serialVersionUID explicitly by declaring a field named "serialVersionUID" that must be static, final, and of type long	__label__MethodImplementationDirective
 The general contract of hashCode is: * Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. * If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. * It is not required that if two objects are unequal according to the {@link java.lang.Object#equals(java.lang.Object)} method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hashtables.	__label__MethodImplementationDirective
 When a Driver class is loaded, it should create an instance of itself and register it with the DriverManager. This means that a user can load and register a driver by calling Class.forName("foo.bah.Driver")	__label__MethodImplementationDirective
 Implementations should seek to avoid creating a new object every time this method is called.	__label__MethodImplementationDirective
 A PKIXCertPathChecker implementation must support reverse checking (the ability to perform its checks when it is presented with certificates in the reverse direction) and may support forward checking (the ability to perform its checks when it is presented with certificates in the forward direction).	__label__MethodImplementationDirective
 The system class loader supports adding a JAR file to be searched if it implements a method named appendToClassPathForInstrumentation which takes a single parameter of type java.lang.String. The method is not required to have public access.	__label__MethodImplementationDirective
 The returned parameters may be the same that were used to initialize this signature, or may contain a combination of default and randomly generated parameter values used by the underlying signature implementation if this signature requires algorithm parameters but was not initialized with any.	__label__MethodImplementationDirective
 If the identity has a public key, the public key in the certificate must be the same, and if the identity does not have a public key, the identity's public key is set to be that specified in the certificate.	__label__MethodImplementationDirective
 Implementations may, but are not required to, throw this exception if fromKey or toKey cannot be compared to keys currently in the map.	__label__MethodImplementationDirective
 Implementations may, but are not required to, throw this exception if { toElement} cannot be compared to elements currently in the set.	__label__MethodImplementationDirective
 Implementations may, but are not required to, throw this exception if { fromKey} cannot be compared to keys currently in the map.	__label__MethodImplementationDirective
 all of the methods and constructors in subclasses of this class must obey the additional constraints imposed by the Set interface	__label__MethodImplementationDirective
 While Deque implementations are not strictly required to prohibit the insertion of null elements, they are strongly encouraged to do so.	__label__MethodImplementationDirective
 Subclasses can override this to implement caching (override clear as well).	__label__Non-localConsistencySubclassingDirective
 For a modifiable list the programmer should additionally implement the list iterator's set method.	__label__Non-localConsistencySubclassingDirective
 Every Preferences implementation must have an associated {@link PreferencesFactory} implementation.	__label__Non-localConsistencySubclassingDirective
 This API is only valid if the information control implements {@link IInformationControlExtension3}. Not following this restriction will later result in an {@link UnsupportedOperationException}.	__label__Non-localConsistencySubclassingDirective
 Subclasses of Objects that are not serializable can be serializable. In this case the non-serializable class must have a no-arg constructor to allow its fields to be initialized.	__label__MiscellaneousSubclassingDirective
 If you reimplement this method, you should also reimplement updateContents.	__label__MiscellaneousSubclassingDirective
 Classes that require special handling during the serialization and deserialization process must implement special methods with these exact signatures:	__label__MiscellaneousSubclassingDirective
 Subclasses who can provide this feature can open this method for the public	__label__MiscellaneousSubclassingDirective
 Subclasses do not typically override this method, but implement setSelectionToWidget(List, boolean) instead.	__label__MiscellaneousSubclassingDirective
 If this method is overridden, the method that overrides it should additionally check to see if the calling thread has the RuntimePermission("modifyThreadGroup") permission, and if so, return silently.	__label__MiscellaneousSubclassingDirective
 Should be called whenever needsInput() returns true indicating that more input data is required.	__label__MethodCallSequenceDirective
 A return value of 0 indicates that needsInput() or needsDictionary() should be called	__label__MethodCallSequenceDirective
 Should be called whenever needsInput() returns true indicating that more input data is required	__label__MethodCallSequenceDirective
 This method should be called before requesting the order of the contribution items to ensure that the order is accurate.	__label__MethodCallSequenceDirective
 This method may only be called after initializeDialogUnits has been called.	__label__MethodCallSequenceDirective
 Applications should not assume that they can change the TOS field after the connection.	__label__MethodCallSequenceDirective
 The execute method executes an SQL statement and indicates the form of the first result. You must then use the methods getResultSet or getUpdateCount to retrieve the result, and getMoreResults to move to any subsequent result(s)	__label__MethodCallSequenceDirective
 All the data in the returned stream must be read prior to getting the value of any other column.	__label__MethodCallSequenceDirective
 Retrieves the current result as a ResultSet object. This method should be called only once per result.	__label__MethodCallSequenceDirective
 Note that this method should be called only after calling a getter method; otherwise, there is no value to use in determining whether it is null or not.	__label__MethodCallSequenceDirective
 This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method.	__label__MethodCallSequenceDirective
 Should be called when inflate() returns 0 and needsDictionary() returns true indicating that a preset dictionary is required.	__label__MethodCallSequenceDirective
 @throws IllegalStateException if hasNext() has already been called.	__label__MethodCallSequenceDirective
 package names must be unique within a class loader and cannot be redefined or changed once created.	__label__MethodCallSequenceDirective
 The context must be a security context returned by a previous call to getSecurityContext.	__label__MethodCallSequenceDirective
 When a call to the next method returns false, the cursor is positioned after the last row. Any invocation of a ResultSet method which requires a current row will result in a SQLException being thrown.	__label__MethodCallSequenceDirective
 Holds the index of the last item returned by a call to next() or previous(). This is set to -1 if neither method has yet been invoked.	__label__MethodCallSequenceDirective
 Returns the index of the element that would be returned by a subsequent call to {@link #previous}.	__label__MethodCallSequenceDirective
 If the matcher is to be used in further matching operations then it should first be reset.	__label__MethodCallSequenceDirective
 As of 3.2, AbstractTreeViewer supports multiple equal elements (each with a different parent chain) in the tree. This support requires that clients enable the element map by calling setUseHashLookup(true).	__label__MethodCallSequenceDirective
 Prior to disposing, a painter should be deactivated.	__label__MethodCallSequenceDirective
 Assumes that the element has been expanded before.	__label__MethodCallSequenceDirective
 Previous values of other fields are retained. If this is not desired, call {@link #clear()} first.	__label__MethodCallSequenceDirective
 The preference node assumes (sole) responsibility for disposing of the image; this will happen when the node is disposed.	__label__MethodCallSequenceDirective
 This method must be called before this window's shell is created.	__label__MethodCallSequenceDirective
 Once the stream has been closed, further write() or flush() invocations will cause an IOException to be thrown.	__label__MethodCallSequenceDirective
 It should be set when the action is created. It should not be modified once the action is part of an action contribution item.	__label__MethodCallSequenceDirective
 Once established, a page's wizard cannot be changed to a different wizard.	__label__MethodCallSequenceDirective
 Note: It is the callers responsibility to prevent an endless loop i.e. to test whether a given anchor has already been used once.	__label__MethodCallSequenceDirective
 May only be called from a UI thread.	__label__MethodCallSequenceDirective
 Once the shell is created, it must be disposed (i.e., closed) before this method can be called.	__label__MethodCallSequenceDirective
 This method should only be called by a thread that is the owner of this object's monitor.	__label__NonCall-basedStateDirective
 IteratorChains cannot be modified once they have executed a method from the Iterator interface.	__label__NonCall-basedStateDirective
 The index must be a value greater than or equal to { 0} and less than the current size of the vector.	__label__NonCall-basedStateDirective
 Removes the given TransferDropTargetListener. Listeners should not be removed while a drag and drop operation is in progress.	__label__NonCall-basedStateDirective
 @throws IllegalArgumentException if this map itself has a restricted range, and fromKey lies outside the bounds of the range	__label__NonCall-basedStateDirective
 After this method returns, the next character to be read will have the value cbuf[0], the character after that will have the value cbuf[1], and so forth.	__label__NonCall-basedStateDirective
 The list will be empty after this call returns.	__label__NonCall-basedStateDirective
 If the object does not call Activatable.inactive when it deactivates, the object will never be garbage collected since the group keeps strong references to the objects it creates.	__label__NonCall-basedStateDirective
 applications that override this method should either call super.update(g) or incorporate the functionality described	__label__AlternativeDirective
 Subclasses of Component that override this method should either call super.update(g), or call paint(g) directly from their update method.	__label__AlternativeDirective
 Instead, an application should register an activation descriptor and export a remote object separately, so that exceptions can be handled properly.	__label__AlternativeDirective
 Instead of overwriting this method subclasses should overwrite {@link #createViewerToolTipContentArea(Event, ViewerCell, Composite)}	__label__AlternativeDirective
 Applications should solely rely on the implies method to perform policy checks.	__label__AlternativeDirective
 An application can call {@link #PKIXParameters(Set) PKIXParameters(Set)}, specifying a Set of TrustAnchor objects, each of which identify a most-trusted CA. Alternatively, an application can call {@link #PKIXParameters(KeyStore) PKIXParameters(KeyStore)}, specifying a KeyStore instance containing trusted certificate entries, each of which will be considered as a most-trusted CA.	__label__AlternativeDirective
 Denigrated, use {@linkplain #addIssuer(X500Principal)} or {@linkplain #addIssuerName(byte[])} instead. This method should not be relied on as it can fail to match some CRLs because of a loss of encoding information in the RFC 2253 String form of some distinguished names.	__label__AlternativeDirective
 Subclasses do not typically override this method, but implement setSelectionToWidget(List, boolean) instead.	__label__AlternativeDirective
 The {@link java.nio.charset.CharsetDecoder} class should be used when more control over the decoding process is required.	__label__AlternativeDirective
 This method is no longer called by the framework and clients should overwrite {@link #apply(ITextViewer, char, int, int)} instead	__label__AlternativeDirective
 Implementors must either use the dialog font or override {@link #computeSizeConstraints(int, int)}.	__label__AlternativeDirective
 User code should use the methods of class Array to manipulate arrays.	__label__AlternativeDirective
 Where the existing class file bytes are to be transformed (for example in bytecode instrumentation) {@link #retransformClasses retransformClasses} should be used.	__label__AlternativeDirective
 Since this implementation does not support add() or remove(), set() may be called as often as desired.	__label__AlternativeDirective
 Note that PredicatedSortedMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. The simplest approach is to wrap this map using {@link java.util.Collections#synchronizedSortedMap}.	__label__AlternativeDirective
 Note that TransformedMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. The simplest approach is to wrap this map using {@link java.util.Collections#synchronizedMap(Map)}.	__label__AlternativeDirective
 Note that LazySortedMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. The simplest approach is to wrap this map using {@link java.util.Collections#synchronizedSortedMap}.	__label__AlternativeDirective
 Note that HashedMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. The simplest approach is to wrap this map using {@link java.util.Collections#synchronizedMap(Map)}.	__label__AlternativeDirective
 If you know that you have an object array, the {@link org.apache.commons.collections.iterators.ObjectArrayIterator ObjectArrayIterator} class is a better choice, as it will perform better.	__label__AlternativeDirective
 The following extension interface exists:      {@link org.eclipse.jface.text.presentation.IPresentationReconcilerExtension} since version 3.0 adding support for documents with multiple partitionings.	__label__AlternativeDirective
 The following extension interfaces exist:      {@link org.eclipse.jface.text.source.IVerticalRulerInfoExtension} since version 3.0 allowing custom annotation hovers and specific annotation models.	__label__AlternativeDirective
 This selection should be used instead of null.	__label__AlternativeDirective
 These formatting strategies are required to handle the position updating of the document. To facilitate the work with these text edit based formatting strategies, a default implementation called ContextBasedFormattingStrategy is provided.	__label__AlternativeDirective
 This method should no longer be used for actions in the Eclipse workbench. IWorkbenchCommandSupport and IWorkbenchContextSupport provide all the functionality required for key bindings.	__label__AlternativeDirective
 The required FontMetrics parameter may be created in the following way: GC gc = new GC(control); gc.setFont(control.getFont()); fontMetrics = gc.getFontMetrics(); gc.dispose();	__label__AlternativeDirective
 Specifying which properties are affected may allow the viewer to optimize the update. For example, if the label provider is not affected by changes to any of these properties, an update may not actually be required.	__label__AlternativeDirective
 The default is false for backwards compatibility, but the recommended practice is to specify true, and specify the desired width for the content of the column, rather than adding a fudge factor to the specified width.	__label__AlternativeDirective
 @deprecated This type of security checking is not recommended. It is recommended that the checkPermission call be used instead.	__label__AlternativeDirective
 The results of this constructor can be somewhat unpredictable and its use is generally not recommended; see the notes under the {@link #BigDecimal(double)} constructor.	__label__AlternativeDirective
 Overloadings of this method exist to initialize an enum set with one through five elements. A sixth overloading is provided that uses the varargs feature. This overloading may be used to create an enum set initially containing an arbitrary number of elements, but is likely to run slower than the overloadings that do not use varargs.	__label__AlternativeDirective
 Note that this method is not used when drawing annotations on the editor's text widget. This is handled trough a {@link org.eclipse.jface.text.source.AnnotationPainter.IDrawingStrategy}.	__label__AlternativeDirective
 Developers are encouraged to use the comparator returned from this method instead of constructing a new instance to reduce allocation and GC overhead when multiple comparable comparators may be used in the same VM.	__label__AlternativeDirective
 The statement       boolean b = Pattern.matches("a*b", "aaaaab");  is equivalent to the three statements above, though for repeated matches it is less efficient since it does not allow the compiled pattern to be reused.	__label__AlternativeDirective
 Since 3.3, an alternative API is available, see {@link ViewerColumn#setEditingSupport(EditingSupport)} for a more flexible way of editing values in a column viewer.	__label__AlternativeDirective
 The following extension interfaces exist:      {@link org.eclipse.jface.text.source.IAnnotationAccessExtension} since version 3.0 replacing all methods in that interface     {@link IAnnotationAccessExtension2} since version 3.2 allowing to set a quick assist assistant to an annotation access.	__label__AlternativeDirective
 CollationKeys provide better performance than Collator.compare when Strings are involved in multiple comparisons.	__label__AlternativeDirective
 For efficiency, a character-stream object may use an object other than itself to protect critical sections.	__label__AlternativeDirective
 Once a remote object is registered (bound) with the RMI registry on the local host, callers on a remote (or local) host can lookup the remote object by name, obtain its reference, and then invoke remote methods on the object. A registry may be shared by all servers running on a host or an individual server process may create and use its own registry if desired (see java.rmi.registry.LocateRegistry.createRegistry method for details).	__label__AlternativeDirective
 Because databases may use an optimized representation for the XML, accessing the value through getSource() and setResult() can lead to improved processing performance without serializing to a stream representation and parsing the XML.	__label__AlternativeDirective
 Each thread must re-acquire the lock before it can return from { await}.	__label__SynchronizationDirective
 In all cases, before this method can return the current thread must re-acquire the lock associated with this condition.	__label__SynchronizationDirective
 If multiple threads access a format concurrently, it must be synchronized externally.	__label__SynchronizationDirective
 Note that this implementation is not synchronized.	__label__SynchronizationDirective
 Note that this implementation is not synchronized.	__label__SynchronizationDirective
 You must manually synchronize on the returned buffer's iterator to avoid non-deterministic behavior:   Set s = SetUtils.synchronizedSet(mySet);  synchronized (s) {      Iterator i = s.iterator();      while (i.hasNext()) {          process (i.next());      }  }	__label__SynchronizationDirective
 It is imperative that the user manually synchronize on the returned set when iterating over it:    Set s = Collections.synchronizedSet(new HashSet());       ...   synchronized(s) {       Iterator i = s.iterator(); // Must be in the synchronized block       while (i.hasNext())           foo(i.next());   }	__label__SynchronizationDirective
 It is imperative that the user manually synchronize on the returned list when iterating over it:    List list = Collections.synchronizedList(new ArrayList());       ...   synchronized(list) {       Iterator i = list.iterator(); // Must be in synchronized block       while (i.hasNext())           foo(i.next());   }	__label__SynchronizationDirective
 Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize.	__label__SynchronizationDirective
 Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize.	__label__SynchronizationDirective
 Note that ReferenceMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization.	__label__SynchronizationDirective
 Note that this method should not synchronize the preferences in any subnodes of this node.	__label__SynchronizationDirective
 Appendables are not necessarily safe for multithreaded access. Thread safety is the responsibility of classes that extend and implement this interface.	__label__SynchronizationDirective
 Due to the multi-threaded nature of class loading, it is possible for a transformer to receive calls after it has been removed. Transformers should be written defensively to expect this situation.	__label__SynchronizationDirective
 All { Lock} implementations must enforce the same memory synchronization semantics as provided by the built-in monitor lock, as described in The Java Language Specification, Third Edition (17.4 Memory Model)	__label__SynchronizationDirective
 The model is allowed to send back notifications to its listeners in any thread, and the listeners must not assume that the notifications will arrive in the UI thread.	__label__SynchronizationDirective
 DataInputStream is not necessarily safe for multithreaded access.	__label__SynchronizationDirective
 Security note: If an application needs to read a password or other secure data, it should use {@link #readPassword()} or {@link #readPassword(String, Object...)} and manually zero the returned character array after processing to minimize the lifetime of sensitive data in memory.	__label__MiscellaneousDirective
 Additional columns beyond the columns defined to be returned by the ResultSet object for a given method can be defined by the JDBC driver vendor and must be accessed by their column label.	__label__MiscellaneousDirective
 This constructor is used for serialization only and should not be used by subclasses.	__label__MiscellaneousDirective
 This is important because classes should not be subclassed unless the programmer intends on modifying or enhancing the fundamental behavior of the class.	__label__MiscellaneousDirective
 f it is critical to obtain every active subgroup in this thread group, the caller should verify that the returned int value is strictly less than the length of list.	__label__MiscellaneousDirective
 An application remotely accesses the platform MXBeans using proxy should prepare to catch IOException as if accessing with the MBeanServerConnector interface.	__label__MiscellaneousDirective
 Under many circumstances, linking Iterators together in this manner is more efficient (and convenient) than using nested for loops to extract a list.	__label__MiscellaneousDirective
 If an implementation provides such specialized semantics then the implementation must document those semantics.	__label__MiscellaneousDirective
 Typically, an exception will be thrown (such as {@link IllegalMonitorStateException}) and the implementation must document that fact.	__label__MiscellaneousDirective
 Although this can be used to reset iteration, the {@link #reset()} method is a more effective choice.	__label__MiscellaneousDirective
 An implementation should document when this is the case.	__label__MiscellaneousDirective
 Collection classes should clearly specify in their documentation any restrictions on what elements may be added.	__label__MiscellaneousDirective
 The add methods are affected by this class. Thus objects must be removed or searched for using their transformed form. For example, if the transformation converts Strings to Integers, you must use the Integer form to remove objects.	__label__MiscellaneousDirective
 The add methods are affected by this class. Thus objects must be removed or searched for using their transformed form. For example, if the transformation converts Strings to Integers, you must use the Integer form to remove objects.	__label__MiscellaneousDirective
 Beware that, unlike in most collections, this method is NOT a constant-time operation. Because of the asynchronous nature of these sets, determining the current number of elements requires traversing them all to count the	__label__MiscellaneousDirective
 When a TCP connection is closed the connection may remain in a timeout state for a period of time after the connection is closed (typically known as the TIME_WAIT state or 2MSL wait state). For applications using a well known socket address or port it may not be possible to bind a socket to the required SocketAddress if there is a connection in the timeout state involving the socket address or	__label__MiscellaneousDirective
constant vedic extension unicode character block	__label__nonDir
return y-component advance glyph	__label__nonDir
cause current thread wait signalled interrupted specified waiting time elapses	__label__nonDir
obtain value specific attribute dynamic mbean	__label__nonDir
find color system property	__label__nonDir
provides user interface object combine two look feel	__label__nonDir
manifest class used maintain manifest entry name associated attribute	__label__nonDir
indicates field defining constant value may referenced native code	__label__nonDir
creates copy simpledateformat	__label__nonDir
get fontmetrics specified font	__label__nonDir
contains class creating user interface painting graphic image	__label__nonDir
enables combo box item selected	__label__nonDir
org/omg/iop/servicecontextholder.java	__label__nonDir
constant tai le unicode character block	__label__nonDir
creates new serializablepermission object specified name	__label__nonDir
information helper file see generated file helper file	__label__nonDir
color green	__label__nonDir
get current millisecond instant clock	__label__nonDir
holder class serviceinformation object used store inout parameter idl method	__label__nonDir
single strikethrough	__label__nonDir
return array object currently registered foolisteners upon window	__label__nonDir
constant nko unicode character block	__label__nonDir
constant f8 function key	__label__nonDir
static method jmx api	__label__nonDir
return iterator element queue proper sequence	__label__nonDir
see section meaning minor code see minor code exception	__label__nonDir
main api date time instant duration	__label__nonDir
policy specifies whether created poa retains active servant active object map	__label__nonDir
creates listener responsible updating display focus lost/gained	__label__nonDir
indicates container validate root	__label__nonDir
return opacity window	__label__nonDir
color light gray	__label__nonDir
exception indicates error ha occurred performing unmarshal operation prevents jaxb provider completing operation	__label__nonDir
interface must implemented modelmbeans	__label__nonDir
org/omg/corba/definitionkindhelper.java generated idl-to-java compiler portable version ir.idl june o'clock gmt+00:00	__label__nonDir
check duration zero length	__label__nonDir
creates color object based specified value hsb color model	__label__nonDir
extension valuebase implemented custom value type	__label__nonDir
description copied interface annotatedelement	__label__nonDir
get set unit supported duration	__label__nonDir
interface used imagereader implementation notify caller image thumbnail reading method progress	__label__nonDir
provides mbean server reference	__label__nonDir
contains minor code give detailed information caused exception completion status	__label__nonDir
helper floatseq	__label__nonDir
add specified mouse listener receive mouse-motion event trayicon	__label__nonDir
format object producing attributedcharacteriterator	__label__nonDir
return transparency mode color	__label__nonDir
method attempt create best strategy available number buffer supplied	__label__nonDir
extends class java.util.zip.zipfile support reading optional manifest entry	__label__nonDir
use class interface want control tree constructed updated rendered well data associated tree node viewed managed	__label__nonDir
appends separator specified size end tool bar	__label__nonDir
selects item index anindex	__label__nonDir
java idl ptc valueoutputstream used implementing rmi-iiop stream format version	__label__nonDir
monthday store month day without year time	__label__nonDir
describes member idl struct interface repository including name struct member type struct member typedef represents idl type struct member described struct member object	__label__nonDir
return string representation jtextfield	__label__nonDir
last number range id used text event	__label__nonDir
map javabean property xml id	__label__nonDir
constant f24 function key	__label__nonDir
one kind primitive essential idl data type	__label__nonDir
defines base type key used along renderinghints class control various algorithm choice rendering imaging pipeline	__label__nonDir
thrown indicate malformed url ha occurred	__label__nonDir
return true metal provide window decoration	__label__nonDir
determines offset end given line	__label__nonDir
message stop editing session	__label__nonDir
information helper file see generated file helper file	__label__nonDir
context object may named purpose specifying starting search scope	__label__nonDir
insert specified element tail deque	__label__nonDir
constructor concrete subclass us null default value	__label__nonDir
logrecord object used pas logging request logging framework individual log handler	__label__nonDir
font program	__label__nonDir
poa ha retain policy us servant manager servantactivators	__label__nonDir
set designated parameter given long java programming language	__label__nonDir
return true collection contains specified element	__label__nonDir
package contains class exception dynanyfactory interface dynamicany module specified omg common object request broker architecture specification http cgi.omg.org/cgi-bin/doc formal/99-10-07 section	__label__nonDir
holder policylist	__label__nonDir
width roundrectangle2d	__label__nonDir
helper shortseqhelper	__label__nonDir
return group command-environment control object	__label__nonDir
construct texturepaint object	__label__nonDir
multi-threaded environment several context exist simultaneously single paint object	__label__nonDir
update expanded state descendant path getting expanded descendant tree forwarding tree state	__label__nonDir
visit type value annotation	__label__nonDir
return boolean whether cursor last result	__label__nonDir
constant f19 function key	__label__nonDir
fetch configured java command option	__label__nonDir
might example write console write file send network logging service forward log whatever	__label__nonDir
constructor concrete subclass call	__label__nonDir
construct windowevent object specified opposite window	__label__nonDir
paint horizontal part leg	__label__nonDir
support reporting bound property change integer property	__label__nonDir
provides interface tool invoked program example compiler	__label__nonDir
description copied class abstractborder	__label__nonDir
multiplexing ui used combine separatoruis	__label__nonDir
sole constructor	__label__nonDir
param_inout represents inout parameter	__label__nonDir
get table-based rule collation object	__label__nonDir
description copied class componentui	__label__nonDir
mime type file format comment begin format mime type space separated file extension example text/plain txt text txt would map file.txt file.text file.txt mime type text/plain	__label__nonDir
provides class color space	__label__nonDir
jbutton added initially set disabled	__label__nonDir
font header	__label__nonDir
general reader may invoke rowset method one exception	__label__nonDir
default srgb space	__label__nonDir
mediatype instance iso/din b8 x mm	__label__nonDir
inset object representation border container	__label__nonDir
return set focus traversal key given traversal operation component	__label__nonDir
pseudo-type used actual type appropriate	__label__nonDir
org/omg/corba/fieldnamehelper.java generated idl-to-java compiler portable version june o'clock gmt+00:00	__label__nonDir
visit none pseudo-type calling defaultaction	__label__nonDir
queue concurrentlinkedqueue class supply efficient scalable thread-safe non-blocking fifo queue	__label__nonDir
return array containing method object reflecting declared method class interface represented class object including public protected default package access private method excluding inherited method	__label__nonDir
holder class long used store inout parameter idl method	__label__nonDir
xmladapter spec-defined sub-classes allow arbitrary java class used jaxb	__label__nonDir
set flag enabling rollover border toolbar also install apropriate border depending state flag	__label__nonDir
construct iterator given range given string index set specified position	__label__nonDir
interface object adjustable numeric value contained within bounded range value	__label__nonDir
used determine display	__label__nonDir
interface used model element java programming language	__label__nonDir
return array actionlisteners added jtextfield addactionlistener	__label__nonDir
provides api defines contract transaction manager resource manager allows transaction manager enlist delist resource object supplied resource manager driver jta transaction	__label__nonDir
description copied class abstractborder	__label__nonDir
applies given localized pattern string date format	__label__nonDir
metal l f implementation separatorui	__label__nonDir
provides class allowing processing xml document	__label__nonDir
information stub file see generated file stub	__label__nonDir
see java.awt.awtevent class detail awt event model	__label__nonDir
flag used getlayoutflags indicates glyphvector ha right-to-left run direction	__label__nonDir
clipboard typically used copy paste operation	__label__nonDir
information see swing threading policy	__label__nonDir
errormanager object attached handler process error occurs handler logging	__label__nonDir
return separator background color current theme	__label__nonDir
specified class loader used load class interface	__label__nonDir
visit boolean primitive type calling defaultaction	__label__nonDir
set bundle returned getextras	__label__nonDir
holder charseq	__label__nonDir
appends separator default size end tool bar	__label__nonDir
method implemented term handful protected abstract method	__label__nonDir
constant variation selector unicode character block	__label__nonDir
information helper file see generated file helper file	__label__nonDir
class provided representing quantization huffman table extension imagereadparam imagewriteparam provided supply table reading writing process	__label__nonDir
constant kayah li unicode character block	__label__nonDir
default value returned defaultaction return value unless method overridden	__label__nonDir
get accessiblecontext associated canvas	__label__nonDir
package contains dynamic module specified omg portable interceptor specification http cgi.omg.org/cgi-bin/doc ptc/2000-08-06 section	__label__nonDir
may also contain string describing exception	__label__nonDir
annotation processing tool framework provide annotation processor object implementing interface processor query information round annotation processing	__label__nonDir
override parent method avoid creating menu bar	__label__nonDir
make container undisplayable removing connection native screen resource	__label__nonDir
class encapsulating currency defined iso	__label__nonDir
transforms jar file packed stream pack200 format	__label__nonDir
example java.util.hashtable collections.synchronizedmap new hashmap synchronized	__label__nonDir
root event class awt event	__label__nonDir
aligns origin graphic roman baseline line	__label__nonDir
return number key-value mapping map	__label__nonDir
return descriptor equal descriptor	__label__nonDir
allows mbean perform operation needed registered mbean server registration ha failed	__label__nonDir
creates return propertychangelistener responsible listening change specified action updating appropriate property	__label__nonDir
wildcardtype represents wildcard type expression	__label__nonDir
package enables text editing component receive text input input method	__label__nonDir
poa ha non_retain policy us servant manager servantlocators	__label__nonDir
org/omg/corba/policyhelper.java generated idl-to-java compiler portable version src/share/classes/org/omg/portableserver/corba.idl saturday july pdt	__label__nonDir
atomically set given value return old value	__label__nonDir
set maximum number row rowset object may contain given number	__label__nonDir
return string representation collection	__label__nonDir
visit annotation_type type element calling defaultaction	__label__nonDir
predestroy annotation used method callback notification signal instance process removed container	__label__nonDir
remove element deque	__label__nonDir
service provider found system classpath e.g jre/lib/ext directory sun implementation jdk automatically loaded soon class instantiated	__label__nonDir
return x position event relative source component	__label__nonDir
check button selected	__label__nonDir
set command string used action event	__label__nonDir
also defines static method testing whether particular charset supported locating charset instance name constructing map contains every charset support available current java virtual machine	__label__nonDir
return string representation jtooltip	__label__nonDir
xml/java type mapping	__label__nonDir
return default cell renderer used stamping node	__label__nonDir
class implement server socket	__label__nonDir
constant small form variant unicode character block	__label__nonDir
helper booleanseq	__label__nonDir
get accessiblecontext associated jtooltip	__label__nonDir
attribute key converting ascii decimal digit decimal range	__label__nonDir
refer swing component supporting action detail find information use action section java tutorial	__label__nonDir
single pixel solid low underline	__label__nonDir
class defines service provider interface spi securerandom class	__label__nonDir
constant tai tham unicode character block	__label__nonDir
description copied class abstractborder	__label__nonDir
method allows syncprovider object reset	__label__nonDir
creates new instance cachedrowset	__label__nonDir
set designated parameter object java programming language	__label__nonDir
lay specified container using card layout	__label__nonDir
provides library support java programming language annotation facility	__label__nonDir
seekable output stream interface use imagewriters	__label__nonDir
obtains toolkit implementation helper class mouseinfo operation	__label__nonDir
object represents orb service service_detail_type field contains type orb service service_detail field contains description orb service	__label__nonDir
return array action listener registered trayicon	__label__nonDir
version jdbc api incorporates previous jdbc api version jdbc api jdbc api jdbc api jdbc core api jdbc optional package api note jdbc core api jdbc optional package api together referred jdbc api	__label__nonDir
return list constructor element	__label__nonDir
detail see thread swing section java tutorial	__label__nonDir
return string describing modifier key shift ctrl+shift	__label__nonDir
container holder exception used request operation make exception available client	__label__nonDir
