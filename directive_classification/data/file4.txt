 @param entry the entry to query, must not be null	__label__MethodCallDirective
 @param key the key to add, must not be null	__label__MethodCallDirective
 For instance, for types Http, and Socks, a SocketAddress must be provided.	__label__MethodCallDirective
 @param bag the bag to decorate, must not be null	__label__MethodCallDirective
 @return The string representation; never null.	__label__MethodCallDirective
 @throws IllegalArgumentException if map or factory is null	__label__MethodCallDirective
 @throws IllegalArgumentException if map or factory is null	__label__MethodCallDirective
 @param factory the factory to use, must not be null	__label__MethodCallDirective
 @throws IllegalArgumentException if bag is null	__label__MethodCallDirective
 @param buffer the buffer to decorate, must not be null	__label__MethodCallDirective
 @param map the map to decorate, must not be null	__label__MethodCallDirective
 @throws IllegalArgumentException if map is null	__label__MethodCallDirective
 @throws IllegalArgumentException if the collection is null	__label__MethodCallDirective
 @throws NullPointerException if the entry is null	__label__MethodCallDirective
 @throws IllegalArgumentException if set is null	__label__MethodCallDirective
 @throws IllegalArgumentException if the collection is null	__label__MethodCallDirective
 @throws IllegalArgumentException if the collection is null	__label__MethodCallDirective
 @param map the map to decorate, must not be null	__label__MethodCallDirective
 @param bag the bag to decorate, must not be null	__label__MethodCallDirective
 @throws NullPointerException if the map is null	__label__MethodCallDirective
 @throws NullPointerException if the list is null	__label__MethodCallDirective
 @param buffer the buffer to wrap, must not be null	__label__MethodCallDirective
 @param list the list to predicate, must not be null	__label__MethodCallDirective
 Attempting to add a null key or value to the map will raise a NullPointerException.	__label__MethodCallDirective
 @param buffer the buffer to decorate, must not be null	__label__MethodCallDirective
 @param map the map to decorate, must not be null	__label__MethodCallDirective
 @param set the set to decorate, must not be null	__label__MethodCallDirective
 @param set the set to decorate, must not be null	__label__MethodCallDirective
 @param collection the collection to add to, must not be null	__label__MethodCallDirective
 @param bag the bag to decorate, must not be null	__label__MethodCallDirective
 @param buffer the buffer to decorate, must not be null	__label__MethodCallDirective
 @param map the map to decorate, must not be null	__label__MethodCallDirective
 @param bag the bag to decorate, must not be null	__label__MethodCallDirective
 @param bag the bag to decorate, must not be null	__label__MethodCallDirective
 @param predicate the predicate to use for validation, must not be null	__label__MethodCallDirective
 @param set the set to decorate, must not be null	__label__MethodCallDirective
 @param b the second collection, must not be null	__label__MethodCallDirective
 @param iterable the iterable of elements to add, must not be null	__label__MethodCallDirective
 @param transformerFactory the factory for creating new objects, must not be null	__label__MethodCallDirective
 @param transformer the transformer for the set, must not be null	__label__MethodCallDirective
 @param map the map to decorate, must not be null	__label__MethodCallDirective
 @param list the list to decorate, must not be null	__label__MethodCallDirective
 @param collection the collection to add to, must not be null	__label__MethodCallDirective
 @param set the set to make unmodifiable, must not be null	__label__MethodCallDirective
 @param buffer the buffer to decorate, must not be null	__label__MethodCallDirective
 @param set the set to order, must not be null	__label__MethodCallDirective
 The map must be empty and non-null.	__label__MethodCallDirective
 @throws NullPointerException if array is null	__label__MethodCallDirective
 @throws NullPointerException if array is null	__label__MethodCallDirective
 @throws IllegalArgumentException if the classToInstantiate is null	__label__MethodCallDirective
 @param text the text to be displayed, must not be null	__label__MethodCallDirective
 @param identifier The identifier of the item from which the accelerator text should be obtained ; must not be null.	__label__MethodCallDirective
 @param predicate1 the first predicate, may not be null	__label__MethodCallDirective
 @throws NullPointerException if { b} is null	__label__MethodCallDirective
 @param key the key to use when persisting the user's preference; null if you don't want it persisted.	__label__MethodCallDirective
 null means that the schema name should not be used to narrow the search	__label__MethodCallDirective
 If null, the current time is used.	__label__MethodCallDirective
 @param valueTransformer the transformer to use for value conversion, null means no transformation	__label__MethodCallDirective
 @param valuePred the predicate for values, null means no check	__label__MethodCallDirective
 @param comparator the comparator used to order the elements, null means use natural order	__label__MethodCallDirective
 @param defaultClosure the closure to use if no match, null means nop	__label__MethodCallDirective
 @param defaultTransformer the transformer to use if no match, null means return null @return the chained transformer	__label__MethodCallDirective
 @param extensions a list of file extension, or null to set the filter to the system's default value	__label__MethodCallDirective
 Specifying a handler of null indicates that the URL should use a default stream handler for the protocol, as outlined for: java.net.URL#URL(java.lang.String, java.lang.String, int, java.lang.String)	__label__MethodCallDirective
 The actions should be null; they are ignored.	__label__MethodCallDirective
 A null value indicates that the elements' {@linkplain Comparable natural ordering} should be used.	__label__MethodCallDirective
 If the number of formal parameters required by the underlying constructor is 0, the supplied initargs array may be of length 0 or null.	__label__MethodCallDirective
 @param l event listener (can be null)	__label__MethodCallDirective
 @param cause the underlying reason for this SQLException (which is saved for later retrieval by the getCause() method); may be null indicating the cause is non-existent or unknown	__label__MethodCallDirective
 @param initialCapacity the initial capacity, must be a power of two @param loadFactor the load factor, must be > 0.0f and generally < 1.0f	__label__MethodCallDirective
 minimumIntegerDigits must be <= maximumIntegerDigits.	__label__MethodCallDirective
 The backlog argument must be a positive value greater than 0.	__label__MethodCallDirective
 The timeout must be > 0.	__label__MethodCallDirective
 The ttl is an unsigned 8-bit quantity, and so must be in the range 0 <= ttl <= 0xFF	__label__MethodCallDirective
 so this argument must not be negative, but is otherwise ignored	__label__MethodCallDirective
 @throws IllegalArgumentException if timeout is negative.	__label__MethodCallDirective
 The initial index of the range (from) must lie between zero and original.length, inclusive.	__label__MethodCallDirective
 The initial index of the range (from) must lie between zero and original.length, inclusive.	__label__MethodCallDirective
 @param keyType the type of reference to use for keys; must be {@link #HARD}, {@link #SOFT}, {@link #WEAK}	__label__MethodCallDirective
 @param keyType the type of reference to use for keys; must be {@link #HARD}, {@link #SOFT}, {@link #WEAK}	__label__MethodCallDirective
 The count must be at least 1.	__label__MethodCallDirective
 @param name Permission name. Must be "control".	__label__MethodCallDirective
 This sequence of characters must represent a positive value	__label__MethodCallDirective
 @param name the name of this SQLPermission object, which must be setLog	__label__MethodCallDirective
 The characters in the string must all be digits of the specified radix (as determined by whether {@link java.lang.Character#digit(char, int)} returns a nonnegative value), except that the first character may be an ASCII minus sign '-' ('\u002D') to indicate a negative value	__label__MethodCallDirective
 This sequence of characters must represent a positive value or a {@link NumberFormatException} will be thrown.	__label__MethodCallDirective
 A cookie's path must include the servlet that set the cookie, for example, /catalog, which makes the cookie visible to all directories on the server under /catalog.	__label__MethodCallDirective
 The formats must be equal to one of {@link Control#FORMAT_PROPERTIES}, {@link Control#FORMAT_CLASS} or {@link Control#FORMAT_DEFAULT}.	__label__MethodCallDirective
 If a scheme is given then the path, if also given, must either be empty or begin with a slash character ('/').	__label__MethodCallDirective
 The World Wide Web Consortium Recommendation states that UTF-8 should be used. Not doing so may introduce incompatibilites.	__label__MethodCallDirective
 Note that there must be at least one nonzero digit in a subnormal significand.	__label__MethodCallDirective
 This byte array should contain the DER encoded name, as it would appear in the GeneralName structure defined in RFC 2459 and X.509. The encoded byte array should only contain the encoded value of the name, and should not include the tag associated with the name in the GeneralName structure. The ASN.1 definition of this structure appears below.	__label__MethodCallDirective
 To be portable, however, applications should always provide these values for user-defined and REF parameters.	__label__MethodCallDirective
 If authorityKeyID is not null, it should contain a single DER encoded value corresponding to the contents of the extension value (not including the object identifier, criticality setting, and encapsulating OCTET STRING) for an AuthorityKeyIdentifier extension.	__label__MethodCallDirective
 This method can handle both label and entire domain name, by assuming that labels in a domain name are always separated by dots.	__label__MethodCallDirective
 @param encodedKey the key, which is assumed to be encoded according to the PKCS #8 standard.	__label__MethodCallDirective
 All elements inserted into the set must implement the {@link Comparable} interface	__label__MethodCallDirective
 Furthermore, all elements in this range must be mutually comparable (that is, e1.compareTo(e2) must not throw a ClassCastException for any elements e1 and e2 in the array).	__label__MethodCallDirective
 The key must implement Comparable.	__label__MethodCallDirective
 The property must implement java.lang#Boolean.	__label__MethodCallDirective
 If the object is of a class implementing the interface SQLData, the JDBC driver should call the method SQLData.writeSQL to write it to the SQL data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, RowId, SQLXML or Array, the driver should pass it to the database as a value of the corresponding SQL type.	__label__MethodCallDirective
 @throws ClassCastException if the key is of an invalid type	__label__MethodCallDirective
 @throws ArrayStoreException if the runtime type of the specified array is not a supertype of the runtime type of every element in this queue	__label__MethodCallDirective
 @throws ArrayStoreException if the runtime type of the specified array is not a supertype of the runtime type of every element in this queue	__label__MethodCallDirective
 The initial index of the range (from) must lie between zero and original.length, inclusive.	__label__MethodCallDirective
 @param types a list of table types, which must be from the list of table types returned from {@link #getTableTypes}	__label__MethodCallDirective
 @throws IllegalArgumentException if end is before start	__label__MethodCallDirective
 @throws IllegalArgumentException if end index is before the start	__label__MethodCallDirective
 The final index of the range (to), which must be greater than or equal to from, may be greater than original.length, in which case 0d is placed in all elements of the copy whose index is greater than or equal to original.length - from.	__label__MethodCallDirective
 If the given key is of type java.security.PrivateKey, it must be accompanied by a certificate chain certifying the corresponding public key.	__label__MethodCallDirective
 If the second argument is an InputStream then the stream must contain the number of bytes specified by scaleOrLength.	__label__MethodCallDirective
 Note that thes margins will be added to the ones specified by {@link #margins(int, int)}.	__label__MethodCallDirective
 {@link Color#dispose()} must never been called directly on the returned color.	__label__MethodCallDirective
 @return the accelerator text, or null	__label__MethodCallDirective
 @return an integer array of 3 elements. The first element must be greater than 0. The second element must be must be greater than 0. The third element must be either 3 or 4.	__label__MethodCallDirective
 It must contain at least a Locale instance equal to {@link java.util.Locale#US Locale.US}.	__label__MethodCallDirective
 This value may be null if there is no extra information.	__label__MethodCallDirective
 by subclasses to use an alternate loading mechanism but must return a Class object	__label__MethodCallDirective
 It must be unique for each certificate issued by a given CA (i.e., the issuer name and serial number identify a unique certificate).	__label__MethodCallDirective
 @return the predicate as the only element in an array	__label__MethodCallDirective
 It is the responsibility of the implementor to fully format the message before returning it.	__label__MethodCallDirective
 The array returned must contain at least a Locale instance equal to {@link java.util.Locale#US Locale.US}.	__label__MethodCallDirective
 If no symbol can be determined, null should be returned.	__label__MethodCallDirective
 The array may be the internal data structure of the predicate and thus should not be altered.	__label__MethodCallDirective
 Implementations must return an OrderedBidiMap instance, usually by forwarding to inverseOrderedBidiMap().	__label__MethodCallDirective
 In other words, this method must allocate a new array even if this list is backed by an array	__label__MethodCallDirective
 Evaluates the rule by examining the characters available from the provided character scanner. The token returned by this rule returns true when calling isUndefined, if the text that the rule investigated does not match the rule's requirements	__label__MethodCallDirective
 For instances where the viewer is displaying a tree containing a single 'root' element it is still necessary that the 'input' does not return itself from this method. This leads to recursion issues (see bug 9262).	__label__MethodCallDirective
 Returns the greatest key strictly less than the given key, or { null} if there is no such key.	__label__MethodCallDirective
 The PRECISION column represents the specified column size for the given parameter or column. For numeric data, this is the maximum precision. For character data, this is the length in characters. For datetime datatypes, this is the length in characters of the String representation (assuming the maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes. For the ROWID datatype, this is the length in bytes. Null is returned for data types where the column size is not applicable	__label__MethodCallDirective
 This is not intended to be called outside of the workbench.	__label__MethodCallDirective
 Note: Using the Activatable constructors that both register and export an activatable remote object is strongly discouraged because the actions of registering and exporting the remote object are not guaranteed to be atomic.	__label__MethodCallDirective
 Note: Using this method (as well as the Activatable constructors that both register and export an activatable remote object) is strongly discouraged because the actions of registering and exporting the remote object are not guaranteed to be atomic.	__label__MethodCallDirective
 This method is deprecated and should not be used because SQL TIME values do not have a date component.	__label__MethodCallDirective
 This method is internal to the framework; subclassers should not call this method.	__label__MethodCallDirective
 @deprecated Initialization of this field is prone to deadlocks.	__label__MethodCallDirective
 MapUtils should not normally be instantiated.	__label__MethodCallDirective
 Ordinary applications should have no need to invoke any of these methods, which can be identified by the fact that they are declared to throw {@link BackingStoreException}.	__label__MethodCallDirective
 Users of SWT.VIRTUAL should also avoid using getItems() from the Table within the TreeViewer as this does not necessarily generate a callback for the TreeViewer to populate the items. It also has the side effect of creating all of the items thereby eliminating the performance improvements of SWT.VIRTUAL.	__label__MethodCallDirective
 The string representation of this command -- for debugging purposes only.	__label__MethodCallDirective
 This method is used only for debugging.	__label__MethodCallDirective
 This class is not intended to be called or extended by any external clients.	__label__MethodCallDirective
 Therefore an RMI application should use the SecurityManager class or another application-specific SecurityManager implementation instead of this class.	__label__MethodCallDirective
 This class is for Preferences implementers only. Normal users of the Preferences facility should have no need to consult this documentation.	__label__MethodCallDirective
 For sequential access data (such as a linked list), {@link AbstractSequentialList} should be used in preference to this class.	__label__MethodCallDirective
 When a LogRecord is passed into the logging framework it logically belongs to the framework and should no longer be used or updated by the client application.	__label__MethodCallDirective
 Therefore, it would be wrong to write a program that depended on this exception for its correctness: ConcurrentModificationException should be used only to detect bugs.	__label__MethodCallDirective
 @deprecated no replacement. Skeletons are no longer required for remote method calls in the Java 2 platform v1.2 and greater.	__label__MethodCallDirective
 @deprecated As of 3.3, this class is no longer necessary.	__label__MethodCallDirective
 @deprecated This class incorrectly assumes that bytes adequately represent characters. As of JDK 1.1, the preferred way to operate on character streams is via the new character-stream classes, which include a class for counting line numbers.	__label__MethodCallDirective
 This class is intended to be instantiated and used by clients.	__label__MethodCallDirective
 This class may be instantiated;	__label__MethodCallDirective
 Constructor for use by subclasses.	__label__MethodCallDirective
 Clients may call this framework method	__label__MethodCallDirective
 It is generally true of all the reading routines in this class that if end-of-file is reached before the desired number of bytes has been read, an EOFException (which is a kind of IOException) is thrown.	__label__MethodCallDirective
 @exception SQLException if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement	__label__MethodCallDirective
 @exception IOException if there is an error joining or when the address is not a multicast address.	__label__MethodCallDirective
 @exception SQLException if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement @exception SQLFeatureNotSupportedException if the JDBC driver does not support this method	__label__MethodCallDirective
 @exception SQLException if a database access error occurs	__label__MethodCallDirective
 @exception SocketException if there is an error in the underlying protocol, such as a TCP error.	__label__MethodCallDirective
 @exception IOException if an I/O error occurs.	__label__MethodCallDirective
 @param filename the file to load. @exception SecurityException if a security manager exists and its checkLink method doesn't allow loading of the specified dynamic library @exception UnsatisfiedLinkError if the file does not exist.	__label__MethodCallDirective
 @throws IllegalFormatException If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification.	__label__MethodCallDirective
 Throws CloneNotSupportedException. This guarantees that enums are never cloned, which is necessary to preserve their "singleton" status. @return (never returns)	__label__MethodCallDirective
 @throws IOException if an IO error occurs	__label__MethodCallDirective
 @exception SQLException if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement	__label__MethodCallDirective
 @exception SecurityException If a security manager, s, is present and any of the following conditions is met:      invocation of {@link SecurityManager#checkMemberAccess s.checkMemberAccess(this, Member.PUBLIC)} denies access to the fields within this class     the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the package of this class	__label__MethodCallDirective
 @exception EOFException if this input stream has reached the end. @exception IOException the stream has been closed and the contained input stream does not support reading after close, or another I/O error occurs.	__label__MethodCallDirective
 @exception EOFException if this input stream reaches the end before reading two bytes. @exception IOException the stream has been closed and the contained input stream does not support reading after close, or another I/O error occurs. @see java.io.FilterInputStream#in	__label__MethodCallDirective
 @exception SQLException if a database access error occurs, this method is called on a closed Statement or the condition seconds >= 0 is not satisfied	__label__MethodCallDirective
 This implies that compare(x, y) must throw an exception if and only if compare(y, x) throws an exception.	__label__MethodCallDirective
 This exception must be thrown in a consistent fashion for synchronization to work correctly.	__label__MethodCallDirective
 @throws org.eclipse.swt.SWTException in these cases:      * {@link org.eclipse.swt.SWT#ERROR_WIDGET_DISPOSED} - if the receiver has been disposed     * {@link org.eclipse.swt.SWT#ERROR_THREAD_INVALID_ACCESS} - if not called from the thread that created the receiver	__label__MethodCallDirective
 @exception IllegalArgumentException if the given LoadStoreParameter input is not recognized @exception IOException if there is an I/O or format problem with the keystore data. If the error is due to an incorrect ProtectionParameter (e.g. wrong password) the {@link Throwable#getCause cause} of the IOException should be an UnrecoverableKeyException	__label__MethodCallDirective
 @exception IOException if there is an I/O or format problem with the keystore data, if a password is required but not given, or if the given password was incorrect. If the error is due to a wrong password, the {@link Throwable#getCause cause} of the IOException should be an UnrecoverableKeyException	__label__MethodCallDirective
 @exception IOException if there is an I/O or format problem with the keystore data, if a password is required but not given, or if the given password was incorrect. If the error is due to a wrong password, the {@link Throwable#getCause cause} of the IOException should be an UnrecoverableKeyException	__label__MethodCallDirective
 If a collection refuses to add a particular element for any reason other than that it already contains the element, it must throw an exception (rather than returning false).	__label__MethodCallDirective
 Note that null is not an instance of any class, and e.compareTo(null) should throw a NullPointerException even though e.equals(null) returns false.	__label__MethodCallDirective
 If the input object is null, a PredicateException is thrown.	__label__MethodCallDirective
 @throws UnsupportedOperationException if the map is unmodifiable	__label__MethodCallDirective
 @throws IllegalArgumentException if endpoint is null or is a SocketAddress subclass not supported by this socket	__label__MethodCallDirective
 @throws IllegalStateException if not all the elements can be added at this time due to insertion restrictions	__label__MethodCallDirective
 @throws IllegalArgumentException if this map itself has a restricted range, and { fromKey} lies outside the bounds of the range	__label__MethodCallDirective
 The given CompositeData must contain the following attributes:	__label__MethodCallDirective
 The range must be sorted (as by the {@link #sort(byte[], int, int)} method) prior to making this call.	__label__MethodCallDirective
 The array must be sorted (as by the {@link #sort(double[])} method) prior to making this call.	__label__MethodCallDirective
 @param catalog a catalog name; must match the catalog name as it is stored in the database; "" retrieves those without a catalog; null means that the catalog name should not be used to narrow the search	__label__MethodCallDirective
 @param tableNamePattern a table name pattern; must match the table name as it is stored in the database @return ResultSet - each row is a table privilege description	__label__MethodCallDirective
 @param schemaPattern a schema name pattern; must match the schema name as it is stored in the database; "" retrieves those without a schema; null means that the schema name should not be used to narrow the search	__label__MethodCallDirective
 @param procedureNamePattern a procedure name pattern; must match the procedure name as it is stored in the database	__label__MethodCallDirective
 The map must be empty and non-null.	__label__MethodCallDirective
 @param schema a schema name; must match the schema name as it is stored in the database; "" retrieves those without a schema; null means that the schema name should not be used to narrow the search	__label__MethodCallDirective
 @param attributeNamePattern an attribute name pattern; must match the attribute name as it is declared in the database	__label__MethodCallDirective
 The array must be sorted (as by the {@link #sort(short[])} method) prior to making this call	__label__MethodCallDirective
 @param b The bytes that make up the class data. The bytes in positions off through off+len-1 should have the format of a valid class file as defined by the Java Virtual Machine Specification.	__label__MethodCallDirective
 @param catalog a catalog name; must match the catalog name as it is stored in the database; "" retrieves those without a catalog; null means that the catalog name should not be used to narrow the search	__label__MethodCallDirective
 @param table a table name; must match the table name as it is stored in this database	__label__MethodCallDirective
 The certificates supplied must be of a type supported by the CertificateFactory	__label__MethodCallDirective
 The input array is assumed to be in big-endian byte-order: the most significant byte is in the zeroth element.	__label__MethodCallDirective
 Do not subclass.	__label__SubclassingDirective
 it is not intended to be subclassed.	__label__SubclassingDirective
 This class is not intended to be subclassed.	__label__SubclassingDirective
 @noextend This class is not intended to be subclassed by clients.	__label__SubclassingDirective
 it is not intended to be subclassed.	__label__SubclassingDirective
 @noextend This interface is not intended to be extended by clients.	__label__SubclassingDirective
 @noimplement This interface is not intended to be implemented by clients.	__label__SubclassingDirective
 This interface should never be directly implemented.	__label__SubclassingDirective
 This concrete dialog class can be further subclassed as required.	__label__SubclassingDirective
 This concrete dialog class can be further subclassed as required.	__label__SubclassingDirective
 Clients should subclass	__label__SubclassingDirective
 Clients can implement this interface and its extension interfaces, subclass {@link AbstractInformationControl}, or use the (text-based) default implementation {@link DefaultInformationControl}.	__label__SubclassingDirective
 Clients are encouraged to subclass {@link AbstractInformationControl}, which does this for free.	__label__SubclassingDirective
 Clients may implement this interface.	__label__SubclassingDirective
 Clients may implement this interface.	__label__SubclassingDirective
 Clients may implement this interface.	__label__SubclassingDirective
 This interface must be implemented by clients that want to use one of their models as a reconcile step's input model.	__label__SubclassingDirective
 Clients may implement this interface.	__label__SubclassingDirective
 The interface can be implemented by clients.	__label__SubclassingDirective
 Key-value entries are stored in instances of the ReferenceEntry class which can be overridden and replaced.	__label__SubclassingDirective
 Subclasses may extend this method.	__label__SubclassingDirective
 Subclasses may extend or reimplement.	__label__SubclassingDirective
 Subclasses may extend	__label__SubclassingDirective
 Subclasses may override	__label__SubclassingDirective
 Subclasses should override this method	__label__SubclassingDirective
 Subclasses may reimplement or extend.	__label__SubclassingDirective
 Subclasses may override (extend or reimplement)	__label__SubclassingDirective
 Subclasses may reimplement this method to provide non-trivial categorization.	__label__SubclassingDirective
 Subclasses may reimplement.	__label__SubclassingDirective
 Subclasses may reimplement.	__label__SubclassingDirective
 Subclasses should override this method if they need information from the triggering event, or override run() if not.	__label__SubclassingDirective
 if the programmer desires thread-local variables to have an initial value other than null, ThreadLocal must be subclassed, and this method overridden.	__label__SubclassingDirective
 Subclasses may override.	__label__SubclassingDirective
 Subclasses may override.	__label__SubclassingDirective
 Subclasses should override this method when an alternate default location is desired, rather than overriding {@link #getInitialLocation(Point)}	__label__SubclassingDirective
 Subclasses should override to take some action in response to a help request.	__label__SubclassingDirective
 Subclasses may override.	__label__SubclassingDirective
 May be extended by subclasses.	__label__SubclassingDirective
 Subclasses may override.	__label__SubclassingDirective
 Subclasses that intend to support efficient single-character output should override this method.	__label__SubclassingDirective
 Subclasses of FilterOutputStream should provide a more efficient implementation of this method.	__label__SubclassingDirective
 This framework method must be implemented by concrete subclasses.	__label__SubclassingDirective
 This method should be overridden if a refresh operation is supported by the policy implementation.	__label__SubclassingDirective
 Knowledgeable providers should override this method.	__label__SubclassingDirective
 Otherwise, it calls {@link #identityEquals(Identity) identityEquals}, which subclasses should override.	__label__SubclassingDirective
 Subclasses must implement this method to provide drop behavior.	__label__SubclassingDirective
 Subclasses must implement this method to define which drops make sense.	__label__SubclassingDirective
 Subclasses may override	__label__SubclassingDirective
 Subclasses may override.	__label__SubclassingDirective
 Sublcasses may override.	__label__SubclassingDirective
 Override if the root element is different from the viewer's input element.	__label__SubclassingDirective
 Subclasses can override this, for example to use the identityHashCode.	__label__SubclassingDirective
 Subclasses can override this to return alternate hash codes.	__label__SubclassingDirective
 Subclasses could override to handle changes to the map.	__label__SubclassingDirective
 Subclasses can override this to return iterators with different properties.	__label__SubclassingDirective
 This can be overridden by subclasses to provide a different map implementation.	__label__SubclassingDirective
 Subclasses can override this to return iterators with different properties.	__label__SubclassingDirective
 To implement a modifiable collection, the programmer must additionally override this class's add method (which otherwise throws an UnsupportedOperationException),	__label__SubclassingDirective
 Other subclasses should also provide overrides of this function that do the right thing.	__label__SubclassingDirective
 It can be overriden in a subclass.	__label__SubclassingDirective
 Subclasses are encouraged to provide a more efficient implementation of this method.	__label__SubclassingDirective
 Subclasses are encouraged to override this method and provide a more efficient implementation.	__label__SubclassingDirective
 Override this method in subclass implementations for faster handling.	__label__SubclassingDirective
 This method may only be called after initializeDialogUnits has been called.	__label__SubclassingDirective
 This method is not intended to be overridden by subclasses.	__label__SubclassingDirective
 This method is not intended to be overridden by subclasses.	__label__SubclassingDirective
 Subclasses may extend this IContributionManager method, but must call super.update	__label__SubclassingDirective
 Subclasses should extend if extra pages need to be added before the wizard opens.	__label__SubclassingDirective
 super.setLabelProvider must be invoked.	__label__SubclassingDirective
 overriding methods must invoke super.handleDispose	__label__SubclassingDirective
 If you override this method, then you should make a call to super.checkAwtEventQueueAccess at the point the overridden method would normally throw an exception.	__label__SubclassingDirective
 If you override this method, then you should make a call to super.checkWrite at the point the overridden method would normally throw an exception.	__label__SubclassingDirective
 If you override this method, then you should make a call to super.checkExit at the point the overridden method would normally throw an exception. @param status the exit status.	__label__SubclassingDirective
 If you override this method, then you should make a call to super.checkSetFactory at the point the overridden method would normally throw an exception.	__label__SubclassingDirective
 All subclasses must call this method when their control is first established.	__label__SubclassingDirective
 Subclasses wishing a preference page without these buttons should call this framework method before the page's control has been created.	__label__SubclassingDirective
 Subclasses need to call {@link #clearPositionCache()} after modifying the partitioner's positions.	__label__SubclassingDirective
 It is recommended that this method be used by subclasses to determine whether the viewer is busy to return early from state-changing methods.	__label__SubclassingDirective
 If you override this method, then you should make a call to super.checkExec at the point the overridden method would normally throw an exception.	__label__SubclassingDirective
 The first serializable subclass must call this method from writeObject.	__label__SubclassingDirective
 This method must not modify the parent's layout.	__label__SubclassingDirective
 In other words, this method must allocate a new array	__label__SubclassingDirective
 In either case the implementation must ensure that the signal is redirected to another waiting thread, if there is one.	__label__SubclassingDirective
 Note: By definition, the execution of positioned updates and deletes must be done by a different Statement object than the one that generated the ResultSet object being used for positioning.	__label__SubclassingDirective
 Two hosts are considered equivalent if both host names can be resolved into the same IP addresses; else if either host name can't be resolved, the host names must be equal without regard to case; or both host names equal to null.	__label__SubclassingDirective
 The implementation of the method must follow this protocol: It must write each of the attributes of the SQL type to the given output stream. This is done by calling a method of the output stream to write each item, in the order that they appear in the SQL definition of the type. Specifically, it must call the appropriate SQLOutput writer method(s) (writeInt, writeString, and so on) to do the following: for a Distinct Type, write its single data element; for a Structured Type, write a value for each attribute of the SQL type.	__label__SubclassingDirective
 # codesource must not be null. # If this object's certificates are not null, then all of this object's certificates must be present in codesource's certificates. # If this object's location (getLocation()) is not null, then the following checks are made against this object's location and codesource's: 1. codesource's location must not be null. 2. If this object's location equals codesource's location, then return true. 3. This object's protocol (getLocation().getProtocol()) must be equal to codesource's protocol. 4. If this object's host (getLocation().getHost()) is not null, then the SocketPermission constructed with this object's host must imply the SocketPermission constructed with codesource's host. 5. If this object's port (getLocation().getPort()) is not equal to -1 (that is, if a port is specified), it must equal codesource's port. 6. If this object's file (getLocation().getFile()) doesn't equal codesource's file, then the following checks are made: If this object's file ends with "/-", then codesource's file must start with this object's file (exclusive the trailing "-"). If this object's file ends with a "/*", then codesource's file must start with this object's file and must not have any further "/" separators. If this object's file doesn't end with a "/", then codesource's file must match this object's file with a '/' appended. 7. If this object's reference (getLocation().getRef()) is not null, it must equal codesource's reference.	__label__SubclassingDirective
 Format subclasses that are aware of Field should give precedence to attribute and ignore fieldID if attribute is not null.	__label__SubclassingDirective
 Regardless of whether these additional PKIXCertPathCheckers are set, a PKIX CertPathValidator or CertPathBuilder must perform all of the required PKIX checks on each certificate	__label__SubclassingDirective
 Unlike some of the numeric methods of class StrictMath, all implementations of the equivalent functions of class Math are not defined to return the bit-for-bit same results. This relaxation permits better-performing implementations where strict reproducibility is not required.	__label__SubclassingDirective
 Implementations may, but are not required to, throw this exception if fromKey or toKey cannot be compared to keys currently in the map.	__label__SubclassingDirective
 Implementations may, but are not required to, throw this exception if { toKey} cannot be compared to keys currently in the map.	__label__SubclassingDirective
 Subclasses of this class are encouraged, but not required, to attempt to read as many characters as possible in the same fashion.	__label__SubclassingDirective
 Implementations should use the font of the given drawable to calculate the size of the text to be presented.	__label__SubclassingDirective
 The equals method implements an equivalence relation on non-null object references: * It is reflexive: for any non-null reference value x, x.equals(x) should return true. * It is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true. * It is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. * It is consistent: for any non-null reference values x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. * For any non-null reference value x, x.equals(null) should return false.	__label__SubclassingDirective
 Implementations should seek to avoid creating a new object every time this method is called. See AbstractMap.values() etc. Calling this method on the inverse map should return the original.	__label__SubclassingDirective
 The size of the collection can vary, but it can never exceed a preset maximum number of elements.	__label__SubclassingDirective
 If no such object exists, the list should be "wrapped" using the {@link Collections#synchronizedList Collections.synchronizedList} method.	__label__SubclassingDirective
 This method should query if the state of the object permits it to be acquired in the shared mode, and if so to acquire it.	__label__SubclassingDirective
 For a given subclass of ObjectInputStream that overrides this method, the annotateProxyClass method in the corresponding subclass of ObjectOutputStream must write any data or objects read by this method	__label__SubclassingDirective
 When reading the value of an out parameter, you must use the getXXX method whose Java type XXX corresponds to the parameter's registered SQL type.	__label__SubclassingDirective
 Must have the same effect as getBindings(ScriptContext.ENGINE_SCOPE).get	__label__SubclassingDirective
 Overriding this method is generally not required if the number of different keys is small. If a more efficient representation of a viewer's properties is required, override both getData and setData.	__label__SubclassingDirective
 This interface is not intended to be implemented by clients other than {@link org.eclipse.jface.text.ITextViewer} implementers.	__label__SubclassingDirective
 Enriching this information control only works properly if {@link IInformationControl#isFocusControl()} is implemented like this (fShell is the control's shell): return fShell.getDisplay().getActiveShell() == fShell	__label__SubclassingDirective
 For a modifiable list the programmer should additionally implement the list iterator's set method.	__label__SubclassingDirective
 However, it is crucial that the programmer writing the verifier code be aware what Signature engine is being used, as its own implementation of the verify method is invoked to verify a signature.	__label__SubclassingDirective
 If you reimplement this method, you should also reimplement createContents.	__label__SubclassingDirective
 These methods must explicitly coordinate with the supertype to save its state.	__label__SubclassingDirective
 all of the methods and constructors in subclasses of this class must obey the additional constraints imposed by the Set interface	__label__SubclassingDirective
 Additional input parameters required for executing the check may be specified through constructors of concrete implementations of this class.	__label__SubclassingDirective
 The default implementation provided in the Observable class will notify Observers in the order in which they registered interest, but subclasses may change this order, use no guaranteed order, deliver notifications on separate threads, or may guarantee that their subclass follows this order, as they choose.	__label__SubclassingDirective
 This should be called whenever needsInput() returns true indicating that more input data is required.	__label__MethodCallDirective
 This method must be called to release any resources associated with the stream.	__label__MethodCallDirective
 For client sockets, setReceiveBufferSize() must be called before connecting the socket to its remote peer.	__label__MethodCallDirective
 This method should be called before requesting the order of the contribution items to ensure that the order is accurate.	__label__MethodCallDirective
 Only listeners registered at the time this method is called are notified.	__label__MethodCallDirective
 Only listeners registered at the time this method is called are notified.	__label__MethodCallDirective
 All OUT parameters must be registered before a stored procedure is executed.	__label__MethodCallDirective
 To instantiate a PKIXParameters object, an application must specify one or more most-trusted CAs as defined by the PKIX certification path validation algorithm.	__label__MethodCallDirective
 Note: {@link ListIterator} implementations that support add() and remove() only allow set() to be called once per call to next() or previous (see the {@link ListIterator} javadoc for more details).	__label__MethodCallDirective
 In other words, this method must allocate a new array even if this set is backed by an array	__label__MethodCallDirective
 In other words, this method must allocate a new array even if this collection is backed by an array	__label__MethodCallDirective
 This method can be called once per call to next().	__label__MethodCallDirective
 Purges stale mappings from this map before read operations.	__label__MethodCallDirective
 @throws IllegalStateException if hasNext() has already been called.	__label__MethodCallDirective
 @throws IllegalStateException if the next method has not yet been called, or the remove method has already been called after the last call to the next method.	__label__MethodCallDirective
 The context must be a security context returned by a previous call to getSecurityContext and the access control decision is based upon the configured security policy for that security context.	__label__MethodCallDirective
 This is set to -1 if neither method has yet been invoked.	__label__MethodCallDirective
 Constructs a new IteratorEnumeration that will not function until {@link #setIterator(Iterator) setIterator} is invoked.	__label__MethodCallDirective
 When waiting upon a { Condition}, a "spurious wakeup" is permitted to occur, in general, as a concession to the underlying platform semantics. This has little practical impact on most application programs as a { Condition} should always be waited upon in a loop, testing the state predicate that is being waited for.	__label__MethodCallDirective
 If the matcher is to be used in further matching operations then it should first be reset.	__label__MethodCallDirective
 As of 3.2, AbstractTreeViewer supports multiple equal elements (each with a different parent chain) in the tree. This support requires that clients enable the element map by calling setUseHashLookup(true).	__label__MethodCallDirective
 It is strongly recommended that an application explicitly commits or rolls back an active transaction prior to calling the close method.	__label__MethodCallDirective
 Note that the dialog will have no visual representation (no widgets) until it is told to open.	__label__MethodCallDirective
 If the font of the specified control is changed after this PixelConverter is created, then the conversions from this instance will not produce the desired effect.	__label__MethodCallDirective
 Painters are informed about changes to the viewer content and state and can take the necessary action in responds to the notification.	__label__MethodCallDirective
 Adjust the bounds of the popup as necessary prior to opening the dialog.	__label__MethodCallDirective
 Once established, a page's wizard cannot be changed to a different wizard.	__label__MethodCallDirective
 It is important not to use the original set after invoking this method, as it is a backdoor for adding invalid objects	__label__MethodCallDirective
 It is important not to use the original list after invoking this method, as it is a backdoor for adding untransformed objects.	__label__MethodCallDirective
 It is important not to use the original bag after invoking this method, as it is a backdoor for adding untransformed objects.	__label__MethodCallDirective
 Register an object to be validated before the graph is returned. While similar to resolveObject these validations are called after the entire graph has been reconstituted.	__label__MethodCallDirective
 If the returned node did not exist prior to this call, this node and any ancestors that were created by this call are not guaranteed to become permanent until the flush method is called on the returned node (or one of its ancestors or descendants).	__label__MethodCallDirective
 The current thread must own this object's monitor.	__label__MethodCallDirective
 Note that IndexOutOfBoundsException IS returned for invalid negative indices.	__label__MethodCallDirective
 The provider must be accessible from the same class loader that was initially queried to locate the configuration file; this is not necessarily the class loader that loaded the file.	__label__MethodCallDirective
 A PKIX CertPathBuilder instance must not build paths longer than the length specified.	__label__MethodCallDirective
 @throws ArithmeticException if { roundingMode==ROUND_UNNECESSARY} and the specified scaling operation would require rounding.	__label__MethodCallDirective
 @throws ArithmeticException if the specified scaling operation would require rounding.	__label__MethodCallDirective
 If the object does not call Activatable.inactive when it deactivates, the object will never be garbage collected since the group keeps strong references to the objects it creates.	__label__MethodCallDirective
 Update(SIZE) should be called to adjust the widget.	__label__MiscellaneousDirective
 The {@link PrintWriter} class should be used in situations that require writing characters rather than bytes.	__label__MiscellaneousDirective
 The {@link java.nio.charset.CharsetDecoder} class should be used when more control over the decoding process is required.	__label__MiscellaneousDirective
 If an application absolutely must call a getPermissions method, it should call getPermissions(ProtectionDomain).	__label__MiscellaneousDirective
 Denigrated, replaced by {@linkplain #getSubjectX500Principal()}. This method returns the subject as an implementation specific Principal object, which should not be relied upon by portable code.	__label__MiscellaneousDirective
 Denigrated, use {@linkplain #getIssuer()} or {@linkplain #getIssuerAsBytes()} instead. This method should not be relied on as it can fail to match some certificates because of a loss of encoding information in the RFC 2253 String form of some distinguished names.	__label__MiscellaneousDirective
 Denigrated, replaced by {@linkplain #getIssuerX500Principal()}. This method returns the issuer as an implementation specific Principal object, which should not be relied upon by portable code.	__label__MiscellaneousDirective
 Denigrated, replaced by {@linkplain #getIssuerX500Principal()}. This method returns the issuer as an implementation specific Principal object, which should not be relied upon by portable code.	__label__MiscellaneousDirective
 The {@link java.nio.charset.CharsetEncoder} class should be used when more control over the encoding process is required.	__label__MiscellaneousDirective
 If a new Integer instance is not required, this method should generally be used in preference to the constructor {@link #Integer(int)}, as this method is likely to yield significantly better space and time performance by caching frequently requested values.	__label__MiscellaneousDirective
 If a new Byte instance is not required, this method should generally be used in preference to the constructor {@link #Byte(byte)}, as this method is likely to yield significantly better space and time performance by caching frequently requested values.	__label__MiscellaneousDirective
 Overriding createDialogArea and (optionally) createTitleMenuArea and createTitleMenuArea are recommended rather than overriding this method.	__label__MiscellaneousDirective
 Also note that the equivalent of {@link #ListenerList()} is actually {@link org.eclipse.core.runtime.ListenerList#ListenerList(int)} with {@link org.eclipse.core.runtime.ListenerList#IDENTITY} as the argument.	__label__MiscellaneousDirective
 The {@link org.apache.commons.collections.set.ListOrderedSet ListOrderedSet} class provides an alternative approach, by wrapping an existing Set and retaining insertion order in the iterator.	__label__MiscellaneousDirective
 Note that IdentityMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. The simplest approach is to wrap this map using {@link java.util.Collections#synchronizedMap(Map)}.	__label__MiscellaneousDirective
 Note that PredicatedMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. The simplest approach is to wrap this map using {@link java.util.Collections#synchronizedMap(Map)}.	__label__MiscellaneousDirective
 WARNING: This method is binary incompatible with Commons Collections 2.1 and 2.1.1. Use EmptyIterator.INSTANCE for compatability with Commons Collections 2.1.1.	__label__MiscellaneousDirective
 WARNING: This method is binary incompatible with Commons Collections 2.1 and 2.1.1. Use new ArrayIterator(array,start,end) for compatability.	__label__MiscellaneousDirective
 If you subclass AbstractLinkedMap but not LinkEntry then you will not be able to access the protected fields. The entryXxx() methods on AbstractLinkedMap exist to provide the necessary access.	__label__MiscellaneousDirective
 Implementations typically return null if no values have been mapped to the key, however the implementation may choose to return an empty collection.	__label__MiscellaneousDirective
 @return the Collection of values removed, implementations should return null for no mapping found, but may return an empty collection	__label__MiscellaneousDirective
 Unless a new instance is required, the static factory {@link #valueOf(boolean)} is generally a better choice.	__label__MiscellaneousDirective
 Standard implementations of common closures are provided by {@link ClosureUtils}. These include method invokation and for/while loops.	__label__MiscellaneousDirective
 Events are not generated when indirect descendants of this node are added or removed; a caller desiring such events must register with each descendant.	__label__MiscellaneousDirective
 If you would like to ensure that unreferenced pools are reclaimed even if users forget to call {@link ThreadPoolExecutor#shutdown}, then you must arrange that unused threads eventually die, by setting appropriate keep-alive times, using a lower bound of zero core threads and/or setting {@link ThreadPoolExecutor#allowCoreThreadTimeOut(boolean)}.	__label__MiscellaneousDirective
 It is recommended to use setComparator() instead.	__label__MiscellaneousDirective
 It is recommended to use getComparator() instead.	__label__MiscellaneousDirective
 If the caller adds its own columns, uses Table.setHeadersVisible(true), or needs to handle dynamic resizing of the table, it is recommended to create the Table itself, specifying the SWT.CHECK style bit (along with any other style bits needed), and use new CheckboxTableViewer(Table) rather than this constructor.	__label__MiscellaneousDirective
 @deprecated This type of security checking is not recommended. It is recommended that the checkPermission call be used instead.	__label__MiscellaneousDirective
 Subclasses of ClassLoader are encouraged to override {@link #findClass(String)}, rather than this method.	__label__MiscellaneousDirective
 Developers are encouraged to use the comparator returned from this method instead of constructing a new instance to reduce allocation and GC overhead when multiple comparable comparators may be used in the same VM.	__label__MiscellaneousDirective
 The style bit SWT.WRAP should be used if a larger message area is desired.	__label__MiscellaneousDirective
 May fail spuriously and does not provide ordering guarantees, so is only rarely an appropriate alternative to { compareAndSet}.	__label__MiscellaneousDirective
 May fail spuriously and does not provide ordering guarantees, so is only rarely an appropriate alternative to { compareAndSet}.	__label__MiscellaneousDirective
 This interface may be implemented by clients. Alternatively, clients may use the rule-based default implementation {@link org.eclipse.jface.text.rules.DefaultDamagerRepairer}.	__label__MiscellaneousDirective
 For comparing Strings exactly once, the compare method provides the best performance. When sorting a list of Strings however, it is generally necessary to compare each String multiple times. In this case, CollationKeys provide better performance.	__label__MiscellaneousDirective
 Note that this method does not clean up references between this cool bar manager and its associated contribution items. Use removeAll for that purpose.	__label__MiscellaneousDirective
 The default CertPathValidator type can be changed by setting the value of the "certpathvalidator.type" security property (in the Java security properties file) to the desired type.	__label__MiscellaneousDirective
 These methods are designed to be used as tools for creating higher-level synchronization utilities, and are not in themselves useful for most concurrency control applications.	__label__MiscellaneousDirective
 If multiple threads access a format concurrently, it must be synchronized externally.	__label__MiscellaneousDirective
 A subclass should therefore use the object in this field rather than this or a synchronized method.	__label__MiscellaneousDirective
 The cursor enables iteration and list changes to occur in any order without invalidating the iterator (from one thread).	__label__MiscellaneousDirective
 Iterators must be separately synchronized around the loop.	__label__MiscellaneousDirective
 This implementation is not synchronized. You can use {@link java.util.Collections#synchronizedMap} to provide synchronized access to a ReferenceMap.	__label__MiscellaneousDirective
 It is imperative that the user manually synchronize on the returned bag when iterating over it:   Bag bag = BagUtils.synchronizedBag(new HashBag());  ...  synchronized(bag) {      Iterator i = bag.iterator(); // Must be in synchronized block      while (i.hasNext())          foo(i.next());      }  }	__label__MiscellaneousDirective
 @return a negative value on failure; zero if acquisition in shared mode succeeded but no subsequent shared-mode acquire can succeed; and a positive value if acquisition in shared mode succeeded and subsequent shared-mode acquires might also succeed, in which case a subsequent waiting thread must check availability.	__label__MiscellaneousDirective
 Note that this class is not synchronized. If multiple threads access a ProcessBuilder instance concurrently, and at least one of the threads modifies one of the attributes structurally, it must be synchronized externally.	__label__MiscellaneousDirective
 Note that MultiKeyMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. This class may throw exceptions when accessed by concurrent threads without synchronization.	__label__MiscellaneousDirective
 Note that LazySortedMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. T	__label__MiscellaneousDirective
 Note that LRUMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization.	__label__MiscellaneousDirective
 If multiple threads access a tree set concurrently, and at least one of the threads modifies the set, it must be synchronized externally.	__label__MiscellaneousDirective
 A multi-threaded application should either allocate multiple packer engines, or else serialize use of one engine with a lock.	__label__MiscellaneousDirective
 Note that passing in an invalid id results in unspecified behavior.	__label__MiscellaneousDirective
 The ability to interrupt a lock acquisition in some implementations may not be possible, and if possible may be an expensive operation. The programmer should be aware that this may be the case.	__label__MiscellaneousDirective
 This may be executed on any thread.	__label__MiscellaneousDirective
 Memory consistency effects: As with other concurrent collections, actions in a thread prior to placing an object into a { ConcurrentMap} as a key or value happen-before actions subsequent to the access or removal of that object from the { ConcurrentMap} in another thread.	__label__MiscellaneousDirective
 Clients may also call this method to persist the bounds at times other than closing the dialog.	__label__MiscellaneousDirective
 This is important because classes should not be subclassed unless the programmer intends on modifying or enhancing the fundamental behavior of the class.	__label__MiscellaneousDirective
 If it is critical to obtain every active thread in this thread group, the caller should verify that the returned int value is strictly less than the length of list.	__label__MiscellaneousDirective
 If it is critical to obtain every active subgroup in this thread group, the caller should verify that the returned int value is strictly less than the length of list.	__label__MiscellaneousDirective
 Callers should re-check the conditions which caused the thread to park in the first place.	__label__MiscellaneousDirective
 Callers should re-check the conditions which caused the thread to park in the first place	__label__MiscellaneousDirective
 Collection classes should clearly specify in their documentation any restrictions on what elements may be added.	__label__MiscellaneousDirective
 Implementations should allow a value to be looked up from a key and a key to be looked up from a value with equal performance.	__label__MiscellaneousDirective
 Valuable data should not be stored at this node as it is shared by all programs that use it.	__label__MiscellaneousDirective
 Compilers must ignore any warning names they do not recognize.	__label__MiscellaneousDirective
 It is strongly recommended that each Driver class should be small and standalone so that the Driver class can be loaded and queried without bringing in vast quantities of supporting code.	__label__MiscellaneousDirective
 Beware that, unlike in most collections, the size method is not a constant-time operation. Because of the asynchronous nature of these sets, determining the current number of elements requires a traversal of the elements.	__label__MiscellaneousDirective
 Beware that, unlike in most collections, this method is NOT a constant-time operation. Because of the asynchronous nature of these sets, determining the current number of elements requires traversing them all to count the	__label__MiscellaneousDirective
 Sets a new selection for this viewer and optionally makes it visible. The TableViewer implementation of this method is inefficient for the ILazyContentProvider as lookup is done by indices rather than elements and may require population of the entire table in worse case.  Use Table#setSelection(int[] indices) and Table#showSelection() if you wish to set selection more efficiently when using a ILazyContentProvider.	__label__MiscellaneousDirective
 It is strongly recommended that a cancel option be provided, so that the user has the option of making the decision at a later point in time.	__label__MiscellaneousDirective
 Note: The object returned from this method may be an instance of an implementation-specific class. The RemoteObject class ensures serialization portability of its instances' remote references through the behavior of its custom writeObject and readObject methods. An instance of RemoteRef should not be serialized outside of its RemoteObject wrapper instance or the result may be unportable.	__label__MiscellaneousDirective
acquires lock free time invocation	__label__nonDir
return array containing element collection	__label__nonDir
scanning visitor program element default behavior appropriate release_6 source version	__label__nonDir
provides user-defined exception badkind bound thrown method class typecode	__label__nonDir
set password used create database connection rowset object given string object	__label__nonDir
please refer omg specification detail	__label__nonDir
embedded bitmap data	__label__nonDir
feature supported package include selection/highlighting editing style key mapping	__label__nonDir
implementation combined view/controller	__label__nonDir
annotation type java.lang.annotation.repeatable used indicate annotation type whose declaration meta annotates repeatable	__label__nonDir
contains minor code give detailed information caused exception completion status	__label__nonDir
parameter c collection collection checked containment collection return boolean true collection contains element specified collection	__label__nonDir
flip next card specified container	__label__nonDir
detail see thread swing section java tutorial	__label__nonDir
implicitactivationpolicyvalue ha following semantics	__label__nonDir
class used opaque representation cryptographic parameter	__label__nonDir
creates toolkit implementation checkboxmenuitem using specified peer interface	__label__nonDir
putting label parallel group along horizontal axis position x location	__label__nonDir
multiplexing ui used combine textuis	__label__nonDir
kind element	__label__nonDir
represents runtime exception thrown agent performing operation mbeans	__label__nonDir
framework allows client framework locate run compiler program	__label__nonDir
cause cachedrowset implementation fetch previous page-size row populate rowset	__label__nonDir
constant f8 function key	__label__nonDir
information class description provided assist programmer converting java program new event model	__label__nonDir
mlet added classloaderrepository	__label__nonDir
gridbaglayoutinfo utility class gridbaglayout layout manager	__label__nonDir
indicates glyph represents combining character umlaut	__label__nonDir
annotation used indicate latest source version annotation processor support	__label__nonDir
information helper file see generated file helper file	__label__nonDir
indicates cross_join supported joinrowset implementation	__label__nonDir
holder doubleseq	__label__nonDir
helper unknownuserexception	__label__nonDir
compare imagegraphicattribute specified object	__label__nonDir
set value designated parameter given object	__label__nonDir
description copied interface annotatedelement	__label__nonDir
window_state_changed event return new state window	__label__nonDir
return true queue contains specified element	__label__nonDir
family yxy color space	__label__nonDir
holder octetseq	__label__nonDir
package allows application store retrieve user system preference configuration data	__label__nonDir
description copied class abstractbutton	__label__nonDir
creates new atomicreference given initial value	__label__nonDir
path represent directory library commonly referred jar zip library many platform	__label__nonDir
subclass object may override definition	__label__nonDir
information holder file see generated file holder file	__label__nonDir
factory object generates preference object	__label__nonDir
interface support creation new file annotation processor	__label__nonDir
return copy duration specified duration subtracted	__label__nonDir
also provides clipboard mechanism object temporarily hold transferable object transferred within application	__label__nonDir
container holder exception used request operation make exception available client	__label__nonDir
set designated parameter array object java programming language	__label__nonDir
revers configuration wa done specified component installui	__label__nonDir
get parent component	__label__nonDir
exception indicates internal failure orb example orb ha detected corruption internal data structure	__label__nonDir
description copied class number	__label__nonDir
return transaction isolation property rowset object connection	__label__nonDir
set designated parameter given java.sql.date object	__label__nonDir
description copied class abstractborder	__label__nonDir
ease-of-use constant getalignmentx	__label__nonDir
provides class interface producing rendering-independent image	__label__nonDir
provides open data type open mbean descriptor class	__label__nonDir
creates new event passed selectionlisteners	__label__nonDir
return collection object containing rowset object added joinrowset object	__label__nonDir
provides class interface supporting server side rmi	__label__nonDir
choice class present pop-up menu choice	__label__nonDir
return sql-like description clause used joinrowset object	__label__nonDir
alias iso_c4	__label__nonDir
constant inscriptional pahlavi unicode character block	__label__nonDir
temporalamount represents amount time may date-based time-based factory extract duration	__label__nonDir
class specifies de key	__label__nonDir
provides event fired swing component	__label__nonDir
check implementing date-time add/subtract unit	__label__nonDir
urldatasource class provides object wrap url object datasource interface	__label__nonDir
constant f15 function key	__label__nonDir
construct textevent object	__label__nonDir
true glyph absorbs remaining shrinkage lower priority level shrink	__label__nonDir
window closing event	__label__nonDir
construct new jtextarea given document model default argument null	__label__nonDir
information holder file see generated file holder file	__label__nonDir
stub policy	__label__nonDir
class used prevent unauthorized access logging stream associated drivermanager may contain information table name column data	__label__nonDir
org/omg/cosnaming/namingcontextpackage/cannotproceedhelper.java	__label__nonDir
get current value position	__label__nonDir
get current value held field given object managed updater	__label__nonDir
org/omg/corba/longlongseqholder.java generated idl-to-java compiler portable version streams.idl may o'clock gmt+00:00	__label__nonDir
return baseline offset text relative baseline text	__label__nonDir
get application applet eventqueue instance	__label__nonDir
class used generate native system input event purpose test automation self-running demo application control mouse keyboard needed	__label__nonDir
return jtree created hashtable doe display root	__label__nonDir
holder class corba object reference value type org.omg.corba.object	__label__nonDir
add listener registered mbean	__label__nonDir
set descriptor full replace	__label__nonDir
provides class color space	__label__nonDir
generated annotation used mark source code ha generated	__label__nonDir
provides class networking application	__label__nonDir
return table array byte specified tag	__label__nonDir
set designated parameter reader object	__label__nonDir
creates new jtextpane specified document model	__label__nonDir
justify line full requested width	__label__nonDir
provides interface class capture processing playback sampled audio data	__label__nonDir
creates new empty map initial table size based given number element initialcapacity initial table density loadfactor	__label__nonDir
set designated parameter java.sql.nclob object	__label__nonDir
get accessiblecontext associated component	__label__nonDir
queue concurrentlinkedqueue class supply efficient scalable thread-safe non-blocking fifo queue	__label__nonDir
provides java class defining performing operation object related two-dimensional geometry	__label__nonDir
map javabean property map wildcard attribute	__label__nonDir
appends given text end document	__label__nonDir
org/omg/portableinterceptor/user_exception.java	__label__nonDir
character glyph mapping	__label__nonDir
signal error occurred attempting connect socket remote address port	__label__nonDir
org/omg/corba/namevaluepairhelper.java generated idl-to-java compiler portable version june o'clock gmt+00:00	__label__nonDir
see rmisocketfactory information	__label__nonDir
note detail focus subsystem see use focus subsystem section java tutorial focus specification information	__label__nonDir
return location key originated key event	__label__nonDir
window iconified event	__label__nonDir
return set method element	__label__nonDir
shape described pathiterator object express outline shape well rule determining outline divide plane interior exterior point	__label__nonDir
package specification input method framework specification input method client api reference related documentation overview tutorial example guide tool documentation please see input method framework overview input method client api tutorial	__label__nonDir
return boolean whether cursor pointing last entry	__label__nonDir
return red component range default srgb space	__label__nonDir
creates new atomicinteger given initial value	__label__nonDir
return window title inactive foreground color current theme	__label__nonDir
management interface thread system java virtual machine	__label__nonDir
represents primitive type	__label__nonDir
basic look feel provides default behavior used many look feel package	__label__nonDir
mouse exited event	__label__nonDir
used xmlschematype.type signal type inferred signature property	__label__nonDir
implement characteriterator.getbeginindex string	__label__nonDir
multi-buffering useful rendering performance	__label__nonDir
weak reference object prevent referent made finalizable finalized reclaimed	__label__nonDir
package defines apis soap message handler	__label__nonDir
void class non-instantiable class hold reference class object representing type void	__label__nonDir
set designated parameter given blob object java programming language	__label__nonDir
set rectangle representing area need repainted response event	__label__nonDir
provides class reading writing jar java archive file format based standard zip file format optional manifest file	__label__nonDir
request standard optional ligature	__label__nonDir
appends separator default size end tool bar	__label__nonDir
attribute associated pkcs12 keystore entry	__label__nonDir
color red	__label__nonDir
card layout store string key-value pair used random access particular card	__label__nonDir
package defines apis specific soap binding	__label__nonDir
thrown indicate preference operation could complete failure backing store failure contact backing store	__label__nonDir
provides class interface producing rendering-independent image	__label__nonDir
org/omg/corba/fieldnamehelper.java generated idl-to-java compiler portable version june o'clock gmt+00:00	__label__nonDir
get droptarget associated component	__label__nonDir
interface pbe key	__label__nonDir
org/omg/portableinterceptor/non_existent.java	__label__nonDir
glyph variation	__label__nonDir
identifies malayalam range decimal base	__label__nonDir
get display name field requested locale	__label__nonDir
allows mbean perform operation need unregistered mbean server	__label__nonDir
holder current	__label__nonDir
constant khmer symbol unicode character block	__label__nonDir
represents object name mbean pattern match name several mbeans	__label__nonDir
org.omg.corba.object interface root inheritance hierarchy corba object reference java programming language analogous java.rmi.remote rmi remote object	__label__nonDir
grouplayout layoutmanager hierarchically group component order position container	__label__nonDir
may also contain string describing exception	__label__nonDir
store bound component return value rv return rv	__label__nonDir
lifespanpolicy specifies lifespan object implemented created poa	__label__nonDir
creates new atomicstampedreference given initial value	__label__nonDir
return set package element	__label__nonDir
cardlayout defines set method allow application flip card sequentially show specified card	__label__nonDir
enumeration parameter mode parameter	__label__nonDir
read character array	__label__nonDir
class centralizes security property common security method	__label__nonDir
creates toolkit implementation scrollbar using specified peer interface	__label__nonDir
constant define public member valuemember class	__label__nonDir
protected do-nothing constructor use subclass	__label__nonDir
ease-of-use constant getalignmenty	__label__nonDir
visit annotation_type type element calling defaultaction	__label__nonDir
cvt preprogram	__label__nonDir
return user text font current theme	__label__nonDir
add listener treewillexpand event	__label__nonDir
return array property change listener registered toolkit	__label__nonDir
set designated column match column rowset object	__label__nonDir
control whether layout container validated dynamically resizing statically resizing complete	__label__nonDir
skeletal visitor program element default behavior appropriate release_7 source version	__label__nonDir
supply interface service provider implement offering new midi device midi file reader writer sound bank reader	__label__nonDir
reset stream	__label__nonDir
add specified component card layout internal table name	__label__nonDir
idl struct corba module store information corba service available orb implementation obtained orb.get_service_information method	__label__nonDir
package also contains event listener interface bean added removed bean context	__label__nonDir
provides definition monitor class	__label__nonDir
information holder file see generated file holder file	__label__nonDir
alias iso_c8	__label__nonDir
generated idl-to-java compiler portable version src/share/classes/org/omg/portableinterceptor/iop.idl monday january pm pst	__label__nonDir
return new breakiterator instance character break given locale	__label__nonDir
deprecated	__label__nonDir
org/omg/corba/doubleseqholder.java generated idl-to-java compiler portable version streams.idl may o'clock gmt+00:00	__label__nonDir
org/omg/corba/longseqhelper.java generated idl-to-java compiler portable version streams.idl may o'clock gmt+00:00 class definition ha modified conform following omg specification orb core defined corba formal/99-10-07 idl/java language mapping defined ptc/00-01-08	__label__nonDir
documentation unicodeblock provides canonical name	__label__nonDir
extends class java.util.zip.zipoutputstream support writing optional manifest entry	__label__nonDir
return enum constant type specified name	__label__nonDir
org/omg/corba/definitionkindhelper.java generated idl-to-java compiler portable version ir.idl june o'clock gmt+00:00	__label__nonDir
object represents orb service service_detail_type field contains type orb service service_detail field contains description orb service	__label__nonDir
return type window	__label__nonDir
phantom reference object enqueued collector determines referent may otherwise reclaimed	__label__nonDir
description copied class abstractborder	__label__nonDir
applet context application responsible loading running applet	__label__nonDir
