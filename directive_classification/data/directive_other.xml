<?xml version='1.0' encoding='UTF-8'?>
<!--
This is the dataset of the exploratory case study described in:
What Should Developers Be Aware Of? An Empirical Study on the Directives of API Documentation, Springer, 2011
You can freely use it as long as you cite the paper, the bibliographic record can be found at:
http://dx.doi.org/10.1007/s10664-011-9186-4

NOTES
** The IDs in containing-api-elements refer to the ids used in dataset.xml.
** The text of the directives can not be matched character by character in
   the raw javadoc because formatting information (e.g., HTML tags, newlines, etc.)
   is removed.
   Furthermore certain directives are composed of different sentence fragments.
** Each directive has been manually selected and classified.
   Text selection is error prone, and classification is sometimes subjective.
   Please read the corresponding discussion in the paper.
** This dataset also contains a small number of directives that are in the JDK,
   but not in the 10 packages mentioned in the paper (for instance in java.awt).
   Those directives were found in the early days of this work by serendipidity.

-->
<dataset>

<group name="Alternative Directive">
<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/ContentViewer/setInput/Object">
<![CDATA[Subclassers are advised to override inputChanged rather than this method]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/OwnerDrawLabelProvider/initialize/ColumnViewer;ViewerColumn">
<![CDATA[Subclasses should either call the super implementation or, alternatively, {@link #initialize(ColumnViewer, ViewerColumn, boolean)}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/dialogs/ErrorDialog/createDialogArea/Composite">
<![CDATA[Subclasses that require a different dialog area may either override this method, or call the super implementation and add controls to the created composite. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/awt/Canvas/update/Graphics">
<![CDATA[applications that override this method should either call super.update(g) or incorporate the functionality described]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/awt/Component/update/Graphics">
<![CDATA[Subclasses of Component that override this method should either call super.update(g), or call paint(g) directly from their update method. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/security/PrivilegedAction">
<![CDATA[This interface is used only for computations that do not throw checked exceptions; computations that throw checked exceptions must use PrivilegedExceptionAction instead.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/PreparedStatement/execute/">
<![CDATA[You must call either the method getResultSet or getUpdateCount to retrieve the result]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/awt/KeyboardFocusManager/redispatchEvent/Component;AWTEvent">
<![CDATA[Client implementations of dispatchEvent and client-defined KeyEventDispatchers must call redispatchEvent(target, e) instead of target.dispatchEvent(e) to dispatch an event. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/math/BigDecimal/divide/BigDecimal;int;int">
<![CDATA[The new {@link #divide(BigDecimal, int, RoundingMode)} method should be used in preference to this legacy method.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/math/BigDecimal/divide/BigDecimal;int">
<![CDATA[The new {@link #divide(BigDecimal, RoundingMode)} method should be used in preference to this legacy method.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/math/BigDecimal">
<![CDATA[Using the integer fields in this class (such as {@link #ROUND_HALF_UP}) to represent rounding mode is largely obsolete; the enumeration values of the { RoundingMode} { enum}, (such as {@link RoundingMode#HALF_UP}) should be used instead. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/math/BigDecimal/setScale/int;int">
<![CDATA[The new {@link #setScale(int, RoundingMode)} method should be used in preference to this legacy method.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/math/BigDecimal/BigDecimal/double">
<![CDATA[When a { double} must be used as a source for a { BigDecimal}, note that this constructor provides an exact conversion; it does not give the same result as converting the { double} to a { String} using the {@link Double#toString(double)} method and then using the {@link #BigDecimal(String)} constructor. To get that result, use the { static} {@link #valueOf(double)} method. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/bindings/keys/formatting/AbstractKeyFormatter">
<![CDATA[It is recommended that implementations of IKeyFormatter subclass from here, rather than implementing IKeyFormatter directly.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/dialogs/TrayDialog">
<![CDATA[It is recommended to subclass this class instead of Dialog in all cases except where the dialog should never show a tray.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/net/ContentHandler">
<![CDATA[An application does not generally call the getContent method in this class directly. Instead, an application calls the getContent method in class URL or in URLConnection.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/ViewerSorter">
<![CDATA[It is recommended to use ViewerComparator instead. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/action/ToolBarContributionItem/setCurrentHeight/int">
<![CDATA[Update(SIZE) should be called to adjust the widget.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/action/ToolBarContributionItem/setCurrentWidth/int">
<![CDATA[Update(SIZE) should be called to adjust the widget.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/action/ControlContribution/fill/Composite">
<![CDATA[ Subclasses must implement createControl rather than overriding this method.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/action/ControlContribution/fill/ToolBar;int">
<![CDATA[Subclasses must implement createControl rather than overriding this method.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/bindings/BindingManager/setBindings/Binding[]">
<![CDATA[This method clears the existing bindings, but does not trigger a recomputation (other method calls are required to do that).]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/dialogs/MessageDialog/createDialogArea/Composite">
<![CDATA[Subclasses should override createCustomArea to add contents below the message.
]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/dialogs/Dialog/createContents/Composite">
<![CDATA[Overriding createDialogArea and createButtonBar are recommended rather than overriding this method. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/action/IAction">
<![CDATA[Clients should subclass the abstract base class Action to define concrete actions rather than implementing IAction from scratch. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/action/Action/run/">
<![CDATA[Subclasses should override this method if they do not need information from the triggering event, or override runWithEvent(Event) if they do.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/dialogs/PopupDialog/createTitleMenuArea/Composite">
<![CDATA[Subclasses typically need not override this method, but instead should use the constructor parameters showDialogMenu and showPersistAction to indicate whether a menu should be shown, and createTitleControl to to customize the presentation of the title. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/dialogs/PopupDialog/getDefaultSize/">
<![CDATA[Subclasses should override this method when an alternate default size is desired, rather than overriding {@link #getInitialSize()}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/dialogs/PopupDialog/getDefaultLocation/Point">
<![CDATA[Subclasses should override this method when an alternate default location is desired, rather than overriding {@link #getInitialLocation(Point)}]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/IInformationControl">
<![CDATA[Clients can implement this interface and its extension interfaces, subclass {@link AbstractInformationControl}, or use the (text-based) default implementation {@link DefaultInformationControl}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/DefaultAutoIndentStrategy">
<![CDATA[@deprecated since 3.1 use {@link org.eclipse.jface.text.DefaultIndentLineAutoEditStrategy} instead]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/AbstractInformationControl/setInformation/String">
<![CDATA[Subclasses must either override this method or implement {@link IInformationControlExtension2}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/net/DatagramSocket/setReceiveBufferSize/int">
<![CDATA[Because SO_RCVBUF is a hint, applications that want to verify what size the buffers were set to should call {@link #getReceiveBufferSize()}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/net/DatagramSocket/setSendBufferSize/int">
<![CDATA[As SO_SNDBUF is a hint, applications that want to verify what size the buffer is should call {@link #getSendBufferSize()}.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/net/Socket/setReceiveBufferSize/int">
<![CDATA[Because SO_RCVBUF is a hint, applications that want to verify what size the buffers were set to should call {@link #getReceiveBufferSize()}.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/rmi/RMISecurityManager">
<![CDATA[ Therefore an RMI application should use the SecurityManager class or another application-specific SecurityManager implementation instead of this class. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/rmi/activation/Activatable/exportObject/Remote;String;MarshalledObject;boolean;int">
<![CDATA[Instead, an application should register an activation descriptor and export a remote object separately, so that exceptions can be handled properly. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/rmi/activation/Activatable/Activatable/String;MarshalledObject;boolean;int">
<![CDATA[ Instead, an application should register an activation descriptor and export a remote object separately, so that exceptions can be handled properly. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/rmi/activation/Activatable/Activatable/String;MarshalledObject;boolean;int;RMIClientSocketFactory;RMIServerSocketFactory">
<![CDATA[ Instead, an application should register an activation descriptor and export a remote object separately, so that exceptions can be handled properly. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/rmi/activation/Activatable/exportObject/Remote;String;MarshalledObject;boolean;int;RMIClientSocketFactory;RMIServerSocketFactory">
<![CDATA[ Instead, an application should register an activation descriptor and export a remote object separately, so that exceptions can be handled properly. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/io/File/deleteOnExit/">
<![CDATA[ Note: this method should not be used for file-locking, as the resulting protocol cannot be made to work reliably. The {@link java.nio.channels.FileLock FileLock} facility should be used instead.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/io/Writer/lock">
<![CDATA[ A subclass should therefore use the object in this field rather than this or a synchronized method.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/io/Reader/lock">
<![CDATA[A subclass should therefore use the object in this field rather than this or a synchronized method.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/io/File/createNewFile/">
<![CDATA[ Note: this method should not be used for file-locking, as the resulting protocol cannot be made to work reliably. The {@link java.nio.channels.FileLock FileLock} facility should be used instead. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/io/ByteArrayOutputStream/toString/">
<![CDATA[The {@linkplain java.nio.charset.CharsetDecoder} class should be used when more control over the decoding process is required.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/io/PrintStream">
<![CDATA[ The {@link PrintWriter} class should be used in situations that require writing characters rather than bytes.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/io/ByteArrayOutputStream/toString/String">
<![CDATA[The {@link java.nio.charset.CharsetDecoder} class should be used when more control over the decoding process is required. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/io/OutputStreamWriter">
<![CDATA[. The {@linkplain java.nio.charset.CharsetEncoder} class should be used when more control over the encoding process is required.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/io/Console">
<![CDATA[Security note: If an application needs to read a password or other secure data, it should use {@link #readPassword()} or {@link #readPassword(String, Object...)} and manually zero the returned character array after processing to minimize the lifetime of sensitive data in memory. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/window/Window/getShellStyle/">
<![CDATA[ Subclassers should call setShellStyle to change this value, rather than overriding this method.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/EditingSupport/initializeCellEditorValue/CellEditor;ViewerCell">
<![CDATA[Standard customers should not overwrite this method but {@link #getValue(Object)}]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/EditingSupport/saveCellEditorValue/CellEditor;ViewerCell">
<![CDATA[Standard customers should not overwrite this method but {@link #setValue(Object, Object)} ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/ColumnViewerToolTipSupport/createToolTipContentArea/Event;Composite">
<![CDATA[ Instead of overwriting this method subclasses should overwrite {@link #createViewerToolTipContentArea(Event, ViewerCell, Composite)} ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/InheritableThreadLocal">
<![CDATA[Inheritable thread-local variables are used in preference to ordinary thread-local variables when the per-thread-attribute being maintained in the variable (e.g., User ID, Transaction ID) must be automatically transmitted to any child threads that are created.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/security/Policy/getPermissions/CodeSource">
<![CDATA[Applications should solely rely on the implies method to perform policy checks.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/security/Policy/getPermissions/CodeSource">
<![CDATA[If an application absolutely must call a getPermissions method, it should call getPermissions(ProtectionDomain). ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/security/cert/PKIXParameters">
<![CDATA[An application can call {@link #PKIXParameters(Set) PKIXParameters(Set)}, specifying a Set of TrustAnchor objects, each of which identify a most-trusted CA. Alternatively, an application can call {@link #PKIXParameters(KeyStore) PKIXParameters(KeyStore)}, specifying a KeyStore instance containing trusted certificate entries, each of which will be considered as a most-trusted CA. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/text/DateFormatSymbols/getZoneStrings/">
<![CDATA[Use of this method is discouraged; use {@link java.util.TimeZone#getDisplayName() TimeZone.getDisplayName()} instead]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/security/cert/CertPath/CertPath/String">
<![CDATA[This constructor is protected because most users should use a CertificateFactory to create CertPaths.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/security/cert/X509CertSelector/setSubject/String">
<![CDATA[Denigrated, use {@linkplain #setSubject(X500Principal)} or {@linkplain #setSubject(byte[])} instead. This method should not be relied on as it can fail to match some certificates because of a loss of encoding information in the RFC 2253 String form of some distinguished names. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/security/PrivilegedExceptionAction">
<![CDATA[ This interface is used only for computations that throw checked exceptions; computations that do not throw checked exceptions should use PrivilegedAction instead. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/security/cert/X509Certificate/getSubjectDN/">
<![CDATA[Denigrated, replaced by {@linkplain #getSubjectX500Principal()}. This method returns the subject as an implementation specific Principal object, which should not be relied upon by portable code.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/security/cert/X509CertSelector/getIssuerAsString/">
<![CDATA[Denigrated, use {@linkplain #getIssuer()} or {@linkplain #getIssuerAsBytes()} instead. This method should not be relied on as it can fail to match some certificates because of a loss of encoding information in the RFC 2253 String form of some distinguished names. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/security/cert/X509CertSelector/getSubjectAsString/">
<![CDATA[ Denigrated, use {@linkplain #getSubject()} or {@linkplain #getSubjectAsBytes()} instead. This method should not be relied on as it can fail to match some certificates because of a loss of encoding information in the RFC 2253 String form of some distinguished names. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/security/cert/X509CertSelector/addSubjectAlternativeName/int;String">
<![CDATA[No standard string format is defined for otherNames, X.400 names, EDI party names, IPv6 address names, or any other type of names. They should be specified using the {@link #addSubjectAlternativeName(int type, byte [] name) addSubjectAlternativeName(int type, byte [] name)} method.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/security/cert/X509CertSelector/addPathToName/int;String">
<![CDATA[No standard string format is defined for otherNames, X.400 names, EDI party names, IPv6 address names, or any other type of names. They should be specified using the {@link #addPathToName(int type, byte [] name) addPathToName(int type, byte [] name)} method.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/security/cert/X509CertSelector/addPathToName/int;String">
<![CDATA[for distinguished names, use {@linkplain #addPathToName(int, byte[])} instead. This method should not be relied on as it can fail to match some certificates because of a loss of encoding information in the RFC 2253 String form of some distinguished names. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/security/cert/X509Certificate/getIssuerDN/">
<![CDATA[Denigrated, replaced by {@linkplain #getIssuerX500Principal()}. This method returns the issuer as an implementation specific Principal object, which should not be relied upon by portable code.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/security/cert/X509CRLSelector/addIssuerName/String">
<![CDATA[Denigrated, use {@linkplain #addIssuer(X500Principal)} or {@linkplain #addIssuerName(byte[])} instead. This method should not be relied on as it can fail to match some CRLs because of a loss of encoding information in the RFC 2253 String form of some distinguished names. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/security/cert/X509CRL/getIssuerDN/">
<![CDATA[Denigrated, replaced by {@linkplain #getIssuerX500Principal()}. This method returns the issuer as an implementation specific Principal object, which should not be relied upon by portable code.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/security/cert/CertStoreSpi">
<![CDATA[ In general, instances of this class should only be accessed through the CertStore class. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/DriverManager/getLogWriter/">
<![CDATA[The getLogWriter and setLogWriter methods should be used instead of the get/setlogStream methods, which are deprecated.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/DatabaseMetaData/sqlStateSQL99">
<![CDATA[This constant remains only for compatibility reasons. Developers should use the constant sqlStateSQL instead. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/PreparedStatement">
<![CDATA[If arbitrary parameter type conversions are required, the method setObject should be used with a target SQL type. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/PreparedStatement/setObject/int;Object">
<![CDATA[Not all databases allow for a non-typed Null to be sent to the backend. For maximum portability, the setNull or the setObject(int parameterIndex, Object x, int sqlType) method should be used instead of setObject(int parameterIndex, Object x). ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/CallableStatement/setObject/String;Object">
<![CDATA[Not all databases allow for a non-typed Null to be sent to the backend. For maximum portability, the setNull or the setObject(String parameterName, Object x, int sqlType) method should be used instead of setObject(String parameterName, Object x). ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/Connection">
<![CDATA[When configuring a Connection, JDBC applications should use the appropritate Connection method such as setAutoCommit or setTransactionIsolation. Applications should not invoke SQL commands directly to change the connection's configuration when there is a JDBC method available. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/deferred/IConcurrentModel">
<![CDATA[Clients should subclass AbstractConcurrentModel instead. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/StructuredViewer/getSelection/">
<![CDATA[Subclasses do not typically override this method, but implement getSelectionFromWidget(List) instead. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/StructuredViewer/getItem/int;int">
<![CDATA[Viewers who are not subclasses of {@link ColumnViewer} should consider using a widget relative implementation like {@link ColumnViewer#getItemAt(org.eclipse.swt.graphics.Point)}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/StructuredViewer/setSelectionToWidget/ISelection;boolean">
<![CDATA[Subclasses do not typically override this method, but implement setSelectionToWidget(List, boolean) instead. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/String/getBytes/">
<![CDATA[The {@link java.nio.charset.CharsetEncoder} class should be used when more control over the encoding process is required.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/Short/valueOf/short">
<![CDATA[If a new Short instance is not required, this method should generally be used in preference to the constructor {@link #Short(short)}, as this method is likely to yield significantly better space and time performance by caching frequently requested values.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/Long/valueOf/long">
<![CDATA[If a new Long instance is not required, this method should generally be used in preference to the constructor {@link #Long(long)}, as this method is likely to yield significantly better space and time performance by caching frequently requested values.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/Integer/valueOf/int">
<![CDATA[If a new Integer instance is not required, this method should generally be used in preference to the constructor {@link #Integer(int)}, as this method is likely to yield significantly better space and time performance by caching frequently requested values.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/Float/valueOf/float">
<![CDATA[If a new Float instance is not required, this method should generally be used in preference to the constructor {@link #Float(float)}, as this method is likely to yield significantly better space and time performance by caching frequently requested values.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/Enum/name/">
<![CDATA[Most programmers should use the {@link #toString} method in preference to this one, as the toString method may return a more user-friendly name. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/Double/valueOf/double">
<![CDATA[If a new Double instance is not required, this method should generally be used in preference to the constructor {@link #Double(double)}, as this method is likely to yield significantly better space and time performance by caching frequently requested values.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/Character/valueOf/char">
<![CDATA[If a new Character instance is not required, this method should generally be used in preference to the constructor {@link #Character(char)}, as this method is likely to yield significantly better space and time performance by caching frequently requested values. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/Byte/valueOf/byte">
<![CDATA[If a new Byte instance is not required, this method should generally be used in preference to the constructor {@link #Byte(byte)}, as this method is likely to yield significantly better space and time performance by caching frequently requested values.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/Runnable">
<![CDATA[In most cases, the Runnable interface should be used if you are only planning to override the run() method and no other Thread methods. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/String/getBytes/String">
<![CDATA[The {@link java.nio.charset.CharsetEncoder} class should be used when more control over the encoding process is required.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/String/getBytes/Charset">
<![CDATA[The {@link java.nio.charset.CharsetEncoder} class should be used when more control over the encoding process is required. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/String/String/byte[];Charset">
<![CDATA[The {@link java.nio.charset.CharsetDecoder} class should be used when more control over the decoding process is required.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/String/String/byte[]">
<![CDATA[The {@link java.nio.charset.CharsetDecoder} class should be used when more control over the decoding process is required.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/Boolean/valueOf/boolean">
<![CDATA[If a new Boolean instance is not required, this method should generally be used in preference to the constructor {@link #Boolean(boolean)}, as this method is likely to yield significantly better space and time performance.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/ThreadGroup/enumerate/Thread[]">
<![CDATA[An application might use the activeCount method to get an estimate of how big the array should be, ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/ThreadGroup/enumerate/Thread[];boolean">
<![CDATA[An application might use the activeCount method to get an estimate of how big the array should be]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/ITextViewer">
<![CDATA[In order to provide backward compatibility for clients of ITextViewer, extension interfaces are used as a means of evolution. The following extension interfaces exist:

    * {@link org.eclipse.jface.text.ITextViewerExtension} since version 2.0 replacing the event consumer mechanism and introducing the concept of rewrite targets and means to manage the viewer's redraw behavior
    * {@link org.eclipse.jface.text.ITextViewerExtension2}since version 2.1 adding a way to invalidate a viewer's presentation and setters for hovers.
    * {@link org.eclipse.jface.text.ITextViewerExtension3} since version 2.1 which itself was replaced by {@link org.eclipse.jface.text.ITextViewerExtension5} in version 3.0
    * {@link org.eclipse.jface.text.ITextViewerExtension4} since version 3.0 introducing focus handling for widget token keepers and the concept of text presentation listeners.
    * {@link org.eclipse.jface.text.ITextViewerExtension5} since version 3.0 extending the visible region concept with explicit handling and conversion of widget and model coordinates.
    * {@link org.eclipse.jface.text.ITextViewerExtension6} since version 3.1 extending the text viewer with the ability to detect hyperlinks and access the undo manager.
    * {@link org.eclipse.jface.text.ITextViewerExtension7} since version 3.3 extending the text viewer with the ability to install tabs to spaces conversion.
    * {@link org.eclipse.jface.text.ITextViewerExtension8} since version 3.4 extending the text viewer with the ability to print and rich hover support.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/ITextViewer">
<![CDATA[Clients may use the standard implementation {@link org.eclipse.jface.text.TextViewer}.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/ThreadGroup/enumerate/ThreadGroup[]">
<![CDATA[An application might use the activeGroupCount method to get an estimate of how big the array should be, however if the array is too short to hold all the thread groups, the extra thread groups are silently ignored.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/ThreadGroup/enumerate/ThreadGroup[];boolean">
<![CDATA[An application might use the activeGroupCount method to get an estimate of how big the array should be, however if the array is too short to hold all the thread groups, the extra thread groups are silently ignored.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/String/String/byte[];int;int;String">
<![CDATA[The {@link java.nio.charset.CharsetDecoder} class should be used when more control over the decoding process is required. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/String/String/byte[];int;int;Charset">
<![CDATA[The {@link java.nio.charset.CharsetDecoder} class should be used when more control over the decoding process is required.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/String/String/byte[];String">
<![CDATA[The {@link java.nio.charset.CharsetDecoder} class should be used when more control over the decoding process is required.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/String/String/byte[];int;int">
<![CDATA[The {@link java.nio.charset.CharsetDecoder} class should be used when more control over the decoding process is required.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/TextViewer/deleteText/">
<![CDATA[@deprecated use StyledText.invokeAction instead]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/templates/TemplateProposal/apply/IDocument">
<![CDATA[This method is no longer called by the framework and clients should overwrite {@link #apply(ITextViewer, char, int, int)} instead ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/templates/TemplateProposal/apply/IDocument;char;int">
<![CDATA[This method is no longer called by the framework and clients should overwrite {@link #apply(ITextViewer, char, int, int)} instead ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/dialogs/PopupDialog/createContents/Composite">
<![CDATA[Overriding createDialogArea and (optionally) createTitleMenuArea and createTitleMenuArea are recommended rather than overriding this method. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/AbstractInformationControl/createContent/Composite">
<![CDATA[Implementors must either use the dialog font or override {@link #computeSizeConstraints(int, int)}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/FocusCellHighlighter/focusCellChanged/ViewerCell;ViewerCell">
<![CDATA[Subclasses should override this method rather than {@link #focusCellChanged(ViewerCell)}]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/Class/getModifiers/">
<![CDATA[. The modifiers consist of the Java Virtual Machine's constants for public, protected, private, final, static, abstract and interface; they should be decoded using the methods of class Modifier. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/Character/toLowerCase/char">
<![CDATA[In general, {@link java.lang.String#toLowerCase()} should be used to map characters to lowercase. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/Character/toLowerCase/int">
<![CDATA[In general, {@link java.lang.String#toLowerCase()} should be used to map characters to lowercase. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/Character/toUpperCase/char">
<![CDATA[In general, {@link java.lang.String#toUpperCase()} should be used to map characters to uppercase.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/Character/toUpperCase/int">
<![CDATA[]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/management/ThreadMXBean/findMonitorDeadlockedThreads/">
<![CDATA[To find deadlocks involving both object monitors and ownable synchronizers, the {@link #findDeadlockedThreads findDeadlockedThreads} method should be used.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/Class/getFields/">
<![CDATA[User code should use the methods of class Array to manipulate arrays. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/Character/toUpperCase/int">
<![CDATA[In general, {@link java.lang.String#toUpperCase()} should be used to map characters to uppercase.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/instrument/Instrumentation/redefineClasses/ClassDefinition[]">
<![CDATA[ Where the existing class file bytes are to be transformed (for example in bytecode instrumentation) {@link #retransformClasses retransformClasses} should be used. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/StringBuffer">
<![CDATA[. The StringBuilder class should generally be used in preference to this one, as it supports all of the same operations but it is faster, as it performs no synchronization. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/SecurityManager">
<![CDATA[Sometimes a security check that should be made within a given context will actually need to be done from within a different context (for example, from within a worker thread). The {@link SecurityManager#getSecurityContext getSecurityContext} method and the {@link SecurityManager#checkPermission(java.security.Permission, java.lang.Object) checkPermission} method that includes a context argument are provided for this situation.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/internal/text/link/contentassist/ContentAssistant2/enableColoredLabels/boolean">
<![CDATA[Completion proposals can implement {@link ICompletionProposalExtension6} to provide colored proposal labels.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/contentassist/ContentAssistant/enableColoredLabels/boolean">
<![CDATA[Completion proposals can implement {@link ICompletionProposalExtension6} to provide colored proposal labels.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/formatter/IContentFormatter">
<![CDATA[By default, clients use ContentFormatter or MultiPassContentFormatter as the standard implementers of this interface.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/util/ListenerList">
<![CDATA[Please use {@link org.eclipse.core.runtime.ListenerList} instead.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/util/ListenerList">
<![CDATA[Also note that the equivalent of {@link #ListenerList()} is actually {@link org.eclipse.core.runtime.ListenerList#ListenerList(int)} with {@link org.eclipse.core.runtime.ListenerList#IDENTITY} as the argument. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/TreeViewer">
<![CDATA[Content providers for tree viewers must implement either the {@link ITreeContentProvider} interface, (as of 3.2) the {@link ILazyTreeContentProvider} interface, or (as of 3.3) the {@link ILazyTreePathContentProvider}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/TableViewer">
<![CDATA[Label providers for table viewers must implement either the ITableLabelProvider or the ILabelProvider interface (see TableViewer.setLabelProvider for more details). ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/TableTreeViewer">
<![CDATA[ Label providers for table tree viewers must implement either the ITableLabelProvider or the ILabelProvider interface (see TableTreeViewer.setLabelProvider for more details). ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/iterators/ObjectArrayListIterator/set/Object">
<![CDATA[Since this implementation does not support add() or remove(), set() may be called as often as desired.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/iterators/ArrayListIterator/set/Object">
<![CDATA[Since this implementation does not support add() or remove(), set() may be called as often as desired. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/list/SetUniqueList">
<![CDATA[The {@link org.apache.commons.collections.set.ListOrderedSet ListOrderedSet} class provides an alternative approach, by wrapping an existing Set and retaining insertion order in the iterator. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/map/ListOrderedMap/asList/">
<![CDATA[An alternative to this method is to use the better named {@link #keyList()} or {@link #keySet()}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/map/HashedMap">
<![CDATA[A Map implementation that is a general purpose alternative to HashMap.

This implementation improves on the JDK1.4 HashMap by adding the {@link org.apache.commons.collections.MapIterator MapIterator} functionality and many methods for subclassing. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/map/LinkedMap/asList/">
<![CDATA[An alternative to this method is to use {@link #keySet()}.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/MapUtils/putAll/Map;Object[]">
<![CDATA[This method is an alternative to the {@link java.util.Map#putAll(java.util.Map)} method and constructors. It allows you to build a map from an object array of various possible styles. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/map/Flat3Map">
<![CDATA[This map is designed for performance and can outstrip HashMap. It also has good garbage collection characteristics.

    * Optimised for operation at size 3 or less.
    * Still works well once size 3 exceeded.
    * Gets at size 3 or less are about 0-10% faster than HashMap,
    * Puts at size 3 or less are over 4 times faster than HashMap.
    * Performance 5% slower than HashMap once size 3 exceeded once. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/map/FixedSizeMap">
<![CDATA[The simplest approach is to wrap this map using {@link java.util.Collections#synchronizedMap(Map)}.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/map/PredicatedSortedMap">
<![CDATA[Note that PredicatedSortedMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. The simplest approach is to wrap this map using {@link java.util.Collections#synchronizedSortedMap}.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/map/TransformedMap">
<![CDATA[Note that TransformedMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. The simplest approach is to wrap this map using {@link java.util.Collections#synchronizedMap(Map)}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/map/LazyMap">
<![CDATA[Note that LazyMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. The simplest approach is to wrap this map using {@link java.util.Collections#synchronizedMap(Map)}.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/map/FixedSizeSortedMap">
<![CDATA[Note that FixedSizeSortedMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. The simplest approach is to wrap this map using {@link java.util.Collections#synchronizedSortedMap}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/map/ReferenceIdentityMap">
<![CDATA[Note that ReferenceIdentityMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. The simplest approach is to wrap this map using {@link java.util.Collections#synchronizedMap}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/map/TransformedSortedMap">
<![CDATA[Note that TransformedSortedMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. The simplest approach is to wrap this map using {@link java.util.Collections#synchronizedSortedMap}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/map/LazySortedMap">
<![CDATA[Note that LazySortedMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. The simplest approach is to wrap this map using {@link java.util.Collections#synchronizedSortedMap}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/map/ReferenceMap">
<![CDATA[Note that ReferenceMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. The simplest approach is to wrap this map using {@link java.util.Collections#synchronizedMap}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/map/HashedMap">
<![CDATA[Note that HashedMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. The simplest approach is to wrap this map using {@link java.util.Collections#synchronizedMap(Map)}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/map/CaseInsensitiveMap">
<![CDATA[Note that CaseInsensitiveMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. The simplest approach is to wrap this map using {@link java.util.Collections#synchronizedMap(Map)}.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/map/IdentityMap">
<![CDATA[Note that IdentityMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. The simplest approach is to wrap this map using {@link java.util.Collections#synchronizedMap(Map)}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/map/ListOrderedMap">
<![CDATA[Note that ListOrderedMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. The simplest approach is to wrap this map using {@link java.util.Collections#synchronizedMap(Map)}.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/map/Flat3Map">
<![CDATA[Note that Flat3Map is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. The simplest approach is to wrap this map using {@link java.util.Collections#synchronizedMap(Map)}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/map/LinkedMap">
<![CDATA[Note that LinkedMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. The simplest approach is to wrap this map using {@link java.util.Collections#synchronizedMap(Map)}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/map/PredicatedMap">
<![CDATA[Note that PredicatedMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. The simplest approach is to wrap this map using {@link java.util.Collections#synchronizedMap(Map)}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/map/CompositeMap">
<![CDATA[Note that CompositeMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. The simplest approach is to wrap this map using {@link java.util.Collections#synchronizedMap(Map)}.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/map/LRUMap">
<![CDATA[Note that LRUMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. The simplest approach is to wrap this map using {@link java.util.Collections#synchronizedMap(Map)}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/splitmap/TransformedMap">
<![CDATA[Note that TransformedMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. The simplest approach is to wrap this map using {@link java.util.Collections#synchronizedMap(Map)}.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/map/Flat3Map">
<![CDATA[slow]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/list/TreeList">
<![CDATA[This list implementation utilises a tree structure internally to ensure that all insertions and removals are O(log n). This provides much faster performance than both an ArrayList and a LinkedList where elements are inserted and removed repeatedly from anywhere in the list. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/list/TreeList">
<![CDATA[ArrayList is a good general purpose list implementation. It is faster than TreeList for most operations except inserting and removing in the middle of the list. ArrayList also uses less memory as TreeList uses one object per entry.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/iterators/ArrayIterator">
<![CDATA[If you know that you have an object array, the {@link org.apache.commons.collections.iterators.ObjectArrayIterator ObjectArrayIterator} class is a better choice, as it will perform better. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/iterators/ArrayListIterator">
<![CDATA[If you know that you have an object array, the {@link ObjectArrayListIterator} class is a better choice, as it will perform better. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/iterators/IteratorChain">
<![CDATA[Under many circumstances, linking Iterators together in this manner is more efficient (and convenient) than reading out the contents of each Iterator into a List and creating a new Iterator. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/iterators/ObjectGraphIterator">
<![CDATA[Under many circumstances, linking Iterators together in this manner is more efficient (and convenient) than using nested for loops to extract a list.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/MapIterator">
<![CDATA[This iterator is a special version designed for maps. It can be more efficient to use this rather than an entry set iterator where the option is available, and it is certainly more convenient. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/IterableGet/mapIterator/">
<![CDATA[A map iterator is an efficient way of iterating over maps. There is no need to access the entry set or use Map Entry objects. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/IterableMap">
<![CDATA[A map iterator is an efficient way of iterating over maps. There is no need to access the entry set or use Map Entry objects. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/IteratorUtils/objectGraphIterator/Object;Transformer">
<![CDATA[Under many circumstances, linking Iterators together in this manner is more efficient (and convenient) than using nested for loops to extract a list.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/Locale">
<![CDATA[Because a Locale object is just an identifier for a region, no validity check is performed when you construct a Locale. If you want to see whether particular resources are available for the Locale you construct, you must query those resources. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/buffer/BoundedFifoBuffer">
<![CDATA[The following can be used to provide synchronized access to your BoundedFifoBuffer:

   Buffer fifo = BufferUtils.synchronizedBuffer(new BoundedFifoBuffer());
]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/buffer/CircularFifoBuffer">
<![CDATA[The following can be used to provide synchronized access to your CircularFifoBuffer:

   Buffer fifo = BufferUtils.synchronizedBuffer(new CircularFifoBuffer());
]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/MapUtils/safeAddToMap/Map;Object;Object">
<![CDATA[Note that this method can be used to circumvent the map's value type at runtime.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/map/MultiKeyMap">
<![CDATA[Note that IdentityMap and ReferenceIdentityMap are unsuitable for use as the key comparison would work on the whole MultiKey, not the elements within. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/buffer/PriorityBuffer">
<![CDATA[Use {@link org.apache.commons.collections.BufferUtils#synchronizedBuffer(Buffer)} or {@link org.apache.commons.collections.buffer.SynchronizedBuffer#decorate(Buffer)} to provide synchronized access to a PriorityBuffer: ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/map/ReferenceIdentityMap">
<![CDATA[. You can use {@link java.util.Collections#synchronizedMap} to provide synchronized access to a ReferenceIdentityMap.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/IteratorUtils/emptyIterator/">
<![CDATA[WARNING: This method is binary incompatible with Commons Collections 2.1 and 2.1.1. Use EmptyIterator.INSTANCE for compatability with Commons Collections 2.1.1.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/IteratorUtils/emptyListIterator/">
<![CDATA[WARNING: This method is binary incompatible with Commons Collections 2.1 and 2.1.1. Use EmptyListIterator.INSTANCE for compatability with Commons Collections 2.1.1.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/IteratorUtils/singletonIterator/Object">
<![CDATA[WARNING: This method is binary incompatible with Commons Collections 2.1 and 2.1.1. Use new SingletonIterator(object) for compatability. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/IteratorUtils/arrayIterator/Object[]">
<![CDATA[WARNING: This method is binary incompatible with Commons Collections 2.1 and 2.1.1. Use new ArrayIterator(array) for compatability.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/IteratorUtils/arrayIterator/Object[];int">
<![CDATA[WARNING: This method is binary incompatible with Commons Collections 2.1 and 2.1.1. Use new ArrayIterator(array,start) for compatability.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/IteratorUtils/arrayIterator/Object[];int;int">
<![CDATA[WARNING: This method is binary incompatible with Commons Collections 2.1 and 2.1.1. Use new ArrayIterator(array,start,end) for compatability. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/IteratorUtils/EMPTY_ITERATOR">
<![CDATA[WARNING: This constant is binary incompatible with Commons Collections 2.1 and 2.1.1. Use EmptyIterator.INSTANCE for compatability with Commons Collections 2.1.1.
]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/IteratorUtils/EMPTY_LIST_ITERATOR">
<![CDATA[WARNING: This constant is binary incompatible with Commons Collections 2.1 and 2.1.1. Use EmptyListIterator.INSTANCE for compatability with Commons Collections 2.1.1.
]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/list/CursorableLinkedList/Cursor/close/">
<![CDATA[In previous versions of this class, it was mandatory to close all cursor objects to avoid memory leaks. It is no longer necessary to call this close method; an instance of this class can now be treated exactly like a normal iterator.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/map/AbstractLinkedMap/LinkEntry">
<![CDATA[If you subclass AbstractLinkedMap but not LinkEntry then you will not be able to access the protected fields. The entryXxx() methods on AbstractLinkedMap exist to provide the necessary access.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/map/AbstractHashedMap/HashEntry">
<![CDATA[If you subclass AbstractHashedMap but not HashEntry then you will not be able to access the protected fields. The entryXxx() methods on AbstractHashedMap exist to provide the necessary access. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/map/MultiValueMap">
<![CDATA[In addition, this implementation allows the type of collection used for the values to be controlled. By default, an ArrayList is used, however a Class to instantiate may be specified, or a factory that returns a Collection instance. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/iterators/ArrayIterator/setArray/Object">
<![CDATA[Although this can be used to reset iteration, the {@link #reset()} method is a more effective choice. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/MultiMap/remove/Object;Object">
<![CDATA[ If the last value for a key is removed, implementations typically return null from a subsequant get(Object), however they may choose to return an empty collection.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/MultiMap/get/Object">
<![CDATA[ Implementations typically return null if no values have been mapped to the key, however the implementation may choose to return an empty collection. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/MultiMap/get/Object">
<![CDATA[@return the Collection of values, implementations should return null for no mapping, but may return an empty collection]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/MultiMap/remove/Object">
<![CDATA[Implementations typically return null from a subsequant get(Object), however they may choose to return an empty collection.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/MultiMap/remove/Object">
<![CDATA[@return the Collection of values removed, implementations should return null for no mapping found, but may return an empty collection]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/AbstractSequentialList">
<![CDATA[ For random access data (such as an array), AbstractList should be used in preference to this class.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/EnumSet">
<![CDATA[Like most collection implementations, EnumSet is not synchronized. If multiple threads access an enum set concurrently, and at least one of the threads modifies the set, it should be synchronized externally. This is typically accomplished by synchronizing on some object that naturally encapsulates the enum set. If no such object exists, the set should be "wrapped" using the {@link Collections#synchronizedSet} method. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/TreeSet">
<![CDATA[ If multiple threads access a tree set concurrently, and at least one of the threads modifies the set, it must be synchronized externally. This is typically accomplished by synchronizing on some object that naturally encapsulates the set. If no such object exists, the set should be "wrapped" using the {@link Collections#synchronizedSortedSet Collections.synchronizedSortedSet} method. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/buffer/BoundedBuffer">
<![CDATA[Note: This class should only be used if you need to add bounded behaviour to another buffer. If you just want a bounded buffer then you should use {@link BoundedFifoBuffer} or {@link CircularFifoBuffer}]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/presentation/IPresentationReconciler">
<![CDATA[The following extension interface exists:

    {@link org.eclipse.jface.text.presentation.IPresentationReconcilerExtension} since version 3.0 adding support for documents with multiple partitionings. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/source/IVerticalRulerInfo">
<![CDATA[The following extension interfaces exist:

    {@link org.eclipse.jface.text.source.IVerticalRulerInfoExtension} since version 3.0 allowing custom annotation hovers and specific annotation models. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/IUndoManager">
<![CDATA[The following extension interfaces exist:

    {@link org.eclipse.jface.text.IUndoManagerExtension} since version 3.1 introducing access to the undo context.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/revisions/IRevisionRulerColumn">
<![CDATA[The following extension interfaces exist:

    {@link IRevisionRulerColumnExtension} since version 3.3 allowing to register a selection listener on revisions and a configurable rendering mode. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/source/IVerticalRuler">
<![CDATA[The following extension interfaces exist:

    {@link org.eclipse.jface.text.source.IVerticalRulerExtension} since version 2.0 introducing setters for font and mouse button activity location.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/source/ISourceViewer">
<![CDATA[The following extension interfaces exist:

    {@link org.eclipse.jface.text.source.ISourceViewerExtension} since version 2.1 introducing the concept of an annotation overview.
    {@link org.eclipse.jface.text.source.ISourceViewerExtension2} since version 3.0 allowing source viewers to roll back a previously performed configuration and allows access to the viewer's visual annotation model.
    {@link org.eclipse.jface.text.source.ISourceViewerExtension3} since version 3.2 introducing the concept of a quick assist assistant and providing access to the quick assist invocation context as well as the current annotation hover.
    {@link org.eclipse.jface.text.source.ISourceViewerExtension4} since version 3.4 introducing API to access a minimal set of content assistant APIs.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/IWidgetTokenKeeper">
<![CDATA[The following extension interfaces exist:

    {@link org.eclipse.jface.text.IWidgetTokenKeeperExtension} since version 3.0 introducing priorities when requesting a widget token and thus replacing the non-prioritized scheme. It also allows a client to force a widget token keeper to accept focus.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/ITextOperationTarget">
<![CDATA[The following extension interfaces exist:

    {@link org.eclipse.jface.text.ITextOperationTargetExtension} since version 2.0 introducing text operation enabling/disabling.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/ITextViewer/setAutoIndentStrategy/IAutoIndentStrategy;String">
<![CDATA[This method has been replaced by {@link ITextViewerExtension2#prependAutoEditStrategy(IAutoEditStrategy, String)} and {@link ITextViewerExtension2#removeAutoEditStrategy(IAutoEditStrategy, String)}.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/ITextViewer/setTextHover/ITextHover;String">
<![CDATA[This method has been replaced by {@link ITextViewerExtension2#setTextHover(ITextHover, String, int)}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/templates/persistence/TemplateStore">
<![CDATA[In order to load templates contributed using the org.eclipse.ui.editors.templates extension point, use a ContributionTemplateStore.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/IWidgetTokenOwner">
<![CDATA[The following extension interfaces exist:

    {@link org.eclipse.jface.text.IWidgetTokenOwnerExtension} since version 3.0 introducing priorities when requesting a widget token and thus replacing the non-prioritized scheme.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/IInformationControlCreator">
<![CDATA[The following extension interfaces exist:

    {@link org.eclipse.jface.text.IInformationControlCreatorExtension} since version 3.0 introducing checks of whether existing information control can be reused and whether information control creators can replace each other. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/ArrayStack/empty/">
<![CDATA[. New users of this class should use isEmpty instead.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/list/AbstractLinkedList/LinkedListIterator/current">
<![CDATA[ Should be accessed through {@link #getLastNodeReturned()} to enforce this behaviour. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/management/ManagementPermission">
<![CDATA[Programmers do not normally create ManagementPermission objects directly. Instead they are created by the security policy code based on reading the security policy file.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/functors/AllPredicate/getInstance/Collection">
<![CDATA[Use {@link #allPredicateinstead ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/StringBuilder">
<![CDATA[Instances of StringBuilder are not safe for use by multiple threads. If such synchronization is required then it is recommended that {@link java.lang.StringBuffer} be used. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/Boolean/Boolean/boolean">
<![CDATA[Unless a new instance is required, the static factory {@link #valueOf(boolean)} is generally a better choice.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/PreparedStatement/setObject/int;Object;int;int">
<![CDATA[If the object has a custom mapping (is of a class implementing the interface SQLData), the JDBC driver should call the method SQLData.writeSQL to write it to the SQL data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, or Array, the driver should pass it to the database as a value of the corresponding SQL type.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/CallableStatement/setObject/String;Object;int;int">
<![CDATA[If the object has a custom mapping (is of a class implementing the interface SQLData), the JDBC driver should call the method SQLData.writeSQL to write it to the SQL data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, or Array, the driver should pass it to the database as a value of the corresponding SQL type.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/CallableStatement/setObject/String;Object">
<![CDATA[ If the object is of a class implementing the interface SQLData, the JDBC driver should call the method SQLData.writeSQL to write it to the SQL data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, or Array, the driver should pass it to the database as a value of the corresponding SQL type.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/logging/MemoryHandler/flush/">
<![CDATA[ Note that the current contents of the MemoryHandler buffer are not written out. That requires a "push". ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/regex/Matcher/lookingAt/">
<![CDATA[Like the {@link #matches matches} method, this method always starts at the beginning of the region; unlike that method, it does not require that the entire region be matched. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/io/BufferedWriter">
<![CDATA[ Unless prompt output is required, it is advisable to wrap a BufferedWriter around any Writer whose write() operations may be costly, such as FileWriters and OutputStreamWriters.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/net/InetAddress/getHostName/">
<![CDATA[ If a lookup of the name service is required, call {@link #getCanonicalHostName() getCanonicalHostName}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/Closure">
<![CDATA[Standard implementations of common closures are provided by {@link ClosureUtils}. These include method invokation and for/while loops.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/Predicate">
<![CDATA[Standard implementations of common predicates are provided by {@link PredicateUtils}. These include true, false, instanceof, equals, and, or, not, method invokation and null testing.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/TreeMap">
<![CDATA[ If no such object exists, the map should be "wrapped" using the {@link Collections#synchronizedSortedMap Collections.synchronizedSortedMap} method.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/ArrayList">
<![CDATA[If no such object exists, the list should be "wrapped" using the {@link Collections#synchronizedList Collections.synchronizedList} method.  ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/concurrent/CountDownLatch">
<![CDATA[When threads must repeatedly count down in this way, instead use a {@link CyclicBarrier}.  ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/prefs/Preferences/addNodeChangeListener/NodeChangeListener">
<![CDATA[ Events are not generated when indirect descendants of this node are added or removed; a caller desiring such events must register with each descendant. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/AbstractQueue">
<![CDATA[ If these requirements cannot be met, consider instead subclassing {@link AbstractCollection}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/concurrent/ThreadPoolExecutor">
<![CDATA[If you would like to ensure that unreferenced pools are reclaimed even if users forget to call {@link ThreadPoolExecutor#shutdown}, then you must arrange that unused threads eventually die, by setting appropriate keep-alive times, using a lower bound of zero core threads and/or setting {@link ThreadPoolExecutor#allowCoreThreadTimeOut(boolean)}.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/contentassist/ICompletionProposal/getAdditionalProposalInfo/">
<![CDATA[If {@link ICompletionProposalExtension5} is implemented, this method should not be called any longer.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/security/AlgorithmParameterGeneratorSpi">
<![CDATA[In case the client does not explicitly initialize the AlgorithmParameterGenerator (via a call to an engineInit method), each provider must supply (and document) a default initialization. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/security/AlgorithmParameterGenerator">
<![CDATA[In case the client does not explicitly initialize the AlgorithmParameterGenerator (via a call to an init method), each provider must supply (and document) a default initialization.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/security/KeyPairGenerator">
<![CDATA[In case the client does not explicitly initialize the KeyPairGenerator (via a call to an initialize method), each provider must supply (and document) a default initialization.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/resource/ResourceManager/createImage/ImageDescriptor">
<![CDATA[ Images allocated in this manner must be disposed by {@link #destroyImage(ImageDescriptor)}, and never by calling {@link Image#dispose()}.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/resource/ResourceManager/createColor/RGB">
<![CDATA[ Any color allocated in this manner must be disposed by calling {@link #destroyColor(RGB)}, or by an eventual call to {@link #dispose()}. {@link Color#dispose()} must never been called directly on the returned color.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/CallableStatement/setAsciiStream/String;InputStream;int">
<![CDATA[When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/TreeSelection/EMPTY">
<![CDATA[ This selection should be used instead of null. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/ILabelDecorator/decorateImage/Image;Object">
<![CDATA[Clients should handle labelProviderChangedEvents for the given element to get the complete decoration.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/set/CompositeSet">
<![CDATA[Add operations require the use of a pluggable strategy. If no strategy is provided then add is unsupported. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/collection/CompositeCollection">
<![CDATA[Add and remove operations require the use of a pluggable strategy. If no strategy is provided then add and remove are unsupported.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/formatter">
<![CDATA[These formatting strategies are required to handle the position updating of the document. To facilitate the work with these text edit based formatting strategies, a default implementation called ContextBasedFormattingStrategy is provided. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/action/IAction/setAccelerator/int">
<![CDATA[This method should no longer be used for actions in the Eclipse workbench. IWorkbenchCommandSupport and IWorkbenchContextSupport provide all the functionality required for key bindings.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/dialogs/Dialog/convertVerticalDLUsToPixels/FontMetrics;int">
<![CDATA[The required FontMetrics parameter may be created in the following way: GC gc = new GC(control); gc.setFont(control.getFont()); fontMetrics = gc.getFontMetrics(); gc.dispose(); ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/dialogs/Dialog/convertHorizontalDLUsToPixels/FontMetrics;int">
<![CDATA[ The required FontMetrics parameter may be created in the following way: GC gc = new GC(control); gc.setFont(control.getFont()); fontMetrics = gc.getFontMetrics(); gc.dispose(); ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/dialogs/Dialog/convertWidthInCharsToPixels/FontMetrics;int">
<![CDATA[ The required FontMetrics parameter may be created in the following way: GC gc = new GC(control); gc.setFont(control.getFont()); fontMetrics = gc.getFontMetrics(); gc.dispose(); ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/dialogs/Dialog/convertHeightInCharsToPixels/FontMetrics;int">
<![CDATA[ The required FontMetrics parameter may be created in the following way: GC gc = new GC(control); gc.setFont(control.getFont()); fontMetrics = gc.getFontMetrics(); gc.dispose(); ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/StructuredViewer/update/Object;String[]">
<![CDATA[Specifying which properties are affected may allow the viewer to optimize the update. For example, if the label provider is not affected by changes to any of these properties, an update may not actually be required.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/ITreeSelection">
<![CDATA[It is recommended that clients do not implement this interface but instead use the standard implementation of this interface, {@link TreeSelection}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/ColumnPixelData/addTrim">
<![CDATA[The default is false for backwards compatibility, but the recommended practice is to specify true, and specify the desired width for the content of the column, rather than adding a fudge factor to the specified width.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/StructuredViewer/setSorter/ViewerSorter">
<![CDATA[ It is recommended to use setComparator() instead. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/StructuredViewer/getSorter/">
<![CDATA[ It is recommended to use getComparator() instead. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/preference/PreferenceConverter/getFontData/IPreferenceStore;String">
<![CDATA[It is recommended that getFontDataArray is used instead.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/window/ApplicationWindow/getSymbolicFontName/">
<![CDATA[This is not recommended and is included for backwards compatability. It is recommended to use the default font provided by SWT (that is, do not set the font).]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/CheckboxTreeViewer/setAllChecked/boolean">
<![CDATA[@deprecated as this method only checks or unchecks visible items is is recommended that {@link #setSubtreeChecked(Object, boolean)} is used instead.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/CheckboxTableViewer/CheckboxTableViewer/Composite;int">
<![CDATA[If the caller adds its own columns, uses Table.setHeadersVisible(true), or needs to handle dynamic resizing of the table, it is recommended to create the Table itself, specifying the SWT.CHECK style bit (along with any other style bits needed), and use new CheckboxTableViewer(Table) rather than this constructor. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/preference/PreferenceConverter/getDefaultFontData/IPreferenceStore;String">
<![CDATA[This method is provided for backwards compatibility. It is recommended that getDefaultFontDataArray is used instead.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/SecurityManager/inCheck">
<![CDATA[@deprecated This type of security checking is not recommended. It is recommended that the checkPermission call be used instead.
]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/math/BigDecimal/BigDecimal/double;MathContext">
<![CDATA[The results of this constructor can be somewhat unpredictable and its use is generally not recommended; see the notes under the {@link #BigDecimal(double)} constructor. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/SecurityManager/currentLoadedClass/">
<![CDATA[This type of security checking is not recommended. It is recommended that the checkPermission call be used instead.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/math/BigInteger/BigInteger/int;int;Random">
<![CDATA[It is recommended that the {@link #probablePrime probablePrime} method be used in preference to this constructor unless there is a compelling need to specify a certainty.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/SecurityManager/classDepth/String">
<![CDATA[@deprecated This type of security checking is not recommended. It is recommended that the checkPermission call be used instead. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/SecurityManager/inClass/String">
<![CDATA[ @deprecated This type of security checking is not recommended. It is recommended that the checkPermission call be used instead. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/SecurityManager/classLoaderDepth/">
<![CDATA[@deprecated This type of security checking is not recommended. It is recommended that the checkPermission call be used instead.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/SecurityManager/inClassLoader/">
<![CDATA[ @deprecated This type of security checking is not recommended. It is recommended that the checkPermission call be used instead.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/SecurityManager/currentClassLoader/">
<![CDATA[@deprecated This type of security checking is not recommended. It is recommended that the checkPermission call be used instead.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/io/File/toURL/">
<![CDATA[@deprecated This method does not automatically escape characters that are illegal in URLs. It is recommended that new code convert an abstract pathname into a URL by first converting it into a URI, via the {@link #toURI() toURI} method, and then converting the URI into a URL via the {@link java.net.URI#toURL() URI.toURL} method. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/StringTokenizer">
<![CDATA[StringTokenizer is a legacy class that is retained for compatibility reasons although its use is discouraged in new code. It is recommended that anyone seeking this functionality use the split method of String or the java.util.regex package instead. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/EnumSet/of/Enum;Enum;Enum;Enum;Enum">
<![CDATA[Overloadings of this method exist to initialize an enum set with one through five elements. A sixth overloading is provided that uses the varargs feature. This overloading may be used to create an enum set initially containing an arbitrary number of elements, but is likely to run slower than the overloadings that do not use varargs.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/EnumSet/of/Enum;Enum;Enum">
<![CDATA[Overloadings of this method exist to initialize an enum set with one through five elements. A sixth overloading is provided that uses the varargs feature. This overloading may be used to create an enum set initially containing an arbitrary number of elements, but is likely to run slower than the overloadings that do not use varargs.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/annotation/Annotation/hashCode/">
<![CDATA[The hash code of an array member-value is computed by calling the appropriate overloading of {@link java.util.Arrays#hashCode(long[]) Arrays.hashCode} on the value. (There is one overloading for each primitive type, and one for object reference types.) ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/EnumSet/of/Enum;Enum;Enum;Enum">
<![CDATA[ Overloadings of this method exist to initialize an enum set with one through five elements. A sixth overloading is provided that uses the varargs feature. This overloading may be used to create an enum set initially containing an arbitrary number of elements, but is likely to run slower than the overloadings that do not use varargs. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/EnumSet/of/Enum;Enum">
<![CDATA[ Overloadings of this method exist to initialize an enum set with one through five elements. A sixth overloading is provided that uses the varargs feature. This overloading may be used to create an enum set initially containing an arbitrary number of elements, but is likely to run slower than the overloadings that do not use varargs.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/EnumSet/of/Enum;Enum[]">
<![CDATA[This factory, whose parameter list uses the varargs feature, may be used to create an enum set initially containing an arbitrary number of elements, but it is likely to run slower than the overloadings that do not use varargs.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/EnumSet/of/Enum">
<![CDATA[Overloadings of this method exist to initialize an enum set with one through five elements. A sixth overloading is provided that uses the varargs feature. This overloading may be used to create an enum set initially containing an arbitrary number of elements, but is likely to run slower than the overloadings that do not use varargs.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/ResultSet/updateNCharacterStream/int;Reader">
<![CDATA[Consult your JDBC driver documentation to determine if it might be more efficient to use a version of updateNCharacterStream which takes a length parameter.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/ResultSet/updateAsciiStream/String;InputStream">
<![CDATA[Consult your JDBC driver documentation to determine if it might be more efficient to use a version of updateAsciiStream which takes a length parameter.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/CallableStatement/setBinaryStream/String;InputStream">
<![CDATA[Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setBinaryStream which takes a length parameter.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/PreparedStatement/setNCharacterStream/int;Reader">
<![CDATA[ Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setNCharacterStream which takes a length parameter.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/ResultSet/updateCharacterStream/String;Reader">
<![CDATA[Consult your JDBC driver documentation to determine if it might be more efficient to use a version of updateCharacterStream which takes a length parameter.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/regex/Pattern/matches/String;CharSequence">
<![CDATA[ If a pattern is to be used multiple times, compiling it once and reusing it will be more efficient than invoking this method each time. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/ResultSet/updateBinaryStream/int;InputStream">
<![CDATA[Consult your JDBC driver documentation to determine if it might be more efficient to use a version of updateBinaryStream which takes a length parameter.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/ResultSet/updateAsciiStream/int;InputStream">
<![CDATA[Consult your JDBC driver documentation to determine if it might be more efficient to use a version of updateAsciiStream which takes a length parameter.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/ResultSet/updateBlob/int;InputStream">
<![CDATA[Consult your JDBC driver documentation to determine if it might be more efficient to use a version of updateBlob which takes a length parameter.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/jar/Pack200/Unpacker/unpack/InputStream;JarOutputStream">
<![CDATA[ It may be more efficient to read the Pack200 archive to a file and pass the File object, using the alternate method described below. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/ResultSet/updateBinaryStream/String;InputStream">
<![CDATA[Consult your JDBC driver documentation to determine if it might be more efficient to use a version of updateBinaryStream which takes a length parameter.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/ResultSet/updateClob/String;Reader">
<![CDATA[Consult your JDBC driver documentation to determine if it might be more efficient to use a version of updateClob which takes a length parameter.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/PreparedStatement/setCharacterStream/int;Reader">
<![CDATA[Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setCharacterStream which takes a length parameter.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/CallableStatement/setAsciiStream/String;InputStream">
<![CDATA[Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setAsciiStream which takes a length parameter.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/ResultSet/updateBlob/String;InputStream">
<![CDATA[Consult your JDBC driver documentation to determine if it might be more efficient to use a version of updateBlob which takes a length parameter.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/ResultSet/updateNClob/int;Reader">
<![CDATA[Consult your JDBC driver documentation to determine if it might be more efficient to use a version of updateNClob which takes a length parameter.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/AbstractListViewer/add/Object">
<![CDATA[ Note that there is another method for efficiently processing the simultaneous addition of multiple elements. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/preference/IPreferenceStore/setValue/String;int">
<![CDATA[ Note that the preferred way of re-initializing a preference to its default value is to call setToDefault. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/AbstractTreeViewer/remove/Object">
<![CDATA[Note that there is another method for efficiently processing the simultaneous removal of multiple elements. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/source/IAnnotationAccessExtension/isPaintable/Annotation">
<![CDATA[ Note that this method is not used when drawing annotations on the editor's text widget. This is handled trough a {@link org.eclipse.jface.text.source.AnnotationPainter.IDrawingStrategy}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/functors/AllPredicate/getInstance/Predicate[]">
<![CDATA[@deprecated Use {@link #allPredicate(Predicate<? super T>...)} instead ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/security/SecureRandom/getSeed/int">
<![CDATA[This method is only included for backwards compatibility. The caller is encouraged to use one of the alternative getInstance methods to obtain a SecureRandom object, and then call the generateSeed method to obtain seed bytes from that object.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/ClassLoader/loadClass/String;boolean">
<![CDATA[ Subclasses of ClassLoader are encouraged to override {@link #findClass(String)}, rather than this method. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/text/DateFormatSymbols">
<![CDATA[Typically you shouldn't use DateFormatSymbols directly. Rather, you are encouraged to create a date-time formatter with the DateFormat class's factory methods: getTimeInstance, getDateInstance, or getDateTimeInstance.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/resource/ImageDescriptor/createWithFlags/ImageDescriptor;int">
<![CDATA[Clients are encouraged to supply their own disabled/grayed/etc. images rather than using a default image and transforming it. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/resource/ImageDescriptor/createImage/">
<![CDATA[Clients are encouraged to use create/destroyResource and downcast the result to Image rather than using createImage. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/comparators/ComparableComparator/getInstance/">
<![CDATA[Developers are encouraged to use the comparator returned from this method instead of constructing a new instance to reduce allocation and GC overhead when multiple comparable comparators may be used in the same VM.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/comparators/BooleanComparator/getTrueFirstComparator/">
<![CDATA[Clients are encouraged to use the value returned from this method instead of constructing a new instance to reduce allocation and garbage collection overhead when multiple BooleanComparators may be used in the same virtual machine.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/comparators/BooleanComparator/getFalseFirstComparator/">
<![CDATA[Clients are encouraged to use the value returned from this method instead of constructing a new instance to reduce allocation and garbage collection overhead when multiple BooleanComparators may be used in the same virtual machine.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/apache/commons/collections/comparators/BooleanComparator/getBooleanComparator/boolean">
<![CDATA[Clients are encouraged to use the value returned from this method instead of constructing a new instance to reduce allocation and garbage collection overhead when multiple BooleanComparators may be used in the same virtual machine. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/ILazyContentProvider/updateElement/int">
<![CDATA[NOTE #updateElement(int index) can be used to determine selection values. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/AbstractTableViewer/remove/Object">
<![CDATA[Note that there is another method for efficiently processing the simultaneous removal of multiple elements. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/AbstractTreeViewer/add/Object;Object">
<![CDATA[Note that there is another method for efficiently processing the simultaneous addition of multiple elements. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/math/BigDecimal/valueOf/long;int">
<![CDATA[This {@literal "static factory method"} is provided in preference to a ({ long}, { int}) constructor because it allows for reuse of frequently used { BigDecimal} values.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/concurrent/locks/LockSupport">
<![CDATA[The three forms of { park} each also support a { blocker} object parameter. This object is recorded while the thread is blocked to permit monitoring and diagnostic tools to identify the reasons that threads are blocked. (Such tools may access blockers using method {@link #getBlocker}.) The use of these forms rather than the original forms without this parameter is strongly encouraged. The normal argument to supply as a { blocker} within a lock implementation is { this}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/text/SimpleDateFormat">
<![CDATA[ SimpleDateFormat allows you to start by choosing any user-defined patterns for date-time formatting. However, you are encouraged to create a date-time formatter with either getTimeInstance, getDateInstance, or getDateTimeInstance in DateFormat. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/StructuredViewer/refresh/Object;boolean">
<![CDATA[If only the given element needs updating, it is more efficient to use the update methods. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/AbstractListViewer/remove/Object">
<![CDATA[. Note that there is another method for efficiently processing the simultaneous removal of multiple elements. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/regex/Pattern">
<![CDATA[The statement

     boolean b = Pattern.matches("a*b", "aaaaab");

is equivalent to the three statements above, though for repeated matches it is less efficient since it does not allow the compiled pattern to be reused. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/security/Policy">
<![CDATA[The default Policy implementation can be changed by setting the value of the "policy.provider" security property (in the Java security properties file) to the fully qualified name of the desired Policy subclass implementation. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/dialogs/ImageAndMessageArea/ImageAndMessageArea/Composite;int">
<![CDATA[ The style bit SWT.WRAP should be used if a larger message area is desired. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/concurrent/atomic/AtomicReferenceFieldUpdater/weakCompareAndSet/Object;Object;Object">
<![CDATA[May fail spuriously and does not provide ordering guarantees, so is only rarely an appropriate alternative to { compareAndSet}.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/concurrent/atomic/AtomicMarkableReference/weakCompareAndSet/Object;Object;boolean;boolean">
<![CDATA[May fail spuriously and does not provide ordering guarantees, so is only rarely an appropriate alternative to { compareAndSet}.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/concurrent/atomic/AtomicReferenceArray/weakCompareAndSet/int;Object;Object">
<![CDATA[May fail spuriously and does not provide ordering guarantees, so is only rarely an appropriate alternative to { compareAndSet}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/concurrent/atomic/AtomicLongArray/weakCompareAndSet/int;long;long">
<![CDATA[May fail spuriously and does not provide ordering guarantees, so is only rarely an appropriate alternative to { compareAndSet}.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/concurrent/ScheduledThreadPoolExecutor">
<![CDATA[However, this class provides alternative protected extension method decorateTask (one version each for Runnable and Callable) that can be used to customize the concrete task types used to execute commands entered via execute, submit, schedule, scheduleAtFixedRate, and scheduleWithFixedDelay.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/ColumnViewer/setCellEditors/CellEditor[]">
<![CDATA[Since 3.3, an alternative API is available, see {@link ViewerColumn#setEditingSupport(EditingSupport)} for a more flexible way of editing values in a column viewer. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/ColumnViewer/setColumnProperties/String[]">
<![CDATA[Since 3.3, an alternative API is available, see {@link ViewerColumn#setEditingSupport(EditingSupport)} for a more flexible way of editing values in a column viewer. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/ColumnViewer/isCellEditorActive/">
<![CDATA[Since 3.3, an alternative API is available, see {@link ViewerColumn#setEditingSupport(EditingSupport)} for a more flexible way of editing values in a column viewer. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/resource/ImageDescriptor">
<![CDATA[There are two ways to get an Image from an ImageDescriptor. The method createImage will always return a new Image which must be disposed by the caller. Alternatively, createResource() returns a shared Image.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/presentation/IPresentationRepairer">
<![CDATA[This interface may be implemented by clients. Alternatively, clients may use the rule-based default implementation {@link org.eclipse.jface.text.rules.DefaultDamagerRepairer}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/ColumnViewer/getColumnProperties/">
<![CDATA[Since 3.3, an alternative API is available, see {@link ViewerColumn#setEditingSupport(EditingSupport)} for a more flexible way of editing values in a column viewer. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/logging/Logger">
<![CDATA[ Logger names can be arbitrary strings, but they should normally be based on the package name or class name of the logged component, such as java.net or javax.swing. In addition it is possible to create "anonymous" Loggers that are not stored in the Logger namespace. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/regex/Pattern/CASE_INSENSITIVE">
<![CDATA[Unicode-aware case-insensitive matching can be enabled by specifying the {@link #UNICODE_CASE} flag in conjunction with this flag. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/reconciler/IReconciler">
<![CDATA[{@link org.eclipse.jface.text.reconciler.IReconcilerExtension} since version 3.0 introducing the ability to be aware of documents with multiple partitionings.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/ColumnViewer/getCellEditors/">
<![CDATA[Since 3.3, an alternative API is available, see {@link ViewerColumn#setEditingSupport(EditingSupport)} for a more flexible way of editing values in a column viewer. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/dialogs/Dialog/getImage/String">
<![CDATA[ Dialog does not use the following images in the registry DLG_IMG_ERROR DLG_IMG_INFO DLG_IMG_QUESTION DLG_IMG_WARNING They are now coming directly from SWT, see ImageRegistry. For backwards compatibility they are still supported, however new code should use SWT for these.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/source/IAnnotationAccess">
<![CDATA[The following extension interfaces exist:

    {@link org.eclipse.jface.text.source.IAnnotationAccessExtension} since version 3.0 replacing all methods in that interface
    {@link IAnnotationAccessExtension2} since version 3.2 allowing to set a quick assist assistant to an annotation access.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/ResourceBundle">
<![CDATA[You do not have to restrict yourself to using a single family of ResourceBundles. For example, you could have a set of bundles for exception messages, ExceptionResources (ExceptionResources_fr, ExceptionResources_de, ...), and one for widgets, WidgetResource (WidgetResources_fr, WidgetResources_de, ...); breaking up the resources however you like.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/io/File/getUsableSpace/">
<![CDATA[When possible, this method checks for write permissions and other operating system restrictions and will therefore usually provide a more accurate estimate of how much new data can actually be written than {@link #getFreeSpace}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/source/IAnnotationHover">
<![CDATA[The following extension interfaces exist:

    {@link org.eclipse.jface.text.source.IAnnotationHoverExtension} since version 3.0 allowing a text hover to provide a creator for the hover control. This allows for sophisticated hovers in a way that information computed by the hover can be displayed in the best possible form.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/ITextHover">
<![CDATA[ The following extension interfaces exist:

    {@link org.eclipse.jface.text.ITextHoverExtension} since version 3.0 allowing a text hover to provide a creator for the hover control. This allows for sophisticated hovers in a way that information computed by the hover can be displayed in the best possible form.
    {@link org.eclipse.jface.text.ITextHoverExtension2} since version 3.4 allowing a text hover to return hover-specific information objects.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/text/ITextViewerExtension2">
<![CDATA[It replaces {@link org.eclipse.jface.text.ITextViewer#setTextHover(ITextHover, String)} with a new method that allows to specify state masks for a better control of the hover behavior. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/text/Collator/getCollationKey/String">
<![CDATA[CollationKeys provide better performance than Collator.compare when Strings are involved in multiple comparisons.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/text/MessageFormat/setFormat/int;Format">
<![CDATA[Since the order of format elements in a pattern string often changes during localization, it is generally better to use the {@link #setFormatByArgumentIndex setFormatByArgumentIndex} method, which accesses format elements based on the argument index they specify. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/text/Collator">
<![CDATA[For comparing Strings exactly once, the compare method provides the best performance. When sorting a list of Strings however, it is generally necessary to compare each String multiple times. In this case, CollationKeys provide better performance. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/text/MessageFormat/setFormats/Format[]">
<![CDATA[Since the order of format elements in a pattern string often changes during localization, it is generally better to use the {@link #setFormatsByArgumentIndex setFormatsByArgumentIndex} method, which assumes an order of formats corresponding to the order of elements in the arguments array passed to the format methods or the result array returned by the parse methods.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/text/MessageFormat/getFormats/">
<![CDATA[ Since the order of format elements in a pattern string often changes during localization, it's generally better to use the {@link #getFormatsByArgumentIndex getFormatsByArgumentIndex} method, which assumes an order of formats corresponding to the order of elements in the arguments array passed to the format methods or the result array returned by the parse methods.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/OwnerDrawLabelProvider/setUpOwnerDraw/ColumnViewer">
<![CDATA[ @deprecated Since 3.4, the default implementation of {@link CellLabelProvider#initialize(ColumnViewer, ViewerColumn)} in this class will set up the necessary owner draw callbacks automatically. Calls to this method can be removed. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/action/ToolBarManager/dispose/">
<![CDATA[Note that this method does not clean up references between this tool bar manager and its associated contribution items. Use removeAll for that purpose. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/action/CoolBarManager/dispose/">
<![CDATA[Note that this method does not clean up references between this cool bar manager and its associated contribution items. Use removeAll for that purpose. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/action/MenuManager/dispose/">
<![CDATA[Note that this method does not clean up references between this menu manager and its associated contribution items. Use removeAll for that purpose. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/action/ContributionItem/setId/String">
<![CDATA[It should be set once either in the constructor or using this method.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/HashSet">
<![CDATA[ If multiple threads access a hash set concurrently, and at least one of the threads modifies the set, it must be synchronized externally. This is typically accomplished by synchronizing on some object that naturally encapsulates the set. If no such object exists, the set should be "wrapped" using the {@link Collections#synchronizedSet Collections.synchronizedSet} method. This is best done at creation time, to prevent accidental unsynchronized access to the set:

   Set s = Collections.synchronizedSet(new HashSet(...));]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/LinkedHashSet">
<![CDATA[ If multiple threads access a linked hash set concurrently, and at least one of the threads modifies the set, it must be synchronized externally. This is typically accomplished by synchronizing on some object that naturally encapsulates the set. If no such object exists, the set should be "wrapped" using the {@link Collections#synchronizedSet Collections.synchronizedSet} method. This is best done at creation time, to prevent accidental unsynchronized access to the set:

   Set s = Collections.synchronizedSet(new LinkedHashSet(...));]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/IdentityHashMap">
<![CDATA[If multiple threads access an identity hash map concurrently, and at least one of the threads modifies the map structurally, it must be synchronized externally. (A structural modification is any operation that adds or deletes one or more mappings; merely changing the value associated with a key that an instance already contains is not a structural modification.) This is typically accomplished by synchronizing on some object that naturally encapsulates the map. If no such object exists, the map should be "wrapped" using the {@link Collections#synchronizedMap Collections.synchronizedMap} method. This is best done at creation time, to prevent accidental unsynchronized access to the map:

   Map m = Collections.synchronizedMap(new IdentityHashMap(...));]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/TreeMap">
<![CDATA[If multiple threads access a map concurrently, and at least one of the threads modifies the map structurally, it must be synchronized externally. (A structural modification is any operation that adds or deletes one or more mappings; merely changing the value associated with an existing key is not a structural modification.) This is typically accomplished by synchronizing on some object that naturally encapsulates the map. If no such object exists, the map should be "wrapped" using the {@link Collections#synchronizedSortedMap Collections.synchronizedSortedMap} method. This is best done at creation time, to prevent accidental unsynchronized access to the map:

   SortedMap m = Collections.synchronizedSortedMap(new TreeMap(...));]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/lang/System/getenv/String">
<![CDATA[For these reasons, environment variables are more likely to have unintended side effects. It is best to use system properties where possible. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/prefs/AbstractPreferences/flushSpi/">
<![CDATA[If the backing store naturally flushes an entire subtree at once, the implementer is encouraged to override flush(), rather than merely overriding this method. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/prefs/AbstractPreferences/syncSpi/">
<![CDATA[If the backing store naturally syncs an entire subtree at once, the implementer is encouraged to override sync(), rather than merely overriding this method. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/ResultSet/updateNCharacterStream/String;Reader">
<![CDATA[Consult your JDBC driver documentation to determine if it might be more efficient to use a version of updateNCharacterStream which takes a length parameter.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/CallableStatement/setNCharacterStream/String;Reader">
<![CDATA[Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setNCharacterStream which takes a length parameter.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/PreparedStatement/setClob/int;Reader">
<![CDATA[Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setClob which takes a length parameter.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/io/Reader/lock">
<![CDATA[For efficiency, a character-stream object may use an object other than itself to protect critical sections.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/io/Writer/lock">
<![CDATA[For efficiency, a character-stream object may use an object other than itself to protect critical sections.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/action/StatusLineManager/dispose/">
<![CDATA[Note that this method does not clean up references between this status line manager and its associated contribution items. Use removeAll for that purpose. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/preference/IPreferenceStore/setValue/String;long">
<![CDATA[ Note that the preferred way of re-initializing a preference to its default value is to call setToDefault. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/resource/JFaceResources/getImageRegistry/">
<![CDATA[ Note that the static convenience method getImage is also provided on this class. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/AbstractTableViewer/add/Object">
<![CDATA[ Note that there is another method for efficiently processing the simultaneous addition of multiple elements. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/StructuredViewer/refresh/Object;boolean">
<![CDATA[If only the given element needs updating, it is more efficient to use the update methods. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/dialogs/ErrorDialog/createDialogArea/Composite">
<![CDATA[ If the old behavior is desired by subclasses, get the returned composite's layout data and set grabExcessVerticalSpace to true. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/security/cert/CertPathBuilder/getDefaultType/">
<![CDATA[The default CertPathBuilder type can be changed by setting the value of the "certpathbuilder.type" security property (in the Java security properties file) to the desired type. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/rmi/Naming">
<![CDATA[Once a remote object is registered (bound) with the RMI registry on the local host, callers on a remote (or local) host can lookup the remote object by name, obtain its reference, and then invoke remote methods on the object. A registry may be shared by all servers running on a host or an individual server process may create and use its own registry if desired (see java.rmi.registry.LocateRegistry.createRegistry method for details).]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/security/cert/CertPathValidator/getDefaultType/">
<![CDATA[The default CertPathValidator type can be changed by setting the value of the "certpathvalidator.type" security property (in the Java security properties file) to the desired type.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/ColumnViewer/setCellModifier/ICellModifier">
<![CDATA[ Since 3.3, an alternative API is available, see {@link ViewerColumn#setEditingSupport(EditingSupport)} for a more flexible way of editing values in a column viewer. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/ComboViewer">
<![CDATA[This class is intended as an alternative to the JFace ListViewer, which displays its content in a combo box rather than a list.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/concurrent/atomic/AtomicLong/weakCompareAndSet/long;long">
<![CDATA[May fail spuriously and does not provide ordering guarantees, so is only rarely an appropriate alternative to { compareAndSet}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/concurrent/atomic/AtomicInteger/weakCompareAndSet/int;int">
<![CDATA[May fail spuriously and does not provide ordering guarantees, so is only rarely an appropriate alternative to { compareAndSet}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/concurrent/atomic/AtomicLongFieldUpdater/weakCompareAndSet/Object;long;long">
<![CDATA[May fail spuriously and does not provide ordering guarantees, so is only rarely an appropriate alternative to { compareAndSet}.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/net/ContentHandler">
<![CDATA[By default it looks in sun.net.www.content, but users can define a vertical-bar delimited set of class prefixes to search through in addition by defining the java.content.handler.pkgs property.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/net/InetAddress">
<![CDATA[If the default behavior is not desired, then a Java security property can be set to a different Time-to-live (TTL) value for positive caching.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/viewers/StructuredViewer/update/Object[];String[]">
<![CDATA[This does not handle structural changes (e.g. addition or removal of elements), and does not update any other related elements (e.g. child elements). To handle structural changes, use the refresh methods instead. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/concurrent/locks/LockSupport">
<![CDATA[These methods are designed to be used as tools for creating higher-level synchronization utilities, and are not in themselves useful for most concurrency control applications.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="org/eclipse/jface/resource/FontRegistry/defaultFont/">
<![CDATA[This method should only be called from the UI thread. If you are not on the UI thread then wrap the call with a PlatformUI.getWorkbench().getDisplay().synchExec() in order to guarantee the correct result.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/sql/SQLXML">
<![CDATA[Because databases may use an optimized representation for the XML, accessing the value through getSource() and setResult() can lead to improved processing performance without serializing to a stream representation and parsing the XML. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/concurrent/LinkedBlockingQueue/offer/Object">
<![CDATA[When using a capacity-restricted queue, this method is generally preferable to method {@link BlockingQueue#add add}, which can fail to insert an element only by throwing an exception. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/Deque/addLast/Object">
<![CDATA[When using a capacity-restricted deque, it is generally preferable to use method {@link #offerLast}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/Queue/offer/Object">
<![CDATA[When using a capacity-restricted queue, this method is generally preferable to {@link #add}, which can fail to insert an element only by throwing an exception.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/concurrent/BlockingDeque/addFirst/Object">
<![CDATA[ When using a capacity-restricted deque, it is generally preferable to use {@link #offerFirst(Object) offerFirst}.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/concurrent/BlockingQueue/offer/Object">
<![CDATA[When using a capacity-restricted queue, this method is generally preferable to {@link #add}, which can fail to insert an element only by throwing an exception. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/concurrent/BlockingDeque/addLast/Object">
<![CDATA[ When using a capacity-restricted deque, it is generally preferable to use {@link #offerLast(Object) offerLast}.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/concurrent/BlockingQueue/add/Object">
<![CDATA[When using a capacity-restricted queue, it is generally preferable to use {@link #offer(Object) offer}. ]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/util/EnumSet">
<![CDATA[ This is best done at creation time, to prevent accidental unsynchronized access:

 Set<MyEnum> s = Collections.synchronizedSet(EnumSet.noneOf(MyEnum.class));]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/text/Collator/compare/String;String">
<![CDATA[For a one time comparison, this method has the best performance. If a given String will be involved in multiple comparisons, CollationKey.compareTo has the best performance.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/math/BigDecimal/divideAndRemainder/BigDecimal;MathContext">
<![CDATA[Note that if both the integer quotient and remainder are needed, this method is faster than using the { divideToIntegralValue} and { remainder} methods separately because the division need only be carried out once.]]>
</directive>

<directive kind="Alternative Directive" containing-api-element="java/io/ObjectOutputStream/writeUTF/String">
<![CDATA[ Note that there is a significant difference between writing a String into the stream as primitive data or as an Object.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/beans/beancontext/BeanContextSupport/addAll/Collection">
<![CDATA[implementations must synchronized on the hierarchy lock]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/beans/beancontext/BeanContextSupport/removeAll/Collection">
<![CDATA[ implementations must synchronized on the hierarchy lock ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/beans/beancontext/BeanContextSupport/retainAll/Collection">
<![CDATA[implementations must synchronized on the hierarchy lock and "children" protected field]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/beans/beancontext/BeanContextSupport/clear/">
<![CDATA[ implementations must synchronized on the hierarchy lock ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/concurrent/locks/Condition/signal/">
<![CDATA[thread must then re-acquire the lock before returning from { await}. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/concurrent/locks/Condition/signalAll/">
<![CDATA[Each thread must re-acquire the lock before it can return from { await}. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/concurrent/locks/Condition/awaitNanos/long">
<![CDATA[In all cases, before this method can return the current thread must re-acquire the lock associated with this condition.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/concurrent/locks/Condition/awaitUninterruptibly/">
<![CDATA[In all cases, before this method can return the current thread must re-acquire the lock associated with this condition.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/concurrent/locks/Condition/awaitUntil/Date">
<![CDATA[In all cases, before this method can return the current thread must re-acquire the lock associated with this condition.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/text/NumberFormat">
<![CDATA[ If multiple threads access a format concurrently, it must be synchronized externally.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/text/DateFormat">
<![CDATA[ If multiple threads access a format concurrently, it must be synchronized externally. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/text/DecimalFormat">
<![CDATA[f multiple threads access a format concurrently, it must be synchronized externally. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/text/MessageFormat">
<![CDATA[If multiple threads access a format concurrently, it must be synchronized externally.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/MapUtils/verbosePrint/PrintStream;Object;Map">
<![CDATA[ This method is NOT thread-safe in any special way. You must manually synchronize on either this class or the stream as required.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/MapUtils/debugPrint/PrintStream;Object;Map">
<![CDATA[This method is NOT thread-safe in any special way. You must manually synchronize on either this class or the stream as required. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/io/Writer/lock">
<![CDATA[ A subclass should therefore use the object in this field rather than this or a synchronized method.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/io/Reader/lock">
<![CDATA[A subclass should therefore use the object in this field rather than this or a synchronized method. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/concurrent/locks/Condition/await/">
<![CDATA[In all cases, before this method can return the current thread must re-acquire the lock associated with this condition.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/map/AbstractReferenceMap/purge/">
<![CDATA[Note that this method is not synchronized! ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/buffer/BoundedFifoBuffer">
<![CDATA[Note that this implementation is not synchronized. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/buffer/CircularFifoBuffer">
<![CDATA[Note that this implementation is not synchronized. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/list/NodeCachingLinkedList">
<![CDATA[Note that this implementation is not synchronized. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/buffer/PriorityBuffer">
<![CDATA[Note that this implementation is not synchronized. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/buffer/UnboundedFifoBuffer">
<![CDATA[Note that this implementation is not synchronized. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/comparators/ComparatorChain">
<![CDATA[Instances of ComparatorChain are not synchronized. The class is not thread-safe at construction time, but it is thread-safe to perform multiple comparisons after all the setup operations are complete.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/comparators/FixedOrderComparator">
<![CDATA[Instances of FixedOrderComparator are not synchronized. The class is not thread-safe at construction time, but it is thread-safe to perform multiple comparisons after all the setup operations are complete.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/list/CursorableLinkedList/listIterator/">
<![CDATA[The cursor enables iteration and list changes to occur in any order without invalidating the iterator (from one thread).]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/list/CursorableLinkedList/listIterator/int">
<![CDATA[The cursor enables iteration and list changes to occur in any order without invalidating the iterator (from one thread). ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/list/CursorableLinkedList/cursor/">
<![CDATA[ The cursor enables iteration and list changes to occur in any order without invalidating the iterator (from one thread). ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/map/StaticBucketMap">
<![CDATA[Each bucket in the hash table has its own monitor, so two threads can safely operate on the map at the same time, often without incurring any monitor contention. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/bag/SynchronizedSortedBag">
<![CDATA[Methods are synchronized, then forwarded to the decorated bag. Iterators must be separately synchronized around the loop. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/bag/SynchronizedBag">
<![CDATA[ Iterators must be separately synchronized around the loop. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/collection/SynchronizedCollection">
<![CDATA[Iterators must be manually synchronized:

 synchronized (coll) {
   Iterator it = coll.iterator();
   // do stuff with iterator
 }
]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/collection/SynchronizedCollection/iterator/">
<![CDATA[Iterators must be manually synchronized.

 synchronized (coll) {
   Iterator it = coll.iterator();
   // do stuff with iterator
 }

 @return an iterator that must be manually synchronized on the collection
]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/list/SynchronizedList/listIterator/">
<![CDATA[Iterators must be manually synchronized.

 synchronized (coll) {
   ListIterator it = coll.listIterator();
   // do stuff with iterator
 }

 @return an iterator that must be manually synchronized on the collection
]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/list/SynchronizedList/listIterator/int">
<![CDATA[ Iterators must be manually synchronized.

 synchronized (coll) {
   ListIterator it = coll.listIterator(3);
   // do stuff with iterator
 }

 @return an iterator that must be manually synchronized on the collection
]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/map/AbstractReferenceMap">
<![CDATA[This implementation is not synchronized. You can use {@link java.util.Collections#synchronizedMap} to provide synchronized access to a ReferenceMap.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/map/ReferenceIdentityMap">
<![CDATA[This implementation is not synchronized. You can use {@link java.util.Collections#synchronizedMap} to provide synchronized access to a ReferenceIdentityMap. Remember that synchronization will not stop the garbage collecter removing entries. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/map/ReferenceMap">
<![CDATA[This implementation is not synchronized. You can use {@link java.util.Collections#synchronizedMap} to provide synchronized access to a ReferenceMap. Remember that synchronization will not stop the garbage collecter removing entries. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/MapUtils/synchronizedMap/Map">
<![CDATA[You must manually synchronize on the returned buffer's iterator to avoid non-deterministic behavior:

 Map m = MapUtils.synchronizedMap(myMap);
 Set s = m.keySet();  // outside synchronized block
 synchronized (m) {  // synchronized on MAP!
     Iterator i = s.iterator();
     while (i.hasNext()) {
         process (i.next());
     }
 }
]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/MapUtils/synchronizedSortedMap/SortedMap">
<![CDATA[You must manually synchronize on the returned buffer's iterator to avoid non-deterministic behavior:

 Map m = MapUtils.synchronizedSortedMap(myMap);
 Set s = m.keySet();  // outside synchronized block
 synchronized (m) {  // synchronized on MAP!
     Iterator i = s.iterator();
     while (i.hasNext()) {
         process (i.next());
     }
 }
 ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/ListUtils/synchronizedList/List">
<![CDATA[You must manually synchronize on the returned buffer's iterator to avoid non-deterministic behavior:

 List list = ListUtils.synchronizedList(myList);
 synchronized (list) {
     Iterator i = list.iterator();
     while (i.hasNext()) {
         process (i.next());
     }
 }
]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/BufferUtils/synchronizedBuffer/Buffer">
<![CDATA[Much like the synchronized collections returned by {@link java.util.Collections}, you must manually synchronize on the returned buffer's iterator to avoid non-deterministic behavior:

 Buffer b = BufferUtils.synchronizedBuffer(myBuffer);
 synchronized (b) {
     Iterator i = b.iterator();
     while (i.hasNext()) {
         process (i.next());
     }
 }
]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/CollectionUtils/synchronizedCollection/Collection">
<![CDATA[You must manually synchronize on the returned buffer's iterator to avoid non-deterministic behavior:

 Collection c = CollectionUtils.synchronizedCollection(myCollection);
 synchronized (c) {
     Iterator i = c.iterator();
     while (i.hasNext()) {
         process (i.next());
     }
 }
]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/BagUtils/synchronizedBag/Bag">
<![CDATA[ It is imperative that the user manually synchronize on the returned bag when iterating over it:

 Bag bag = BagUtils.synchronizedBag(new HashBag());
 ...
 synchronized(bag) {
     Iterator i = bag.iterator(); // Must be in synchronized block
     while (i.hasNext())
         foo(i.next());
     }
 }
]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/SetUtils/synchronizedSortedSet/SortedSet">
<![CDATA[You must manually synchronize on the returned buffer's iterator to avoid non-deterministic behavior:

 Set s = SetUtils.synchronizedSet(mySet);
 synchronized (s) {
     Iterator i = s.iterator();
     while (i.hasNext()) {
         process (i.next());
     }
 }
]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/concurrent/locks/Lock">
<![CDATA[ It is recommended that to avoid confusion you never use { Lock} instances in this way, except within their own implementation. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/concurrent/locks/AbstractQueuedSynchronizer/tryAcquireShared/int">
<![CDATA[@return a negative value on failure; zero if acquisition in shared mode succeeded but no subsequent shared-mode acquire can succeed; and a positive value if acquisition in shared mode succeeded and subsequent shared-mode acquires might also succeed, in which case a subsequent waiting thread must check availability.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/concurrent/locks/AbstractQueuedLongSynchronizer/tryAcquireShared/long">
<![CDATA[@return a negative value on failure; zero if acquisition in shared mode succeeded but no subsequent shared-mode acquire can succeed; and a positive value if acquisition in shared mode succeeded and subsequent shared-mode acquires might also succeed, in which case a subsequent waiting thread must check availability. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/text/Format">
<![CDATA[If multiple threads access a format concurrently, it must be synchronized externally.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/concurrent/locks/Condition/awaitNanos/long">
<![CDATA[In either case the implementation must ensure that the signal is redirected to another waiting thread, if there is one.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/concurrent/locks/Lock/newCondition/">
<![CDATA[Before waiting on the condition the lock must be held by the current thread.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="javax/swing/undo/UndoableEditSupport/endUpdate/">
<![CDATA[DEADLOCK WARNING: Calling this method may call undoableEditHappened in all listeners. It is unwise to call this method from one of its listeners. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/Collections/synchronizedCollection/Collection">
<![CDATA[It is imperative that the user manually synchronize on the returned collection when iterating over it:

  Collection c = Collections.synchronizedCollection(myCollection);
     ...
  synchronized(c) {
      Iterator i = c.iterator(); // Must be in the synchronized block
      while (i.hasNext())
         foo(i.next());
  }
 ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/Collections/synchronizedSet/Set">
<![CDATA[It is imperative that the user manually synchronize on the returned set when iterating over it:

  Set s = Collections.synchronizedSet(new HashSet());
      ...
  synchronized(s) {
      Iterator i = s.iterator(); // Must be in the synchronized block
      while (i.hasNext())
          foo(i.next());
  }
]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/Collections/synchronizedSortedSet/SortedSet">
<![CDATA[It is imperative that the user manually synchronize on the returned sorted set when iterating over it or any of its subSet, headSet, or tailSet views.

  SortedSet s = Collections.synchronizedSortedSet(new TreeSet());
      ...
  synchronized(s) {
      Iterator i = s.iterator(); // Must be in the synchronized block
      while (i.hasNext())
          foo(i.next());
  }
]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/Collections/synchronizedList/List">
<![CDATA[It is imperative that the user manually synchronize on the returned list when iterating over it:

  List list = Collections.synchronizedList(new ArrayList());
      ...
  synchronized(list) {
      Iterator i = list.iterator(); // Must be in synchronized block
      while (i.hasNext())
          foo(i.next());
  }
]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/Collections/synchronizedMap/Map">
<![CDATA[It is imperative that the user manually synchronize on the returned map when iterating over any of its collection views:

  Map m = Collections.synchronizedMap(new HashMap());
      ...
  Set s = m.keySet();  // Needn't be in synchronized block
      ...
  synchronized(m) {  // Synchronizing on m, not s!
      Iterator i = s.iterator(); // Must be in synchronized block
      while (i.hasNext())
          foo(i.next());
  }
]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/Collections/synchronizedSortedMap/SortedMap">
<![CDATA[It is imperative that the user manually synchronize on the returned sorted map when iterating over any of its collection views, or the collections views of any of its subMap, headMap or tailMap views.

  SortedMap m = Collections.synchronizedSortedMap(new TreeMap());
      ...
  Set s = m.keySet();  // Needn't be in synchronized block
      ...
  synchronized(m) {  // Synchronizing on m, not s!
      Iterator i = s.iterator(); // Must be in synchronized block
      while (i.hasNext())
          foo(i.next());
  }
]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/lang/ProcessBuilder">
<![CDATA[Note that this class is not synchronized. If multiple threads access a ProcessBuilder instance concurrently, and at least one of the threads modifies one of the attributes structurally, it must be synchronized externally. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/CertStoreSpi">
<![CDATA[The public methods of all CertStoreSpi objects must be thread-safe.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/PolicyQualifierInfo">
<![CDATA[All PolicyQualifierInfo objects must be immutable and thread-safe.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/CollectionCertStoreParameters/CollectionCertStoreParameters/Collection">
<![CDATA[If the Collection will be modified by one thread while another thread is calling a method of a Collection CertStore that has been initialized with this Collection, the Collection must have fail-fast iterators. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/CertPath">
<![CDATA[All CertPath objects must be thread-safe. That is, multiple threads may concurrently invoke the methods defined in this class on a single CertPath object (or more than one) with no ill effects. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/PolicyNode">
<![CDATA[All PolicyNode objects must be immutable and thread-safe.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/CertStore">
<![CDATA[All public methods of CertStore objects must be thread-safe.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/CertSelector">
<![CDATA[ Unless otherwise specified, the methods defined in this interface are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/CRLSelector">
<![CDATA[ Unless otherwise specified, the methods defined in this interface are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/CertPathValidatorSpi">
<![CDATA[Threads that need to access a single CertPathValidatorSpi instance concurrently should synchronize amongst themselves and provide the necessary locking before calling the wrapping CertPathValidator object. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/CertPathBuilderSpi">
<![CDATA[Instances of this class need not be protected against concurrent access from multiple threads. Threads that need to access a single CertPathBuilderSpi instance concurrently should synchronize amongst themselves and provide the necessary locking before calling the wrapping CertPathBuilder object. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/LDAPCertStoreParameters">
<![CDATA[ Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/PermissionCollection">
<![CDATA[Subclass implementations of PermissionCollection should assume that they may be called simultaneously from multiple threads, and therefore should be synchronized properly.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/CollectionCertStoreParameters">
<![CDATA[Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/CertStoreException">
<![CDATA[Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/CertPathBuilderException">
<![CDATA[Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/PKIXBuilderParameters">
<![CDATA[Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/PKIXCertPathValidatorResult">
<![CDATA[Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/PKIXCertPathBuilderResult">
<![CDATA[Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/CertPathValidatorException">
<![CDATA[ Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/CertPathBuilderResult">
<![CDATA[Unless otherwise specified, the methods defined in this interface are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/X509CertSelector">
<![CDATA[Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/X509CRLSelector">
<![CDATA[Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/CertPathValidator">
<![CDATA[Unless otherwise documented by a specific provider, threads that need to access a single CertPathValidator instance concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating a different CertPathValidator instance need not synchronize.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/CertPathValidator">
<![CDATA[The static methods of this class are guaranteed to be thread-safe. Multiple threads may concurrently invoke the static methods defined in this class with no ill effects. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/CertPathBuilder">
<![CDATA[The static methods of this class are guaranteed to be thread-safe. Multiple threads may concurrently invoke the static methods defined in this class with no ill effects. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/CertPathBuilder">
<![CDATA[Unless otherwise documented by a specific provider, threads that need to access a single CertPathBuilder instance concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating a different CertPathBuilder instance need not synchronize.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/PKIXParameters">
<![CDATA[Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/PKIXCertPathChecker">
<![CDATA[Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/list/CursorableLinkedList/iterator/">
<![CDATA[Returns an iterator that does not support concurrent modification.

If the underlying list is modified while iterating using this iterator a ConcurrentModificationException will occur. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/list/CursorableLinkedList/Cursor">
<![CDATA[An extended ListIterator that allows concurrent changes to the underlying list. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/iterators/LoopingIterator">
<![CDATA[Concurrent modifications are not directly supported, and for most collection implementations will throw a ConcurrentModificationException. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/iterators/LoopingListIterator">
<![CDATA[Concurrent modifications are not directly supported, and for most collection implementations will throw a ConcurrentModificationException. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/map/DefaultedMap">
<![CDATA[Note that DefaultedMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/map/FixedSizeMap">
<![CDATA[Note that FixedSizeMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/map/StaticBucketMap">
<![CDATA[The iterators returned by the collection views of this class are not fail-fast. They will never raise a {@link java.util.ConcurrentModificationException}.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/map/PredicatedSortedMap">
<![CDATA[Note that PredicatedSortedMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/map/TransformedMap">
<![CDATA[Note that TransformedMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/map/LazyMap">
<![CDATA[Note that LazyMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/map/FixedSizeSortedMap">
<![CDATA[Note that FixedSizeSortedMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/map/ReferenceIdentityMap">
<![CDATA[Note that ReferenceIdentityMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/map/TransformedSortedMap">
<![CDATA[Note that TransformedSortedMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/map/MultiKeyMap">
<![CDATA[Note that MultiKeyMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. This class may throw exceptions when accessed by concurrent threads without synchronization.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/map/LazySortedMap">
<![CDATA[Note that LazySortedMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. T]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/map/ReferenceMap">
<![CDATA[Note that ReferenceMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/map/HashedMap">
<![CDATA[Note that HashedMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/map/CaseInsensitiveMap">
<![CDATA[Note that CaseInsensitiveMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/map/IdentityMap">
<![CDATA[Note that IdentityMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/map/MultiValueMap">
<![CDATA[Note that MultiValueMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. This class may throw exceptions when accessed by concurrent threads without synchronization. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/map/ListOrderedMap">
<![CDATA[Note that ListOrderedMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/map/Flat3Map">
<![CDATA[Note that Flat3Map is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/map/LinkedMap">
<![CDATA[Note that LinkedMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/map/PredicatedMap">
<![CDATA[Note that PredicatedMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. T]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/map/CompositeMap">
<![CDATA[Note that CompositeMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/map/LRUMap">
<![CDATA[Note that LRUMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/splitmap/TransformedMap">
<![CDATA[Note that TransformedMap is not synchronized and is not thread-safe. If you wish to use this map from multiple threads concurrently, you must use appropriate synchronization. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/HashMap">
<![CDATA[ If multiple threads access a hash map concurrently, and at least one of the threads modifies the map structurally, it must be synchronized externally.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/LinkedHashMap">
<![CDATA[ If multiple threads access a linked hash map concurrently, and at least one of the threads modifies the map structurally, it must be synchronized externally. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/LinkedHashSet">
<![CDATA[ If multiple threads access a linked hash set concurrently, and at least one of the threads modifies the set, it must be synchronized externally. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/ArrayList">
<![CDATA[ If multiple threads access an ArrayList instance concurrently, and at least one of the threads modifies the list structurally, it must be synchronized externally. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/LinkedList">
<![CDATA[ If multiple threads access a linked list concurrently, and at least one of the threads modifies the list structurally, it must be synchronized externally. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/HashSet">
<![CDATA[ If multiple threads access a hash set concurrently, and at least one of the threads modifies the set, it must be synchronized externally. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/IdentityHashMap">
<![CDATA[ If multiple threads access an identity hash map concurrently, and at least one of the threads modifies the map structurally, it must be synchronized externally.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/TreeMap">
<![CDATA[ If multiple threads access a map concurrently, and at least one of the threads modifies the map structurally, it must be synchronized externally.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/TreeSet">
<![CDATA[ If multiple threads access a tree set concurrently, and at least one of the threads modifies the set, it must be synchronized externally.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/prefs/AbstractPreferences/syncSpi/">
<![CDATA[ Note that this method should not synchronize the preferences in any subnodes of this node.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/list/CursorableLinkedList">
<![CDATA[Note that this implementation is not synchronized. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/map/StaticBucketMap/putAll/Map">
<![CDATA[This operation is not atomic and may have undesired effects. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/EnumSet">
<![CDATA[ If multiple threads access an enum set concurrently, and at least one of the threads modifies the set, it should be synchronized externally.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/EnumMap">
<![CDATA[If multiple threads access an enum map concurrently, and at least one of the threads modifies the map, it should be synchronized externally.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/jar/Pack200/newPacker/">
<![CDATA[ A multi-threaded application should either allocate multiple packer engines, or else serialize use of one engine with a lock. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/jar/Pack200/newUnpacker/">
<![CDATA[ A multi-threaded application should either allocate multiple unpacker engines, or else serialize use of one engine with a lock. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/PriorityQueue">
<![CDATA[Note that this implementation is not synchronized. Multiple threads should not access a { PriorityQueue} instance concurrently if any of the threads modifies the queue.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/SetUtils/synchronizedSet/Set">
<![CDATA[You must manually synchronize on the returned buffer's iterator to avoid non-deterministic behavior: ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/concurrent/Semaphore">
<![CDATA[Generally, semaphores used to control resource access should be initialized as fair, to ensure that no thread is starved out from accessing a resource.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/lang/Appendable">
<![CDATA[ Appendables are not necessarily safe for multithreaded access. Thread safety is the responsibility of classes that extend and implement this interface. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/awt/event/HierarchyEvent/HierarchyEvent/Component;int;Component;Container">
<![CDATA[Note that passing in an invalid id results in unspecified behavior.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/concurrent/locks/Condition">
<![CDATA[An implementation is required to clearly document the semantics and guarantees provided by each of the waiting methods, and when an implementation does support interruption of thread suspension then it must obey the interruption semantics as defined in this interface.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/concurrent/locks/Condition/awaitUntil/Date">
<![CDATA[In either case the implementation must ensure that the signal is redirected to another waiting thread, if there is one.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/lang/Runtime/addShutdownHook/Thread">
<![CDATA[ Shutdown hooks run at a delicate time in the life cycle of a virtual machine and should therefore be coded defensively. They should, in particular, be written to be thread-safe and to avoid deadlocks insofar as possible. They should also not rely blindly upon services that may have registered their own shutdown hooks and therefore may themselves in the process of shutting down. Attempts to use other thread-based services such as the AWT event-dispatch thread, for example, may lead to deadlocks. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/CertStoreSpi">
<![CDATA[The public methods of all CertStoreSpi objects must be thread-safe. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/PolicyQualifierInfo">
<![CDATA[All PolicyQualifierInfo objects must be immutable and thread-safe. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/cert/TrustAnchor">
<![CDATA[All TrustAnchor objects must be immutable and thread-safe.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/lang/Thread/Thread/ThreadGroup;Runnable;String;long">
<![CDATA[The thread stack size necessary to perform a given computation will likely vary from one JRE implementation to another. In light of this variation, careful tuning of the stack size parameter may be required, and the tuning may need to be repeated for each JRE implementation on which an application is to run. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/apache/commons/collections/MapUtils/transformedMap/Map;Transformer;Transformer">
<![CDATA[@param map the map to transform, must not be null, typically empty]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/concurrent/locks/AbstractQueuedSynchronizer">
<![CDATA[Implementations of these methods must be internally thread-safe, and should in general be short and not block. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/concurrent/locks/Lock">
<![CDATA[When locking and unlocking occur in different scopes, care must be taken to ensure that all code that is executed while the lock is held is protected by try-finally or try-catch to ensure that the lock is released when necessary.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/lang/instrument/Instrumentation/removeTransformer/ClassFileTransformer">
<![CDATA[Due to the multi-threaded nature of class loading, it is possible for a transformer to receive calls after it has been removed. Transformers should be written defensively to expect this situation. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/concurrent/CountDownLatch">
<![CDATA[When threads must repeatedly count down in this way, instead use a {@link CyclicBarrier}. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/ResourceBundle/Control">
<![CDATA[A ResourceBundle.Control instance must be thread-safe if it's simultaneously used by multiple threads.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/concurrent/locks/AbstractQueuedLongSynchronizer/tryAcquire/long">
<![CDATA[ This method should query if the state of the object permits it to be acquired in the exclusive mode, and if so to acquire it.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/concurrent/locks/Lock">
<![CDATA[The absence of block-structured locking removes the automatic release of locks that occurs with { synchronized} methods and statements. In most cases, the following idiom should be used: ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/concurrent/locks/Lock">
<![CDATA[All { Lock} implementations must enforce the same memory synchronization semantics as provided by the built-in monitor lock, as described in The Java Language Specification, Third Edition (17.4 Memory Model)]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/eclipse/jface/viewers/deferred/DeferredContentProvider/setSortOrder/Comparator">
<![CDATA[@param sortOrder new sort order. The comparator must be able to support being used in a background thread. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/eclipse/jface/resource/FontRegistry/getBold/String">
<![CDATA[This method should only be called from the UI thread. If you are not on the UI thread then wrap the call with a PlatformUI.getWorkbench().getDisplay().synchExec() in order to guarantee the correct result. Failure to do this may result in an {@link SWTException} being thrown. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/eclipse/jface/preference/IPreferenceStore/addPropertyChangeListener/IPropertyChangeListener">
<![CDATA[ Likewise any application that updates an IPreferenceStore from a Thread other than the UI Thread should be aware of any listeners that require an update in the UI Thread. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/concurrent/locks/ReentrantLock">
<![CDATA[It is recommended practice to always immediately follow a call to { lock} with a { try} block, most typically in a before/after construction]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/io/PipedOutputStream">
<![CDATA[ttempting to use both objects from a single thread is not recommended as it may deadlock the thread.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/eclipse/jface/text/formatter/IContentFormatterExtension">
<![CDATA[ Note that in context based mode the content formatter is fully reentrant, but not thread-safe. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/eclipse/jface/text/contentassist/ICompletionProposalExtension5/getAdditionalProposalInfo/IProgressMonitor">
<![CDATA[ This method may be called on a non-UI thread. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/concurrent/locks/Lock/tryLock/long;TimeUnit">
<![CDATA[The ability to interrupt a lock acquisition in some implementations may not be possible, and if possible may be an expensive operation. The programmer should be aware that this may be the case.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/eclipse/jface/util/SafeRunnable">
<![CDATA[ This may be executed on any thread. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/eclipse/jface/text/source/VerticalRuler/update/">
<![CDATA[ Thread-safe implementation. Can be called from any thread. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/eclipse/jface/resource/FontRegistry/getItalic/String">
<![CDATA[This method should only be called from the UI thread. If you are not on the UI thread then wrap the call with a PlatformUI.getWorkbench().getDisplay().synchExec() in order to guarantee the correct result. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/concurrent/locks/Condition">
<![CDATA[It is recommended that to avoid confusion you never use { Condition} instances in this way, except perhaps within their own implementation. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/text/Format">
<![CDATA[Formats are generally not synchronized. It is recommended to create separate format instances for each thread. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/io/PipedInputStream">
<![CDATA[Attempting to use both objects from a single thread is not recommended, as it may deadlock the thread.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/concurrent/ConcurrentSkipListMap/size/">
<![CDATA[Additionally, it is possible for the size to change during execution of this method, in which case the returned result will be inaccurate.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/concurrent/locks/ReentrantReadWriteLock/WriteLock/newCondition/">
<![CDATA[If this write lock is not held when any {@link Condition} method is called then an {@link IllegalMonitorStateException} is thrown. (Read locks are held independently of write locks, so are not checked or affected. However it is essentially always an error to invoke a condition waiting method when the current thread has also acquired read locks, since other threads that could unblock it will not be able to acquire the write lock.) ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/concurrent/ConcurrentMap">
<![CDATA[Memory consistency effects: As with other concurrent collections, actions in a thread prior to placing an object into a { ConcurrentMap} as a key or value happen-before actions subsequent to the access or removal of that object from the { ConcurrentMap} in another thread. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/security/PermissionCollection">
<![CDATA[Furthermore, Enumerations returned via the elements method are not fail-fast. Modifications to a collection should not be performed while enumerating over that collection. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/concurrent/locks/AbstractQueuedSynchronizer">
<![CDATA[Throughput and scalability are generally highest for the default barging (also known as greedy, renouncement, and convoy-avoidance) strategy. While this is not guaranteed to be fair or starvation-free, earlier queued threads are allowed to recontend before later queued threads, and each recontention has an unbiased chance to succeed against incoming threads. Also, while acquires do not "spin" in the usual sense, they may perform multiple invocations of tryAcquire interspersed with other computations before blocking. This gives most of the benefits of spins when exclusive synchronization is only briefly held, without most of the liabilities when it isn't. If so desired, you can augment this by preceding calls to acquire methods with "fast-path" checks, possibly prechecking {@link #hasContended} and/or {@link #hasQueuedThreads} to only do so if the synchronizer is likely not to be contended. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/eclipse/jface/text/formatter/IContentFormatterExtension/format/IDocument;IFormattingContext">
<![CDATA[This method is fully reentrant, but not thread-safe. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/prefs/Preferences/exportSubtree/OutputStream">
<![CDATA[If the preferences or nodes in the subtree rooted at this node are modified concurrently with an invocation of this method, the exported preferences comprise a "fuzzy snapshot" of the subtree; some of the concurrent modifications may be reflected in the exported data while others may not.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/util/prefs/Preferences/exportNode/OutputStream">
<![CDATA[. If the preferences at this node are modified concurrently with an invocation of this method, the exported preferences comprise a "fuzzy snapshot" of the preferences contained in the node; some of the concurrent modifications may be reflected in the exported data while others may not.]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="org/eclipse/jface/viewers/deferred/IConcurrentModel">
<![CDATA[The model is allowed to send back notifications to its listeners in any thread, and the listeners must not assume that the notifications will arrive in the UI thread. ]]>
</directive>

<directive kind="Synchronization Directive" containing-api-element="java/io/DataInputStream">
<![CDATA[DataInputStream is not necessarily safe for multithreaded access.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/rmi/activation/ActivationGroup/createGroup/ActivationGroupID;ActivationGroupDesc;long">
<![CDATA[Note that if your application creates its own custom activation group, a security manager must be set for that group]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/rmi/activation/ActivationGroup/createGroup/ActivationGroupID;ActivationGroupDesc;long">
<![CDATA[If your application needs to set a different security manager, you must ensure that the policy file specified by the group's ActivationGroupDesc grants the group the necessary permissions to set a new security manager]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="javax/jws/WebMethod">
<![CDATA[The associated method must be public and its parameters return value, and exceptions must follow the rules defined in JAX-RPC 1.1, section ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="javax/jws/WebService/wsdlLocation/">
<![CDATA[The JSR-181 tool must provide feedback if the service implementation bean is inconsistent with the portType and bindings declared in this WSDL. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="javax/activation/MailcapCommandMap">
<![CDATA[Mailcap files must conform to the mailcap file specification]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/concurrent/locks/Lock/lock/">
<![CDATA[The circumstances and the exception type must be documented by that { Lock} implementation. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/concurrent/locks/Condition/awaitNanos/long">
<![CDATA[Typically, an exception will be thrown (such as {@link IllegalMonitorStateException}) and the implementation must document that fact. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/concurrent/locks/Condition">
<![CDATA[An implementation is required to clearly document the semantics and guarantees provided by each of the waiting methods]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/concurrent/locks/Condition">
<![CDATA[ If an implementation provides such specialized semantics then the implementation must document those semantics. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/concurrent/locks/Lock/newCondition/">
<![CDATA[The exact operation of the {@link Condition} instance depends on the { Lock} implementation and must be documented by that implementation.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/concurrent/locks/Condition/awaitUninterruptibly/">
<![CDATA[Typically, an exception will be thrown (such as {@link IllegalMonitorStateException}) and the implementation must document that fact.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/concurrent/locks/Condition/awaitUntil/Date">
<![CDATA[Typically, an exception will be thrown (such as {@link IllegalMonitorStateException}) and the implementation must document that fact. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/eclipse/jface/dialogs/PopupDialog/showDialogMenu/">
<![CDATA[Clients may call this method in order to trigger the menu via keystrokes or other gestures]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/eclipse/jface/dialogs/ProgressIndicator">
<![CDATA[For indeterminate progress, we don't have to know the total amount of work in advance and no worked method needs to be called. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/eclipse/jface/dialogs/PopupDialog/saveDialogBounds/Shell">
<![CDATA[Clients may also call this method to persist the bounds at times other than closing the dialog.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/eclipse/jface/dialogs/MessageDialogWithToggle/getToggleState/">
<![CDATA[This can be called even after the dialog is closed.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/ThreadDeath">
<![CDATA[An application should catch instances of this class only if it must clean up after being terminated asynchronously.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/net/URLConnection/getContent/Class[]">
<![CDATA[The instanceof operator should be used to determine the specific kind of object returned.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/net/JarURLConnection">
<![CDATA[Users should cast the generic URLConnection to a JarURLConnection when they know that the URL they created is a JAR URL, and they need JAR-specific functionality. For example:

 URL url = new URL("jar:file:/home/duke/duke.jar!/");
 JarURLConnection jarConnection = (JarURLConnection)url.openConnection();
 Manifest manifest = jarConnection.getManifest();
]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/net/URLConnection/getContent/">
<![CDATA[@return the object fetched. The instanceof operator should be used to determine the specific kind of object returned. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/rmi/activation/ActivationGroup">
<![CDATA[ If your application requires specific properties to be set when objects are activated in the group, the application should create a special Properties object containing these properties, then create an ActivationGroupDesc with the Properties object, and use ActivationGroup.createGroup before creating any ActivationDescs (before the default ActivationGroupDesc is created).]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/io/ObjectStreamField/ObjectStreamField/String;Class">
<![CDATA[This field should be documented with a serialField tag.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/io/Externalizable/writeExternal/ObjectOutput">
<![CDATA[@serialData Overriding methods should use this tag to describe the data layout of this Externalizable object.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/io/PipedInputStream">
<![CDATA[A piped input stream should be connected to a piped output stream; the piped input stream then provides whatever data bytes are written to the piped output stream. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/io/Console">
<![CDATA[Security note: If an application needs to read a password or other secure data, it should use {@link #readPassword()} or {@link #readPassword(String, Object...)} and manually zero the returned character array after processing to minimize the lifetime of sensitive data in memory.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/io/Serializable">
<![CDATA[Classes that need to designate a replacement when an instance of it is read from the stream should implement this special method with the exact signature.

 ANY-ACCESS-MODIFIER Object readResolve() throws ObjectStreamException;
]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/io/Serializable">
<![CDATA[Serializable classes that need to designate an alternative object to be used when writing an object to the stream should implement this special method with the exact signature:

 ANY-ACCESS-MODIFIER Object writeReplace() throws ObjectStreamException;
]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/Error">
<![CDATA[An Error is a subclass of Throwable that indicates serious problems that a reasonable application should not try to catch.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/SuppressWarnings">
<![CDATA[As a matter of style, programmers should always use this annotation on the most deeply nested element where it is effective.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/Appendable">
<![CDATA[The Appendable interface must be implemented by any class whose instances are intended to receive formatted output from a {@link java.util.Formatter}. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/Thread/stop/">
<![CDATA[An application should not normally try to catch ThreadDeath unless it must do some extraordinary cleanup operation (note that the throwing of ThreadDeath causes finally clauses of try statements to be executed before the thread officially dies). If a catch clause catches a ThreadDeath object, it is important to rethrow the object so that the thread actually dies. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/sql/Array">
<![CDATA[To create a custom mapping, a programmer must do two things:

    * create a class that implements the {@link SQLData} interface for the UDT to be custom mapped.
    * make an entry in a type map that contains
          o the fully-qualified SQL type name of the UDT
          o the Class object for the class implementing SQLData ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/sql/DatabaseMetaData">
<![CDATA[Additional columns beyond the columns defined to be returned by the ResultSet object for a given method can be defined by the JDBC driver vendor and must be accessed by their column label. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/sql/Connection">
<![CDATA[If auto-commit mode has been disabled, the method commit must be called explicitly in order to commit changes; otherwise, database changes will not be saved. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/text/RuleBasedCollator">
<![CDATA[First, if the strings to be collated contain combining sequences that may not be in canonical order, you should set the collator to CANONICAL_DECOMPOSITION or FULL_DECOMPOSITION to enable sorting of combining sequences.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/security/Signer/Signer/">
<![CDATA[This constructor should only be used for serialization. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/security/IdentityScope/IdentityScope/">
<![CDATA[ This constructor is used for serialization only and should not be used by subclasses. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/security/PrivilegedExceptionAction/run/">
<![CDATA[Each class that implements PrivilegedExceptionAction should document what (if anything) this value represents. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/security/PrivilegedAction/run/">
<![CDATA[Each class that implements PrivilegedAction should document what (if anything) this value represents. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/security/cert/CertStoreParameters/clone/">
<![CDATA[Each subclass should state the precise behavior of this method so that users and developers know what to expect. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/security/DigestInputStream">
<![CDATA[Note that digest objects can compute only one digest (see {@link MessageDigest}), so that in order to compute intermediate digests, a caller should retain a handle onto the digest object, and clone it for each digest to be computed, leaving the orginal digest untouched.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/apache/commons/collections/functors/ConstantFactory">
<![CDATA[ No check is made that the object is immutable. In general, only immutable objects should use the constant factory.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/apache/commons/collections/functors/ConstantTransformer">
<![CDATA[No check is made that the object is immutable. In general, only immutable objects should use the constant factory. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/security/Permissions">
<![CDATA[Enumerations returned via the elements method are not fail-fast. Modifications to a collection should not be performed while enumerating over that collection.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/security/KeyFactorySpi">
<![CDATA[A provider should document all the key specifications supported by its key factory]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/sql/PreparedStatement/setObject/int;Object">
<![CDATA[Not all databases allow for a non-typed Null to be sent to the backend. For maximum portability, the setNull or the setObject(int parameterIndex, Object x, int sqlType) method should be used instead of setObject(int parameterIndex, Object x).]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/sql/CallableStatement/setObject/String;Object">
<![CDATA[Not all databases allow for a non-typed Null to be sent to the backend. For maximum portability, the setNull or the setObject(String parameterName, Object x, int sqlType) method should be used instead of setObject(String parameterName, Object x).]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/sql/CallableStatement/registerOutParameter/String;int;String">
<![CDATA[To be portable, however, applications should always provide these values for user-named and REF parameters. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/SecurityManager/checkTopLevelWindow/Object">
<![CDATA[In this case, the caller can still decide to show the window, but the window should include some sort of visual warning.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/Runnable">
<![CDATA[This is important because classes should not be subclassed unless the programmer intends on modifying or enhancing the fundamental behavior of the class.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/SuppressWarnings/value/">
<![CDATA[Compiler vendors should document the warning names they support in conjunction with this annotation type.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/ThreadGroup/enumerate/Thread[];boolean">
<![CDATA[If it is critical to obtain every active thread in this thread group, the caller should verify that the returned int value is strictly less than the length of list. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/ThreadGroup/enumerate/ThreadGroup[]">
<![CDATA[f it is critical to obtain every active subgroup in this thread group, the caller should verify that the returned int value is strictly less than the length of list. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/ThreadGroup/enumerate/ThreadGroup[];boolean">
<![CDATA[If it is critical to obtain every active subgroup in this thread group, the caller should verify that the returned int value is strictly less than the length of list. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/Object/wait/">
<![CDATA[As in the one argument version, interrupts and spurious wakeups are possible, and this method should always be used in a loop:

     synchronized (obj) {
         while (<condition does not hold>)
             obj.wait();
         ... // Perform action appropriate to condition
     }
]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/management/MemoryPoolMXBean/getUsage/">
<![CDATA[An implementation should document when this is the case. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/concurrent/locks/Lock/unlock/">
<![CDATA[Any restrictions and the exception type must be documented by that { Lock} implementation. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/concurrent/locks/Lock/lockInterruptibly/">
<![CDATA[The circumstances and the exception type must be documented by that { Lock} implementation]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/concurrent/locks/Lock/tryLock/long;TimeUnit">
<![CDATA[ The circumstances and the exception type must be documented by that { Lock} implementation.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/Boolean/valueOf/boolean">
<![CDATA[If a new Boolean instance is not required, this method should generally be used in preference to the constructor {@link #Boolean(boolean)}, as this method is likely to yield significantly better space and time performance.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/eclipse/jface/viewers/AbstractTreeViewer/getChild/Widget;int">
<![CDATA[Note that the default implementation is not very efficient and should be overridden if this class is implemented.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/Object/wait/long">
<![CDATA[While this will rarely occur in practice, applications must guard against it by testing for the condition that should have caused the thread to be awakened, and continuing to wait if the condition is not satisfied. In other words, waits should always occur in loops, like this one:

     synchronized (obj) {
         while (<condition does not hold>)
             obj.wait(timeout);
         ... // Perform action appropriate to condition
     }
]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/Object/wait/long;int">
<![CDATA[As in the one argument version, interrupts and spurious wakeups are possible, and this method should always be used in a loop:

     synchronized (obj) {
         while (<condition does not hold>)
             obj.wait(timeout, nanos);
         ... // Perform action appropriate to condition
     }
]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/management/MemoryPoolMXBean">
<![CDATA[For some memory pools, for example, when objects are not packed contiguously, this method may be an expensive operation that requires some computation to determine the current memory usage. An implementation should document when this is the case. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/System/getenv/String">
<![CDATA[Environment variables should be used when a global effect is desired, or when an external system interface requires an environment variable (such as PATH). ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/Comparable/compareTo/Object">
<![CDATA[Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/management/ManagementFactory/newPlatformMXBeanProxy/MBeanServerConnection;String;Class">
<![CDATA[An application remotely accesses the platform MXBeans using proxy should prepare to catch IOException as if accessing with the MBeanServerConnector interface.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/management/ManagementFactory/newPlatformMXBeanProxy/MBeanServerConnection;String;Class">
<![CDATA[When a client application is designed to remotely access MXBeans for a running virtual machine whose version is different than the version on which the application is running, it should prepare to catch {@link java.io.InvalidObjectException InvalidObjectException} which is thrown when an MXBean proxy receives a name of an enum constant which is missing in the enum class loaded in the client application. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/Throwable">
<![CDATA[The specification for the persistent collection should indicate that it is capable of throwing such exceptions.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/StringBuffer">
<![CDATA[ The StringBuilder class should generally be used in preference to this one, as it supports all of the same operations but it is faster, as it performs no synchronization.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/eclipse/jface/operation/IRunnableContext/run/boolean;boolean;IRunnableWithProgress">
<![CDATA[Implementers should document whether the runnable is run synchronously (blocking) or asynchronously (non-blocking), or if no assumption can be made about the blocking behaviour. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/eclipse/jface/text/information/IInformationProviderExtension/getInformation2/ITextViewer;IRegion">
<![CDATA[ Implementers should ignore the text returned by {@link IInformationProvider#getInformation(ITextViewer, IRegion)}. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/eclipse/jface/text/IInformationControlExtension5/getInformationPresenterControlCreator/">
<![CDATA[ This method may be called frequently, so implementors should ensure it returns quickly, e.g. by caching the returned creator. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/apache/commons/collections/map/Flat3Map">
<![CDATA[This map is designed for performance and can outstrip HashMap. It also has good garbage collection characteristics.

    * Optimised for operation at size 3 or less.
    * Still works well once size 3 exceeded.
    * Gets at size 3 or less are about 0-10% faster than HashMap,
    * Puts at size 3 or less are over 4 times faster than HashMap.
    * Performance 5% slower than HashMap once size 3 exceeded once.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/apache/commons/collections/list/TreeList">
<![CDATA[This list implementation utilises a tree structure internally to ensure that all insertions and removals are O(log n). This provides much faster performance than both an ArrayList and a LinkedList where elements are inserted and removed repeatedly from anywhere in the list.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/apache/commons/collections/list/TreeList">
<![CDATA[ArrayList is a good general purpose list implementation. It is faster than TreeList for most operations except inserting and removing in the middle of the list. ArrayList also uses less memory as TreeList uses one object per entry. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/apache/commons/collections/iterators/IteratorChain">
<![CDATA[Under many circumstances, linking Iterators together in this manner is more efficient (and convenient) than reading out the contents of each Iterator into a List and creating a new Iterator. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/apache/commons/collections/iterators/ObjectGraphIterator">
<![CDATA[Under many circumstances, linking Iterators together in this manner is more efficient (and convenient) than using nested for loops to extract a list.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/apache/commons/collections/IteratorUtils/objectGraphIterator/Object;Transformer">
<![CDATA[Under many circumstances, linking Iterators together in this manner is more efficient (and convenient) than using nested for loops to extract a list.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/concurrent/locks/Lock">
<![CDATA[If an implementation provides such specialized semantics then the implementation must document those semantics.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/concurrent/locks/Condition/await/">
<![CDATA[Typically, an exception will be thrown (such as {@link IllegalMonitorStateException}) and the implementation must document that fact.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/List/add/Object">
<![CDATA[ List classes should clearly specify in their documentation any restrictions on what elements may be added.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/concurrent/locks/Lock/tryLock/long;TimeUnit">
<![CDATA[An implementation should document when this is the case.

]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/jar/Pack200/Packer">
<![CDATA[ In order both to sign and to pack a JAR, you must first pack and unpack the JAR to "normalize" it, then compute signatures on the unpacked JAR elements, and finally repack the signed JAR.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/logging/Level/SEVERE">
<![CDATA[In general SEVERE messages should describe events that are of considerable importance and which will prevent normal program execution. They should be reasonably intelligible to end users and to system administrators.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/apache/commons/collections/IteratorUtils">
<![CDATA[he class remained source and test compatible, so if you can recompile all your classes and dependencies everything is OK.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/apache/commons/collections/iterators/LoopingListIterator/previous/">
<![CDATA[ Note that in this case, traversal to find that element takes linear time.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/apache/commons/collections/keyvalue/MultiKey/MultiKey/Object;Object">
<![CDATA[If they are not then they must not be changed after adding to the MultiKey. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/apache/commons/collections/keyvalue/MultiKey/MultiKey/Object;Object;Object">
<![CDATA[If they are not then they must not be changed after adding to the MultiKey.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/apache/commons/collections/map/StaticBucketMap/atomic/Runnable">
<![CDATA[Implementation note: This method requires a lot of time and a ton of stack space. Essentially a recursive algorithm is used to enter each bucket's monitor. If you have twenty thousand buckets in your map, then the recursive method will be invoked twenty thousand times. You have been warned.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/apache/commons/collections/iterators/ArrayIterator/setArray/Object">
<![CDATA[Although this can be used to reset iteration, the {@link #reset()} method is a more effective choice. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/concurrent/locks/LockSupport/parkUntil/Object;long">
<![CDATA[Callers should re-check the conditions which caused the thread to park in the first place.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/concurrent/locks/Lock/lockInterruptibly/">
<![CDATA[An implementation should document when this is the case.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/concurrent/locks/LockSupport/park/Object">
<![CDATA[Callers should re-check the conditions which caused the thread to park in the first place. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/concurrent/locks/LockSupport/park/">
<![CDATA[Callers should re-check the conditions which caused the thread to park in the first place. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/concurrent/locks/LockSupport/parkNanos/long">
<![CDATA[Callers should re-check the conditions which caused the thread to park in the first place. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/concurrent/locks/LockSupport/parkUntil/long">
<![CDATA[Callers should re-check the conditions which caused the thread to park in the first place. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/concurrent/locks/LockSupport/parkNanos/Object;long">
<![CDATA[Callers should re-check the conditions which caused the thread to park in the first place]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/Set/add/Object">
<![CDATA[ Individual set implementations should clearly document any restrictions on the elements that they may contain. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/Collection/add/Object">
<![CDATA[ Collection classes should clearly specify in their documentation any restrictions on what elements may be added.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/AbstractList/add/Object">
<![CDATA[ List classes should clearly specify in their documentation any restrictions on what elements may be added. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/Comparator/compare/Object;Object">
<![CDATA[ Generally speaking, any comparator that violates this condition should clearly indicate this fact. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/apache/commons/collections/OrderedBidiMap">
<![CDATA[Implementations should allow a value to be looked up from a key and a key to be looked up from a value with equal performance.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/apache/commons/collections/SortedBidiMap">
<![CDATA[Implementations should allow a value to be looked up from a key and a key to be looked up from a value with equal performance.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/apache/commons/collections/BidiMap">
<![CDATA[Implementations should allow a value to be looked up from a key and a key to be looked up from a value with equal performance. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/apache/commons/collections/map/StaticBucketMap">
<![CDATA[Finally, unlike {@link java.util.HashMap}-style implementations, this class never rehashes the map. The number of buckets is fixed at construction time and never altered. Performance may degrade if you do not allocate enough buckets upfront.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/apache/commons/collections/map/StaticBucketMap/StaticBucketMap/int">
<![CDATA[he number of buckets is inversely proportional to the chances for thread contention. The fewer buckets, the more chances for thread contention. The more buckets the fewer chances for thread contention. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/apache/commons/collections/map/StaticBucketMap">
<![CDATA[The {@link #atomic(Runnable)} method is provided to allow atomic iterations and bulk operations; however, overuse of {@link #atomic(Runnable) atomic} will basically result in a map that's slower than an ordinary synchronized {@link java.util.HashMap}. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/logging/Level/WARNING">
<![CDATA[In general WARNING messages should describe events that will be of interest to end users or system managers, or which indicate potential problems.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/logging/Level/INFO">
<![CDATA[ So the INFO level should only be used for reasonably significant messages that will make sense to end users and system admins.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/logging/Level/FINE">
<![CDATA[In general the FINE level should be used for information that will be broadly interesting to developers who do not have a specialized interest in the specific subsystem.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/jar/Pack200/Packer">
<![CDATA[ Both packing steps should use precisely the same options, and the segment limit may also need to be set to "-1", to prevent accidental variation of segment boundaries as class file sizes change slightly. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/prefs/Preferences/userNodeForPackage/Class">
<![CDATA[ Valuable data should not be stored at this node as it is shared by all programs that use it.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/apache/commons/collections/set/TransformedSortedSet">
<![CDATA[The add methods are affected by this class. Thus objects must be removed or searched for using their transformed form. For example, if the transformation converts Strings to Integers, you must use the Integer form to remove objects. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/apache/commons/collections/set/TransformedSet">
<![CDATA[The add methods are affected by this class. Thus objects must be removed or searched for using their transformed form. For example, if the transformation converts Strings to Integers, you must use the Integer form to remove objects. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/List">
<![CDATA[ From a performance standpoint, these methods should be used with caution. In many implementations they will perform costly linear searches.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/apache/commons/collections/bag/TransformedBag">
<![CDATA[The add methods are affected by this class. Thus objects must be removed or searched for using their transformed form. For example, if the transformation converts Strings to Integers, you must use the Integer form to remove objects. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/apache/commons/collections/bag/TransformedSortedBag">
<![CDATA[The add methods are affected by this class. Thus objects must be removed or searched for using their transformed form. For example, if the transformation converts Strings to Integers, you must use the Integer form to remove objects. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/apache/commons/collections/list/TransformedList">
<![CDATA[The add and set methods are affected by this class. Thus objects must be removed or searched for using their transformed form. For example, if the transformation converts Strings to Integers, you must use the Integer form to remove objects. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/apache/commons/collections/collection/TransformedCollection">
<![CDATA[The add methods are affected by this class. Thus objects must be removed or searched for using their transformed form. For example, if the transformation converts Strings to Integers, you must use the Integer form to remove objects. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/apache/commons/collections/buffer/TransformedBuffer">
<![CDATA[The add methods are affected by this class. Thus objects must be removed or searched for using their transformed form. For example, if the transformation converts Strings to Integers, you must use the Integer form to remove objects. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/prefs/Preferences/systemNodeForPackage/Class">
<![CDATA[ Valuable data should not be stored at this node as it is shared by all programs that use it. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/logging/LogRecord">
<![CDATA[ Therefore, if a logging Handler wants to pass off a LogRecord to another thread, or to transmit it over RMI, and if it wishes to subsequently obtain method name or class name information it should call one of getSourceClassName or getSourceMethodName to force the values to be filled in.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/Queue">
<![CDATA[Every Queue implementation must specify its ordering properties.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/sql/CallableStatement/registerOutParameter/int;int;String">
<![CDATA[To be portable, however, applications should always provide these values for user-defined and REF parameters. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/SuppressWarnings/value/">
<![CDATA[Compilers must ignore any warning names they do not recognize.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/sql/DriverManager">
<![CDATA[JDBC 4.0 Drivers must include the file META-INF/services/java.sql.Driver.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/sql/Driver">
<![CDATA[ It is strongly recommended that each Driver class should be small and standalone so that the Driver class can be loaded and queried without bringing in vast quantities of supporting code.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/management/MemoryPoolMXBean/getUsage/">
<![CDATA[For some memory pools, this method may be an expensive operation that requires some computation to determine the estimate. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/Override">
<![CDATA[If a method is annotated with this annotation type but does not override a superclass method, compilers are required to generate an error message.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/Process">
<![CDATA[There is no requirement that a process represented by a Process object execute asynchronously or concurrently with respect to the Java process that owns the Process object.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/Runtime/totalMemory/">
<![CDATA[Note that the amount of memory required to hold an object of any given type may be implementation-dependent. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/RuntimeException">
<![CDATA[A method is not required to declare in its throws clause any subclasses of RuntimeException that might be thrown during the execution of the method but not caught.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/sql/Driver/jdbcCompliant/">
<![CDATA[A driver may only report true here if it passes the JDBC compliance tests; otherwise it is required to return false.

JDBC compliance requires full support for the JDBC API and full support for SQL 92 Entry Level. It is expected that JDBC compliant drivers will be available for all the major commercial databases. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/concurrent/ConcurrentSkipListSet">
<![CDATA[Beware that, unlike in most collections, the size method is not a constant-time operation. Because of the asynchronous nature of these sets, determining the current number of elements requires a traversal of the elements. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/concurrent/ConcurrentSkipListSet/size/">
<![CDATA[Beware that, unlike in most collections, this method is NOT a constant-time operation. Because of the asynchronous nature of these sets, determining the current number of elements requires traversing them all to count the]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/concurrent/ConcurrentSkipListMap">
<![CDATA[Beware that, unlike in most collections, the size method is not a constant-time operation. Because of the asynchronous nature of these maps, determining the current number of elements requires a traversal of the element]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/concurrent/ConcurrentSkipListMap/size/">
<![CDATA[Beware that, unlike in most collections, this method is NOT a constant-time operation. Because of the asynchronous nature of these maps, determining the current number of elements requires traversing them all to count them.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/concurrent/ConcurrentLinkedQueue/size/">
<![CDATA[Beware that, unlike in most collections, this method is NOT a constant-time operation. Because of the asynchronous nature of these queues, determining the current number of elements requires an O(n) traversal.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/concurrent/ConcurrentHashMap/containsValue/Object">
<![CDATA[Note: This method requires a full internal traversal of the hash table, and so is much slower than method containsKey.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/TreeMap/containsValue/Object">
<![CDATA[ This operation will probably require time linear in the map size for most implementations.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/AbstractList/removeRange/int;int">
<![CDATA[ Note: if { ListIterator.remove} requires linear time, this implementation requires quadratic time.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/Map/containsValue/Object">
<![CDATA[ This operation will probably require time linear in the map size for most implementations of the Map interface. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/AbstractMap/containsValue/Object">
<![CDATA[ Note that this implementation requires linear time in the size of the map. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/AbstractMap/containsKey/Object">
<![CDATA[Note that this implementation requires linear time in the size of the map; ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/AbstractMap/get/Object">
<![CDATA[Note that this implementation requires linear time in the size of the map;]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/AbstractMap/remove/Object">
<![CDATA[Note that this implementation requires linear time in the size of the map; ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/net/Socket/setReuseAddress/boolean">
<![CDATA[When a TCP connection is closed the connection may remain in a timeout state for a period of time after the connection is closed (typically known as the TIME_WAIT state or 2MSL wait state). For applications using a well known socket address or port it may not be possible to bind a socket to the required SocketAddress if there is a connection in the timeout state involving the socket address or ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/net/ServerSocket/setReuseAddress/boolean">
<![CDATA[When a TCP connection is closed the connection may remain in a timeout state for a period of time after the connection is closed (typically known as the TIME_WAIT state or 2MSL wait state). For applications using a well known socket address or port it may not be possible to bind a socket to the required SocketAddress if there is a connection in the timeout state involving the socket address or port. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/RandomAccess">
<![CDATA[For example, some List implementations provide asymptotically linear access times if they get huge, but constant access times in practice. Such a List implementation should generally implement this interface.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/Dictionary">
<![CDATA[As a rule, the equals method should be used by implementations of this class to decide if two keys are the same.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/concurrent/ConcurrentLinkedQueue">
<![CDATA[Beware that, unlike in most collections, the { size} method is NOT a constant-time operation. Because of the asynchronous nature of these queues, determining the current number of elements requires a traversal of the elements. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/eclipse/jface/viewers/TableViewer/setSelection/ISelection;boolean">
<![CDATA[Sets a new selection for this viewer and optionally makes it visible. The TableViewer implementation of this method is inefficient for the ILazyContentProvider as lookup is done by indices rather than elements and may require population of the entire table in worse case.

Use Table#setSelection(int[] indices) and Table#showSelection() if you wish to set selection more efficiently when using a ILazyContentProvider. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/eclipse/jface/dialogs/MessageDialogWithToggle">
<![CDATA[It is strongly recommended that a cancel option be provided, so that the user has the option of making the decision at a later point in time.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/eclipse/jface/dialogs/IDialogConstants">
<![CDATA[IDialogConstants is the interface for common dialog strings and ids used throughout JFace. It is recommended that you use these labels and ids whereever for consistency with the JFace dialogs. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/management/ManagementFactory/getPlatformMBeanServer/">
<![CDATA[It is recommended that this platform MBeanServer also be used to register other application managed beans besides the platform MXBeans. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/ThreadGroup/activeCount/">
<![CDATA[Due to the inherently imprecise nature of the result, it is recommended that this method only be used for informational purposes. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/ThreadGroup/activeGroupCount/">
<![CDATA[Due to the inherently imprecise nature of the result, it is recommended that this method only be used for informational purposes.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/Thread/Thread/ThreadGroup;Runnable;String;long">
<![CDATA[Implementation note: Java platform implementers are encouraged to document their implementation's behavior with respect to the stackSize parameter.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/Math">
<![CDATA[ Code generators are encouraged to use platform-specific native libraries or microprocessor instructions, where available, to provide higher-performance implementations of Math methods. Such higher-performance implementations still must conform to the specification for Math. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/lang/annotation/Target">
<![CDATA[It is a compile-time error for a single ElementType constant to appear more than once in a Target annotation.]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/eclipse/jface/text/quickassist/IQuickFixableAnnotation">
<![CDATA[Caching the state is important to improve overall performance as calling {@link org.eclipse.jface.text.quickassist.IQuickAssistAssistant#canFix(Annotation)} can be expensive. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="org/eclipse/jface/viewers/deferred/LazySortedCollection/enableDebug">
<![CDATA[ Disables randomization and enables additional runtime error checking. Severely degrades performance if set to true. Intended for use in test suites only. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/net/Socket/setReceiveBufferSize/int">
<![CDATA[Increasing the receive buffer size can increase the performance of network I/O for high-volume connection, while decreasing it can help reduce the backlog of incoming data. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/util/regex/Pattern/CANON_EQ">
<![CDATA[ Specifying this flag may impose a performance penalty. ]]>
</directive>

<directive kind="Miscellaneous Directive" containing-api-element="java/rmi/server/RemoteObject/getRef/">
<![CDATA[Note: The object returned from this method may be an instance of an implementation-specific class. The RemoteObject class ensures serialization portability of its instances' remote references through the behavior of its custom writeObject and readObject methods. An instance of RemoteRef should not be serialized outside of its RemoteObject wrapper instance or the result may be unportable.]]>
</directive>

</group>
</dataset>
